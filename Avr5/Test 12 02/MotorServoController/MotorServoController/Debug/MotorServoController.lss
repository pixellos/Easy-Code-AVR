
MotorServoController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a78  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00001a78  00001b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007a  008001fe  008001fe  00001cca  2**0
                  ALLOC
  3 .eeprom       000001d0  00810000  00810000  00001cca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      00000030  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005d0  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007711  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006a8  00000000  00000000  00009be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014ab  00000000  00000000  0000a291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ce8  00000000  00000000  0000b73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000aba8  00000000  00000000  0000c424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001fb7  00000000  00000000  00016fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000610  00000000  00000000  00018f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00002e0b  00000000  00000000  00019593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_19>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	90 08       	sbc	r9, r0

00000056 <__ctors_end>:
      56:	66 09       	sbc	r22, r6

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	11 e0       	ldi	r17, 0x01	; 1
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e8 e7       	ldi	r30, 0x78	; 120
      6c:	fa e1       	ldi	r31, 0x1A	; 26
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ae 3f       	cpi	r26, 0xFE	; 254
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	22 e0       	ldi	r18, 0x02	; 2
      7c:	ae ef       	ldi	r26, 0xFE	; 254
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a8 37       	cpi	r26, 0x78	; 120
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	cb e2       	ldi	r28, 0x2B	; 43
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	21 97       	sbiw	r28, 0x01	; 1
      94:	fe 01       	movw	r30, r28
      96:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__tablejump2__>
      9a:	ca 32       	cpi	r28, 0x2A	; 42
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
      a4:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Z16firstButtonClickv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
      ac:	9b b3       	in	r25, 0x1b	; 27
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	89 27       	eor	r24, r25
      b2:	8b bb       	out	0x1b, r24	; 27
      b4:	08 95       	ret

000000b6 <_Z15firstButtonHoldv>:
	GreenLed.Toggle();
}

void firstButtonHold()
{
	BlinkFlag = !BlinkFlag;
      b6:	90 91 60 02 	lds	r25, 0x0260
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	89 27       	eor	r24, r25
      be:	80 93 60 02 	sts	0x0260, r24
      c2:	08 95       	ret

000000c4 <_Z17secondButtonClickv>:
}


void secondButtonClick()
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
      c8:	d9 9a       	sbi	0x1b, 1	; 27
		}
	}

	void Enable()
	{
		_ChipSelect->Clear();
      ca:	c2 e1       	ldi	r28, 0x12	; 18
      cc:	d2 e0       	ldi	r29, 0x02	; 2
      ce:	8a 89       	ldd	r24, Y+18	; 0x12
      d0:	9b 89       	ldd	r25, Y+19	; 0x13
      d2:	dc 01       	movw	r26, r24
      d4:	ed 91       	ld	r30, X+
      d6:	fc 91       	ld	r31, X
      d8:	00 88       	ldd	r0, Z+16	; 0x10
      da:	f1 89       	ldd	r31, Z+17	; 0x11
      dc:	e0 2d       	mov	r30, r0
      de:	09 95       	icall
		_NeedToClear = true;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	8b 87       	std	Y+11, r24	; 0x0b
	RedLed.Set();
	debugDisplay.Enable();
}
      e4:	df 91       	pop	r29
      e6:	cf 91       	pop	r28
      e8:	08 95       	ret

000000ea <_Z16secondButtonHoldv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
      ea:	d9 98       	cbi	0x1b, 1	; 27
	}

	void Disable()
	{
		_ChipSelect->Set();
      ec:	80 91 24 02 	lds	r24, 0x0224
      f0:	90 91 25 02 	lds	r25, 0x0225
      f4:	dc 01       	movw	r26, r24
      f6:	ed 91       	ld	r30, X+
      f8:	fc 91       	ld	r31, X
      fa:	06 84       	ldd	r0, Z+14	; 0x0e
      fc:	f7 85       	ldd	r31, Z+15	; 0x0f
      fe:	e0 2d       	mov	r30, r0
     100:	09 95       	icall
     102:	08 95       	ret

00000104 <_Z26LedBlinkPerDelayVariableMsP4Task>:
	sei();
}

void LedBlinkPerDelayVariableMs(Task * task)
{
	if (BlinkFlag)
     104:	80 91 60 02 	lds	r24, 0x0260
     108:	88 23       	and	r24, r24
     10a:	c9 f0       	breq	.+50     	; 0x13e <_Z26LedBlinkPerDelayVariableMsP4Task+0x3a>
	{
		if (ledCounter > 700)
     10c:	80 91 61 02 	lds	r24, 0x0261
     110:	90 91 62 02 	lds	r25, 0x0262
     114:	8d 3b       	cpi	r24, 0xBD	; 189
     116:	92 40       	sbci	r25, 0x02	; 2
     118:	44 f0       	brlt	.+16     	; 0x12a <_Z26LedBlinkPerDelayVariableMsP4Task+0x26>
		{
			ledCounter = 0;
     11a:	10 92 62 02 	sts	0x0262, r1
     11e:	10 92 61 02 	sts	0x0261, r1
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     122:	9b b3       	in	r25, 0x1b	; 27
     124:	84 e0       	ldi	r24, 0x04	; 4
     126:	89 27       	eor	r24, r25
     128:	8b bb       	out	0x1b, r24	; 27
			YellowLed.Toggle();
		}
		++ledCounter;
     12a:	80 91 61 02 	lds	r24, 0x0261
     12e:	90 91 62 02 	lds	r25, 0x0262
     132:	01 96       	adiw	r24, 0x01	; 1
     134:	90 93 62 02 	sts	0x0262, r25
     138:	80 93 61 02 	sts	0x0261, r24
     13c:	08 95       	ret
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     13e:	da 9a       	sbi	0x1b, 2	; 27
     140:	08 95       	ret

00000142 <_Z15KeyboardHandlerP4Task>:
		_HoldAction = hold;
	}

	void CheckButtonState()
	{
		if (!_ButtonPin->Check()) //Atmega has only internal pull ups - so button must be setted (1), and button must ground it. If pin == 0 then is pressed
     142:	80 91 08 02 	lds	r24, 0x0208
     146:	90 91 09 02 	lds	r25, 0x0209
     14a:	dc 01       	movw	r26, r24
     14c:	ed 91       	ld	r30, X+
     14e:	fc 91       	ld	r31, X
     150:	04 84       	ldd	r0, Z+12	; 0x0c
     152:	f5 85       	ldd	r31, Z+13	; 0x0d
     154:	e0 2d       	mov	r30, r0
     156:	09 95       	icall
     158:	81 11       	cpse	r24, r1
     15a:	08 c0       	rjmp	.+16     	; 0x16c <_Z15KeyboardHandlerP4Task+0x2a>
		{
			++_PressTime;
     15c:	e8 e0       	ldi	r30, 0x08	; 8
     15e:	f2 e0       	ldi	r31, 0x02	; 2
     160:	82 81       	ldd	r24, Z+2	; 0x02
     162:	93 81       	ldd	r25, Z+3	; 0x03
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	93 83       	std	Z+3, r25	; 0x03
     168:	82 83       	std	Z+2, r24	; 0x02
     16a:	21 c0       	rjmp	.+66     	; 0x1ae <_Z15KeyboardHandlerP4Task+0x6c>
		}
		else
		{
			if (_PressTime > MinHoldTime)
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f2 e0       	ldi	r31, 0x02	; 2
     170:	22 81       	ldd	r18, Z+2	; 0x02
     172:	33 81       	ldd	r19, Z+3	; 0x03
     174:	81 85       	ldd	r24, Z+9	; 0x09
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	82 17       	cp	r24, r18
     17a:	93 07       	cpc	r25, r19
     17c:	30 f4       	brcc	.+12     	; 0x18a <_Z15KeyboardHandlerP4Task+0x48>
			{
				_HoldAction();
     17e:	e0 91 0e 02 	lds	r30, 0x020E
     182:	f0 91 0f 02 	lds	r31, 0x020F
     186:	09 95       	icall
     188:	0e c0       	rjmp	.+28     	; 0x1a6 <_Z15KeyboardHandlerP4Task+0x64>
			}
			else if (_PressTime > MinClickTime)
     18a:	e8 e0       	ldi	r30, 0x08	; 8
     18c:	f2 e0       	ldi	r31, 0x02	; 2
     18e:	22 81       	ldd	r18, Z+2	; 0x02
     190:	33 81       	ldd	r19, Z+3	; 0x03
     192:	80 85       	ldd	r24, Z+8	; 0x08
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	82 17       	cp	r24, r18
     198:	93 07       	cpc	r25, r19
     19a:	28 f4       	brcc	.+10     	; 0x1a6 <_Z15KeyboardHandlerP4Task+0x64>
			{
				_ClickAction();
     19c:	e0 91 0c 02 	lds	r30, 0x020C
     1a0:	f0 91 0d 02 	lds	r31, 0x020D
     1a4:	09 95       	icall
			}
			_PressTime = 0;
     1a6:	10 92 0b 02 	sts	0x020B, r1
     1aa:	10 92 0a 02 	sts	0x020A, r1
		_HoldAction = hold;
	}

	void CheckButtonState()
	{
		if (!_ButtonPin->Check()) //Atmega has only internal pull ups - so button must be setted (1), and button must ground it. If pin == 0 then is pressed
     1ae:	80 91 fe 01 	lds	r24, 0x01FE
     1b2:	90 91 ff 01 	lds	r25, 0x01FF
     1b6:	dc 01       	movw	r26, r24
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	04 84       	ldd	r0, Z+12	; 0x0c
     1be:	f5 85       	ldd	r31, Z+13	; 0x0d
     1c0:	e0 2d       	mov	r30, r0
     1c2:	09 95       	icall
     1c4:	81 11       	cpse	r24, r1
     1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <_Z15KeyboardHandlerP4Task+0x96>
		{
			++_PressTime;
     1c8:	ee ef       	ldi	r30, 0xFE	; 254
     1ca:	f1 e0       	ldi	r31, 0x01	; 1
     1cc:	82 81       	ldd	r24, Z+2	; 0x02
     1ce:	93 81       	ldd	r25, Z+3	; 0x03
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	93 83       	std	Z+3, r25	; 0x03
     1d4:	82 83       	std	Z+2, r24	; 0x02
     1d6:	08 95       	ret
		}
		else
		{
			if (_PressTime > MinHoldTime)
     1d8:	ee ef       	ldi	r30, 0xFE	; 254
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	22 81       	ldd	r18, Z+2	; 0x02
     1de:	33 81       	ldd	r19, Z+3	; 0x03
     1e0:	81 85       	ldd	r24, Z+9	; 0x09
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	82 17       	cp	r24, r18
     1e6:	93 07       	cpc	r25, r19
     1e8:	30 f4       	brcc	.+12     	; 0x1f6 <_Z15KeyboardHandlerP4Task+0xb4>
			{
				_HoldAction();
     1ea:	e0 91 04 02 	lds	r30, 0x0204
     1ee:	f0 91 05 02 	lds	r31, 0x0205
     1f2:	09 95       	icall
     1f4:	0e c0       	rjmp	.+28     	; 0x212 <_Z15KeyboardHandlerP4Task+0xd0>
			}
			else if (_PressTime > MinClickTime)
     1f6:	ee ef       	ldi	r30, 0xFE	; 254
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	22 81       	ldd	r18, Z+2	; 0x02
     1fc:	33 81       	ldd	r19, Z+3	; 0x03
     1fe:	80 85       	ldd	r24, Z+8	; 0x08
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	82 17       	cp	r24, r18
     204:	93 07       	cpc	r25, r19
     206:	28 f4       	brcc	.+10     	; 0x212 <_Z15KeyboardHandlerP4Task+0xd0>
			{
				_ClickAction();
     208:	e0 91 02 02 	lds	r30, 0x0202
     20c:	f0 91 03 02 	lds	r31, 0x0203
     210:	09 95       	icall
			}
			_PressTime = 0;
     212:	10 92 01 02 	sts	0x0201, r1
     216:	10 92 00 02 	sts	0x0200, r1
     21a:	08 95       	ret

0000021c <_Znwj>:
*/
#ifndef __CPPHELPERS_H__
#define __CPPHELPERS_H__
void * operator new(size_t size)
{
	return malloc(size);
     21c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <malloc>
}
     220:	08 95       	ret

00000222 <_ZdlPv>:

void operator delete(void * ptr)
{
	free(ptr);
     222:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
     226:	08 95       	ret

00000228 <__vector_19>:
		#include "MainAsyncTaskManager.cpp"
	#endif
	static TaskManager Taskmanager;

	ISR(TIMER0_COMP_vect)
	{
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1
     232:	2f 93       	push	r18
     234:	3f 93       	push	r19
     236:	4f 93       	push	r20
     238:	5f 93       	push	r21
     23a:	6f 93       	push	r22
     23c:	7f 93       	push	r23
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	af 93       	push	r26
     244:	bf 93       	push	r27
     246:	ef 93       	push	r30
     248:	ff 93       	push	r31
	}
}

void Invoke()
{
	if (tasks[currentTaskNumber] != nullptr)
     24a:	e0 91 73 02 	lds	r30, 0x0273
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	ed 59       	subi	r30, 0x9D	; 157
     256:	fd 4f       	sbci	r31, 0xFD	; 253
     258:	80 81       	ld	r24, Z
     25a:	91 81       	ldd	r25, Z+1	; 0x01
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	31 f0       	breq	.+12     	; 0x26c <__vector_19+0x44>
	{
		tasks[currentTaskNumber]->currentMethod(tasks[currentTaskNumber]);
     260:	dc 01       	movw	r26, r24
     262:	12 96       	adiw	r26, 0x02	; 2
     264:	ed 91       	ld	r30, X+
     266:	fc 91       	ld	r31, X
     268:	13 97       	sbiw	r26, 0x03	; 3
     26a:	09 95       	icall
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
     26c:	80 91 73 02 	lds	r24, 0x0273
     270:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentTaskNumber >= NumberOfTasks)
     272:	88 30       	cpi	r24, 0x08	; 8
     274:	18 f4       	brcc	.+6      	; 0x27c <__vector_19+0x54>
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
     276:	80 93 73 02 	sts	0x0273, r24
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__vector_19+0x58>
	if (currentTaskNumber >= NumberOfTasks)
	{
		currentTaskNumber = 0;
     27c:	10 92 73 02 	sts	0x0273, r1
		Taskmanager.Invoke();
	}
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	bf 91       	pop	r27
     286:	af 91       	pop	r26
     288:	9f 91       	pop	r25
     28a:	8f 91       	pop	r24
     28c:	7f 91       	pop	r23
     28e:	6f 91       	pop	r22
     290:	5f 91       	pop	r21
     292:	4f 91       	pop	r20
     294:	3f 91       	pop	r19
     296:	2f 91       	pop	r18
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <_Z13RegisterTasksv>:
	secondButton.CheckButtonState();
}

void RegisterTasks()
{
	taskName.currentMethod = LedBlinkPerDelayVariableMs;
     2a2:	82 e8       	ldi	r24, 0x82	; 130
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 5f 02 	sts	0x025F, r25
     2aa:	80 93 5e 02 	sts	0x025E, r24
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
     2ae:	80 91 63 02 	lds	r24, 0x0263
     2b2:	90 91 64 02 	lds	r25, 0x0264
     2b6:	89 2b       	or	r24, r25
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <_Z13RegisterTasksv+0x30>
     2ba:	e5 e6       	ldi	r30, 0x65	; 101
     2bc:	f2 e0       	ldi	r31, 0x02	; 2
     2be:	43 e7       	ldi	r20, 0x73	; 115
     2c0:	52 e0       	ldi	r21, 0x02	; 2
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	bc 01       	movw	r22, r24
     2c8:	21 91       	ld	r18, Z+
     2ca:	31 91       	ld	r19, Z+
     2cc:	23 2b       	or	r18, r19
     2ce:	79 f4       	brne	.+30     	; 0x2ee <_Z13RegisterTasksv+0x4c>
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <_Z13RegisterTasksv+0x34>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
     2d6:	fb 01       	movw	r30, r22
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	ed 59       	subi	r30, 0x9D	; 157
     2de:	fd 4f       	sbci	r31, 0xFD	; 253
     2e0:	ac e5       	ldi	r26, 0x5C	; 92
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	b1 83       	std	Z+1, r27	; 0x01
     2e6:	a0 83       	st	Z, r26
	task.AlocateNumber = positionIndicator;
     2e8:	6d 93       	st	X+, r22
     2ea:	7c 93       	st	X, r23
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <_Z13RegisterTasksv+0x54>
     2ee:	01 96       	adiw	r24, 0x01	; 1

void Register(Task& task)
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
     2f0:	e4 17       	cp	r30, r20
     2f2:	f5 07       	cpc	r31, r21
     2f4:	41 f7       	brne	.-48     	; 0x2c6 <_Z13RegisterTasksv+0x24>
	Taskmanager.Register(taskName);
	keyboardTask.currentMethod = KeyboardHandler;
     2f6:	81 ea       	ldi	r24, 0xA1	; 161
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 5b 02 	sts	0x025B, r25
     2fe:	80 93 5a 02 	sts	0x025A, r24
	{
		if (tasks[firstFreeIndicator] == nullptr)
     302:	80 91 63 02 	lds	r24, 0x0263
     306:	90 91 64 02 	lds	r25, 0x0264
     30a:	89 2b       	or	r24, r25
     30c:	61 f0       	breq	.+24     	; 0x326 <_Z13RegisterTasksv+0x84>
     30e:	e5 e6       	ldi	r30, 0x65	; 101
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	43 e7       	ldi	r20, 0x73	; 115
     314:	52 e0       	ldi	r21, 0x02	; 2
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	bc 01       	movw	r22, r24
     31c:	21 91       	ld	r18, Z+
     31e:	31 91       	ld	r19, Z+
     320:	23 2b       	or	r18, r19
     322:	79 f4       	brne	.+30     	; 0x342 <_Z13RegisterTasksv+0xa0>
     324:	02 c0       	rjmp	.+4      	; 0x32a <_Z13RegisterTasksv+0x88>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
     32a:	fb 01       	movw	r30, r22
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ed 59       	subi	r30, 0x9D	; 157
     332:	fd 4f       	sbci	r31, 0xFD	; 253
     334:	a8 e5       	ldi	r26, 0x58	; 88
     336:	b2 e0       	ldi	r27, 0x02	; 2
     338:	b1 83       	std	Z+1, r27	; 0x01
     33a:	a0 83       	st	Z, r26
	task.AlocateNumber = positionIndicator;
     33c:	6d 93       	st	X+, r22
     33e:	7c 93       	st	X, r23
     340:	08 95       	ret
     342:	01 96       	adiw	r24, 0x01	; 1

void Register(Task& task)
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
     344:	e4 17       	cp	r30, r20
     346:	f5 07       	cpc	r31, r21
     348:	41 f7       	brne	.-48     	; 0x31a <_Z13RegisterTasksv+0x78>
     34a:	08 95       	ret

0000034c <_Z15InitializePortsv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     34c:	d0 9a       	sbi	0x1a, 0	; 26
     34e:	d1 9a       	sbi	0x1a, 1	; 26
     350:	d2 9a       	sbi	0x1a, 2	; 26
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     352:	d8 9a       	sbi	0x1b, 0	; 27
     354:	d9 9a       	sbi	0x1b, 1	; 27
     356:	da 9a       	sbi	0x1b, 2	; 27
     358:	08 95       	ret

0000035a <_Z17InitializeProgramv>:
		 RedLed.Set();
		 YellowLed.Set();
}

void InitializeProgram()
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
	InitializePorts();
     35e:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z15InitializePortsv>
			_DataCommand->Clear();
		}
	}
	void Initialize()
	{
		_Reset->FastAsOutput();
     362:	c2 e1       	ldi	r28, 0x12	; 18
     364:	d2 e0       	ldi	r29, 0x02	; 2
     366:	8e 85       	ldd	r24, Y+14	; 0x0e
     368:	9f 85       	ldd	r25, Y+15	; 0x0f
     36a:	dc 01       	movw	r26, r24
     36c:	ed 91       	ld	r30, X+
     36e:	fc 91       	ld	r31, X
     370:	06 80       	ldd	r0, Z+6	; 0x06
     372:	f7 81       	ldd	r31, Z+7	; 0x07
     374:	e0 2d       	mov	r30, r0
     376:	09 95       	icall
		_DataCommand->FastAsOutput();
     378:	8c 85       	ldd	r24, Y+12	; 0x0c
     37a:	9d 85       	ldd	r25, Y+13	; 0x0d
     37c:	dc 01       	movw	r26, r24
     37e:	ed 91       	ld	r30, X+
     380:	fc 91       	ld	r31, X
     382:	06 80       	ldd	r0, Z+6	; 0x06
     384:	f7 81       	ldd	r31, Z+7	; 0x07
     386:	e0 2d       	mov	r30, r0
     388:	09 95       	icall
		_ChipSelect->FastAsOutput();
     38a:	8a 89       	ldd	r24, Y+18	; 0x12
     38c:	9b 89       	ldd	r25, Y+19	; 0x13
     38e:	dc 01       	movw	r26, r24
     390:	ed 91       	ld	r30, X+
     392:	fc 91       	ld	r31, X
     394:	06 80       	ldd	r0, Z+6	; 0x06
     396:	f7 81       	ldd	r31, Z+7	; 0x07
     398:	e0 2d       	mov	r30, r0
     39a:	09 95       	icall
		_Mosi->FastAsOutput();
     39c:	88 89       	ldd	r24, Y+16	; 0x10
     39e:	99 89       	ldd	r25, Y+17	; 0x11
     3a0:	dc 01       	movw	r26, r24
     3a2:	ed 91       	ld	r30, X+
     3a4:	fc 91       	ld	r31, X
     3a6:	06 80       	ldd	r0, Z+6	; 0x06
     3a8:	f7 81       	ldd	r31, Z+7	; 0x07
     3aa:	e0 2d       	mov	r30, r0
     3ac:	09 95       	icall
		_Miso->FastAsOutput();
     3ae:	8e 89       	ldd	r24, Y+22	; 0x16
     3b0:	9f 89       	ldd	r25, Y+23	; 0x17
     3b2:	dc 01       	movw	r26, r24
     3b4:	ed 91       	ld	r30, X+
     3b6:	fc 91       	ld	r31, X
     3b8:	06 80       	ldd	r0, Z+6	; 0x06
     3ba:	f7 81       	ldd	r31, Z+7	; 0x07
     3bc:	e0 2d       	mov	r30, r0
     3be:	09 95       	icall
		_Clk->FastAsOutput();
     3c0:	8c 89       	ldd	r24, Y+20	; 0x14
     3c2:	9d 89       	ldd	r25, Y+21	; 0x15
     3c4:	dc 01       	movw	r26, r24
     3c6:	ed 91       	ld	r30, X+
     3c8:	fc 91       	ld	r31, X
     3ca:	06 80       	ldd	r0, Z+6	; 0x06
     3cc:	f7 81       	ldd	r31, Z+7	; 0x07
     3ce:	e0 2d       	mov	r30, r0
     3d0:	09 95       	icall
		_SS->FastAsOutput();
     3d2:	88 8d       	ldd	r24, Y+24	; 0x18
     3d4:	99 8d       	ldd	r25, Y+25	; 0x19
     3d6:	dc 01       	movw	r26, r24
     3d8:	ed 91       	ld	r30, X+
     3da:	fc 91       	ld	r31, X
     3dc:	06 80       	ldd	r0, Z+6	; 0x06
     3de:	f7 81       	ldd	r31, Z+7	; 0x07
     3e0:	e0 2d       	mov	r30, r0
     3e2:	09 95       	icall
		}
	}

	void Enable()
	{
		_ChipSelect->Clear();
     3e4:	8a 89       	ldd	r24, Y+18	; 0x12
     3e6:	9b 89       	ldd	r25, Y+19	; 0x13
     3e8:	dc 01       	movw	r26, r24
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	00 88       	ldd	r0, Z+16	; 0x10
     3f0:	f1 89       	ldd	r31, Z+17	; 0x11
     3f2:	e0 2d       	mov	r30, r0
     3f4:	09 95       	icall
		_NeedToClear = true;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	8b 87       	std	Y+11, r24	; 0x0b
		SPI_Send (SH1106_DISPLAYON);
	}

void ResetWithDelay()
{
	_Reset->Set();
     3fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     3fc:	9f 85       	ldd	r25, Y+15	; 0x0f
     3fe:	dc 01       	movw	r26, r24
     400:	ed 91       	ld	r30, X+
     402:	fc 91       	ld	r31, X
     404:	06 84       	ldd	r0, Z+14	; 0x0e
     406:	f7 85       	ldd	r31, Z+15	; 0x0f
     408:	e0 2d       	mov	r30, r0
     40a:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40c:	bf ef       	ldi	r27, 0xFF	; 255
     40e:	20 e7       	ldi	r18, 0x70	; 112
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	b1 50       	subi	r27, 0x01	; 1
     414:	20 40       	sbci	r18, 0x00	; 0
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <_Z17InitializeProgramv+0xb8>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <_Z17InitializeProgramv+0xc2>
     41c:	00 00       	nop
	_delay_ms(50);
	_Reset->Clear();
     41e:	8e 85       	ldd	r24, Y+14	; 0x0e
     420:	9f 85       	ldd	r25, Y+15	; 0x0f
     422:	dc 01       	movw	r26, r24
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	00 88       	ldd	r0, Z+16	; 0x10
     42a:	f1 89       	ldd	r31, Z+17	; 0x11
     42c:	e0 2d       	mov	r30, r0
     42e:	09 95       	icall
     430:	bf ef       	ldi	r27, 0xFF	; 255
     432:	20 e7       	ldi	r18, 0x70	; 112
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	b1 50       	subi	r27, 0x01	; 1
     438:	20 40       	sbci	r18, 0x00	; 0
     43a:	80 40       	sbci	r24, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <_Z17InitializeProgramv+0xdc>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <_Z17InitializeProgramv+0xe6>
     440:	00 00       	nop
	_delay_ms(50);
	_Reset->Set();
     442:	8e 85       	ldd	r24, Y+14	; 0x0e
     444:	9f 85       	ldd	r25, Y+15	; 0x0f
     446:	dc 01       	movw	r26, r24
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	06 84       	ldd	r0, Z+14	; 0x0e
     44e:	f7 85       	ldd	r31, Z+15	; 0x0f
     450:	e0 2d       	mov	r30, r0
     452:	09 95       	icall
	class SPI
	{
	public:
		void static InitializeAsMaster()
		{
			SPCR = 0;
     454:	1d b8       	out	0x0d, r1	; 13
			SPIEnable();
		}

		void static AsMaster()
		{
			SET(SPCR,(1<<MSTR));
     456:	6c 9a       	sbi	0x0d, 4	; 13
			CLEAR(SPCR,(1<<SPIE));
		}

		void static SPIEnable()
		{
			SET(SPCR,(1<<SPE));
     458:	6e 9a       	sbi	0x0d, 6	; 13
			SET(SPCR,(uint8_t)prescaler);
		}

		void static SetDoubleSpeed()
		{
			SET(SPSR,SPI2X);
     45a:	8e b1       	in	r24, 0x0e	; 14
     45c:	8e b9       	out	0x0e, r24	; 14
		ResetWithDelay();

		SPI::InitializeAsMaster();
		SPI::SetDoubleSpeed();

		_DataCommand->Clear();
     45e:	8c 85       	ldd	r24, Y+12	; 0x0c
     460:	9d 85       	ldd	r25, Y+13	; 0x0d
     462:	dc 01       	movw	r26, r24
     464:	ed 91       	ld	r30, X+
     466:	fc 91       	ld	r31, X
     468:	00 88       	ldd	r0, Z+16	; 0x10
     46a:	f1 89       	ldd	r31, Z+17	; 0x11
     46c:	e0 2d       	mov	r30, r0
     46e:	09 95       	icall
		SPI_Send (SH1106_DISPLAYOFF);
     470:	8a a1       	ldd	r24, Y+34	; 0x22
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     472:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     474:	77 9b       	sbis	0x0e, 7	; 14
     476:	fe cf       	rjmp	.-4      	; 0x474 <__stack+0x15>
		SPI::InitializeAsMaster();
		SPI::SetDoubleSpeed();

		_DataCommand->Clear();
		SPI_Send (SH1106_DISPLAYOFF);
		SPI_Send (SH1106_SETMULTIPLEX);
     478:	80 91 3b 02 	lds	r24, 0x023B
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     47c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     47e:	77 9b       	sbis	0x0e, 7	; 14
     480:	fe cf       	rjmp	.-4      	; 0x47e <__stack+0x1f>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     482:	8f e3       	ldi	r24, 0x3F	; 63
     484:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     486:	77 9b       	sbis	0x0e, 7	; 14
     488:	fe cf       	rjmp	.-4      	; 0x486 <__stack+0x27>

		_DataCommand->Clear();
		SPI_Send (SH1106_DISPLAYOFF);
		SPI_Send (SH1106_SETMULTIPLEX);
		SPI_Send (0x3F);
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
     48a:	80 91 3e 02 	lds	r24, 0x023E
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     48e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     490:	77 9b       	sbis	0x0e, 7	; 14
     492:	fe cf       	rjmp	.-4      	; 0x490 <__stack+0x31>
		_DataCommand->Clear();
		SPI_Send (SH1106_DISPLAYOFF);
		SPI_Send (SH1106_SETMULTIPLEX);
		SPI_Send (0x3F);
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
     494:	80 91 41 02 	lds	r24, 0x0241
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     498:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     49a:	77 9b       	sbis	0x0e, 7	; 14
     49c:	fe cf       	rjmp	.-4      	; 0x49a <__stack+0x3b>
		SPI_Send (SH1106_DISPLAYOFF);
		SPI_Send (SH1106_SETMULTIPLEX);
		SPI_Send (0x3F);
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
     49e:	80 91 3c 02 	lds	r24, 0x023C
     4a2:	82 60       	ori	r24, 0x02	; 2
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4a4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4a6:	77 9b       	sbis	0x0e, 7	; 14
     4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <__stack+0x47>
		SPI_Send (SH1106_SETMULTIPLEX);
		SPI_Send (0x3F);
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
		SPI_Send (SH1106_SETHIGHCOLUMN);    	/*set higher column address*/
     4aa:	80 91 3d 02 	lds	r24, 0x023D
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4ae:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4b0:	77 9b       	sbis	0x0e, 7	; 14
     4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <__stack+0x51>
		SPI_Send (0x3F);
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
		SPI_Send (SH1106_SETHIGHCOLUMN);    	/*set higher column address*/
		SPI_Send (SH1106_SEGREMAP|0x01); 		/*set segment remap*/
     4b4:	80 91 44 02 	lds	r24, 0x0244
     4b8:	81 60       	ori	r24, 0x01	; 1
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4ba:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4bc:	77 9b       	sbis	0x0e, 7	; 14
     4be:	fe cf       	rjmp	.-4      	; 0x4bc <__stack+0x5d>
		SPI_Send (SH1106_SETSTARTLINE);        /*set display start line*/
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
		SPI_Send (SH1106_SETHIGHCOLUMN);    	/*set higher column address*/
		SPI_Send (SH1106_SEGREMAP|0x01); 		/*set segment remap*/
		SPI_Send (SH1106_NORMALDISPLAY);    	/*normal / reverse*/
     4c0:	80 91 32 02 	lds	r24, 0x0232
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4c4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4c6:	77 9b       	sbis	0x0e, 7	; 14
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <__stack+0x67>
		SPI_Send (SH1106_PAGEADDR);   		 	/*set page address*/
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
		SPI_Send (SH1106_SETHIGHCOLUMN);    	/*set higher column address*/
		SPI_Send (SH1106_SEGREMAP|0x01); 		/*set segment remap*/
		SPI_Send (SH1106_NORMALDISPLAY);    	/*normal / reverse*/
		SPI_Send (SH1106_CHARGEPUMP);			/*set charge pump enable*/
     4ca:	80 91 45 02 	lds	r24, 0x0245
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4ce:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4d0:	77 9b       	sbis	0x0e, 7	; 14
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <__stack+0x71>
		SPI_Send (SH1106_SETLOWCOLUMN|0x02);	/*set lower column address*/
		SPI_Send (SH1106_SETHIGHCOLUMN);    	/*set higher column address*/
		SPI_Send (SH1106_SEGREMAP|0x01); 		/*set segment remap*/
		SPI_Send (SH1106_NORMALDISPLAY);    	/*normal / reverse*/
		SPI_Send (SH1106_CHARGEPUMP);			/*set charge pump enable*/
		SPI_Send (SH1106_MEMORYMODE);
     4d4:	80 91 3f 02 	lds	r24, 0x023F
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4d8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <__stack+0x7b>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4de:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     4e0:	77 9b       	sbis	0x0e, 7	; 14
     4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <__stack+0x81>
		SPI_Send (SH1106_SEGREMAP|0x01); 		/*set segment remap*/
		SPI_Send (SH1106_NORMALDISPLAY);    	/*normal / reverse*/
		SPI_Send (SH1106_CHARGEPUMP);			/*set charge pump enable*/
		SPI_Send (SH1106_MEMORYMODE);
		SPI_Send (0x00);
		SPI_Send (SH1106_EXTERNALVCC);			/*external VCC   */
     4e4:	80 91 46 02 	lds	r24, 0x0246
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4e8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4ea:	77 9b       	sbis	0x0e, 7	; 14
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <__stack+0x8b>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     4ee:	81 e3       	ldi	r24, 0x31	; 49
     4f0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <__stack+0x93>
     4f6:	8f e3       	ldi	r24, 0x3F	; 63
     4f8:	9c e9       	ldi	r25, 0x9C	; 156
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <__stack+0xa1>
     500:	00 00       	nop
		SPI_Send (SH1106_MEMORYMODE);
		SPI_Send (0x00);
		SPI_Send (SH1106_EXTERNALVCC);			/*external VCC   */
		SPI_Send (0x31);  						/*0X30---0X33  7,4V-8V-8,4V-9V */
		_delay_ms(10);
		SPI_Send (SH1106_COMSCANDEC);    		/*Com scan direction*/
     502:	80 91 43 02 	lds	r24, 0x0243
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     506:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     508:	77 9b       	sbis	0x0e, 7	; 14
     50a:	fe cf       	rjmp	.-4      	; 0x508 <__stack+0xa9>
		SPI_Send (0x00);
		SPI_Send (SH1106_EXTERNALVCC);			/*external VCC   */
		SPI_Send (0x31);  						/*0X30---0X33  7,4V-8V-8,4V-9V */
		_delay_ms(10);
		SPI_Send (SH1106_COMSCANDEC);    		/*Com scan direction*/
		SPI_Send (SH1106_SETDISPLAYOFFSET);    /*set display offset*/
     50c:	80 91 36 02 	lds	r24, 0x0236
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     510:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     512:	77 9b       	sbis	0x0e, 7	; 14
     514:	fe cf       	rjmp	.-4      	; 0x512 <__stack+0xb3>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     516:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     518:	77 9b       	sbis	0x0e, 7	; 14
     51a:	fe cf       	rjmp	.-4      	; 0x518 <__stack+0xb9>
		SPI_Send (0x31);  						/*0X30---0X33  7,4V-8V-8,4V-9V */
		_delay_ms(10);
		SPI_Send (SH1106_COMSCANDEC);    		/*Com scan direction*/
		SPI_Send (SH1106_SETDISPLAYOFFSET);    /*set display offset*/
		SPI_Send (0x00);   						/*   0x20  /   0x00 */
		SPI_Send (SH1106_SETDISPLAYCLOCKDIV);  /*set osc division*/
     51c:	80 91 39 02 	lds	r24, 0x0239
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     520:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     522:	77 9b       	sbis	0x0e, 7	; 14
     524:	fe cf       	rjmp	.-4      	; 0x522 <__stack+0xc3>
		_delay_ms(10);
		SPI_Send (SH1106_COMSCANDEC);    		/*Com scan direction*/
		SPI_Send (SH1106_SETDISPLAYOFFSET);    /*set display offset*/
		SPI_Send (0x00);   						/*   0x20  /   0x00 */
		SPI_Send (SH1106_SETDISPLAYCLOCKDIV);  /*set osc division*/
		SPI_Send (REFRESH_MAX);
     526:	80 91 2e 02 	lds	r24, 0x022E
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     52a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     52c:	77 9b       	sbis	0x0e, 7	; 14
     52e:	fe cf       	rjmp	.-4      	; 0x52c <__stack+0xcd>
		SPI_Send (SH1106_COMSCANDEC);    		/*Com scan direction*/
		SPI_Send (SH1106_SETDISPLAYOFFSET);    /*set display offset*/
		SPI_Send (0x00);   						/*   0x20  /   0x00 */
		SPI_Send (SH1106_SETDISPLAYCLOCKDIV);  /*set osc division*/
		SPI_Send (REFRESH_MAX);
		SPI_Send (SH1106_SETPRECHARGE);    	/*set pre-charge period*/
     530:	80 91 3a 02 	lds	r24, 0x023A
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     534:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     536:	77 9b       	sbis	0x0e, 7	; 14
     538:	fe cf       	rjmp	.-4      	; 0x536 <__stack+0xd7>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     53a:	8f e1       	ldi	r24, 0x1F	; 31
     53c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     53e:	77 9b       	sbis	0x0e, 7	; 14
     540:	fe cf       	rjmp	.-4      	; 0x53e <__stack+0xdf>
		SPI_Send (0x00);   						/*   0x20  /   0x00 */
		SPI_Send (SH1106_SETDISPLAYCLOCKDIV);  /*set osc division*/
		SPI_Send (REFRESH_MAX);
		SPI_Send (SH1106_SETPRECHARGE);    	/*set pre-charge period*/
		SPI_Send (0x1f);    					/*0x22  /  0x1f*/
		SPI_Send (SH1106_SETCOMPINS);    		/*set COM pins*/
     542:	80 91 37 02 	lds	r24, 0x0237
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     546:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     548:	77 9b       	sbis	0x0e, 7	; 14
     54a:	fe cf       	rjmp	.-4      	; 0x548 <__stack+0xe9>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     54c:	82 e1       	ldi	r24, 0x12	; 18
     54e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     550:	77 9b       	sbis	0x0e, 7	; 14
     552:	fe cf       	rjmp	.-4      	; 0x550 <__stack+0xf1>
		SPI_Send (REFRESH_MAX);
		SPI_Send (SH1106_SETPRECHARGE);    	/*set pre-charge period*/
		SPI_Send (0x1f);    					/*0x22  /  0x1f*/
		SPI_Send (SH1106_SETCOMPINS);    		/*set COM pins*/
		SPI_Send (0x12);
		SPI_Send (SH1106_SETVCOMDETECT);    	/*set vcomh*/
     554:	80 91 38 02 	lds	r24, 0x0238
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     558:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     55a:	77 9b       	sbis	0x0e, 7	; 14
     55c:	fe cf       	rjmp	.-4      	; 0x55a <__stack+0xfb>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     55e:	80 e4       	ldi	r24, 0x40	; 64
     560:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     562:	77 9b       	sbis	0x0e, 7	; 14
     564:	fe cf       	rjmp	.-4      	; 0x562 <__stack+0x103>
		SPI_Send (0x1f);    					/*0x22  /  0x1f*/
		SPI_Send (SH1106_SETCOMPINS);    		/*set COM pins*/
		SPI_Send (0x12);
		SPI_Send (SH1106_SETVCOMDETECT);    	/*set vcomh*/
		SPI_Send (0x40);
		SPI_Send (SH1106_SETCONTRAST);
     566:	80 91 2f 02 	lds	r24, 0x022F
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     56a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     56c:	77 9b       	sbis	0x0e, 7	; 14
     56e:	fe cf       	rjmp	.-4      	; 0x56c <__stack+0x10d>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     574:	77 9b       	sbis	0x0e, 7	; 14
     576:	fe cf       	rjmp	.-4      	; 0x574 <__stack+0x115>
		SPI_Send (0x12);
		SPI_Send (SH1106_SETVCOMDETECT);    	/*set vcomh*/
		SPI_Send (0x40);
		SPI_Send (SH1106_SETCONTRAST);
		SPI_Send (255);
		SPI_Send (SH1106_DISPLAYALLON_RESUME);
     578:	80 91 30 02 	lds	r24, 0x0230
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     57c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     57e:	77 9b       	sbis	0x0e, 7	; 14
     580:	fe cf       	rjmp	.-4      	; 0x57e <__stack+0x11f>
		SPI_Send (SH1106_SETVCOMDETECT);    	/*set vcomh*/
		SPI_Send (0x40);
		SPI_Send (SH1106_SETCONTRAST);
		SPI_Send (255);
		SPI_Send (SH1106_DISPLAYALLON_RESUME);
		SPI_Send (SH1106_NORMALDISPLAY);
     582:	80 91 32 02 	lds	r24, 0x0232
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     586:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     588:	77 9b       	sbis	0x0e, 7	; 14
     58a:	fe cf       	rjmp	.-4      	; 0x588 <__stack+0x129>
		SPI_Send (0x40);
		SPI_Send (SH1106_SETCONTRAST);
		SPI_Send (255);
		SPI_Send (SH1106_DISPLAYALLON_RESUME);
		SPI_Send (SH1106_NORMALDISPLAY);
		SPI_Send (SH1106_DISPLAYON);
     58c:	80 91 35 02 	lds	r24, 0x0235
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     590:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     592:	77 9b       	sbis	0x0e, 7	; 14
     594:	fe cf       	rjmp	.-4      	; 0x592 <__stack+0x133>
	debugDisplay.Initialize();
	RegisterTasks();
     596:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z13RegisterTasksv>
	class Timer0
	{
	public:
		void static SetCompareValue(uint8_t compareRegisterValue)
		{
			OCR0 = compareRegisterValue;
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	8c bf       	out	0x3c, r24	; 60
			SET(TCCR0,(uint8_t)prescaler);
		}

		static void WaveFormMode(WaveForms waveForms)
		{
			CLEAR(TCCR0,(1<<WGM01)||(1<<WGM00));
     59e:	83 b7       	in	r24, 0x33	; 51
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)waveForms);
     5a4:	83 b7       	in	r24, 0x33	; 51
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	83 bf       	out	0x33, r24	; 51
			AllBitsSet = CompareAndOverFlowInterrupts
		};

		volatile void static SetInterrupts(InterruptMask interrupt)
		{
			CLEAR(TIMSK,(TOIE0,OCIE0));
     5aa:	89 b7       	in	r24, 0x39	; 57
     5ac:	8e 7f       	andi	r24, 0xFE	; 254
     5ae:	89 bf       	out	0x39, r24	; 57
			TIMSK |= interrupt;
     5b0:	89 b7       	in	r24, 0x39	; 57
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	89 bf       	out	0x39, r24	; 57
			SET(SFIOR,(1<<PSR10));
		}

		static void SetPrescaler(Prescalers prescaler)
		{
			CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
     5b6:	83 b7       	in	r24, 0x33	; 51
     5b8:	88 7f       	andi	r24, 0xF8	; 248
     5ba:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)prescaler);
     5bc:	83 b7       	in	r24, 0x33	; 51
     5be:	84 60       	ori	r24, 0x04	; 4
     5c0:	83 bf       	out	0x33, r24	; 51
{
	Timer0::SetCompareValue(7); // Why 7? When we get 16mhz, divide it 8 (8 tasks), we get 2mhz, divide it 8*256 its 2048 - 1 ms -
	Timer0::WaveFormMode(Timer0::WaveForms::CTC);
	Timer0::SetInterrupts(CodeEasyAvr::Timer0::CompareMatchInterrupt);
	Timer0::SetPrescaler(Timer0::Prescalers::Prescaler_256);
	sei();
     5c2:	78 94       	sei
{
	InitializePorts();
	debugDisplay.Initialize();
	RegisterTasks();
	EnableAsync();
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <main>:

int main()
{
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	InitializeProgram();
     5d4:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z17InitializeProgramv>
		}
	}

	void PrintDebugMessage()
	{	
		tabs[9] = '0';
     5d8:	0f 2e       	mov	r0, r31
     5da:	f0 e3       	ldi	r31, 0x30	; 48
     5dc:	bf 2e       	mov	r11, r31
     5de:	f0 2d       	mov	r31, r0
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     5e0:	22 e1       	ldi	r18, 0x12	; 18
     5e2:	32 e0       	ldi	r19, 0x02	; 2
     5e4:	52 2e       	mov	r5, r18
     5e6:	d9 01       	movw	r26, r18
     5e8:	4b 2e       	mov	r4, r27
	{
		for (int i = 0; i < 8; i++)
		{
			if (registerData & (1<<i))
			{
				tabs[i] = '1';
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f1 e3       	ldi	r31, 0x31	; 49
     5ee:	af 2e       	mov	r10, r31
     5f0:	f0 2d       	mov	r31, r0
		}
	}

	void PrintDebugMessage()
	{	
		tabs[9] = '0';
     5f2:	b9 82       	std	Y+1, r11	; 0x01
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f3 e1       	ldi	r31, 0x13	; 19
     5f8:	6f 2e       	mov	r6, r31
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	7f 2e       	mov	r7, r31
     5fe:	f0 2d       	mov	r31, r0
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     600:	31 2c       	mov	r3, r1
     602:	21 2c       	mov	r2, r1
		}
	}

	void PrintDebugMessage()
	{	
		tabs[9] = '0';
     604:	b9 81       	ldd	r27, Y+1	; 0x01
     606:	b0 93 1b 02 	sts	0x021B, r27
		while(!(SPSR & (1<< SPIF)));
	}

	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
     60a:	80 91 1e 02 	lds	r24, 0x021E
     60e:	90 91 1f 02 	lds	r25, 0x021F
     612:	dc 01       	movw	r26, r24
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	00 88       	ldd	r0, Z+16	; 0x10
     61a:	f1 89       	ldd	r31, Z+17	; 0x11
     61c:	e0 2d       	mov	r30, r0
     61e:	09 95       	icall
		this->operator<<(SH1106_SETLOWCOLUMN);
     620:	80 91 3c 02 	lds	r24, 0x023C
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     624:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     626:	77 9b       	sbis	0x0e, 7	; 14
     628:	fe cf       	rjmp	.-4      	; 0x626 <main+0x5c>
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     62a:	b0 eb       	ldi	r27, 0xB0	; 176
     62c:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1<< SPIF)));
     62e:	77 9b       	sbis	0x0e, 7	; 14
     630:	fe cf       	rjmp	.-4      	; 0x62e <main+0x64>
	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
     632:	80 91 3d 02 	lds	r24, 0x023D
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     636:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     638:	77 9b       	sbis	0x0e, 7	; 14
     63a:	fe cf       	rjmp	.-4      	; 0x638 <main+0x6e>
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
		_DataCommand->Set();
     63c:	80 91 1e 02 	lds	r24, 0x021E
     640:	90 91 1f 02 	lds	r25, 0x021F
     644:	dc 01       	movw	r26, r24
     646:	ed 91       	ld	r30, X+
     648:	fc 91       	ld	r31, X
     64a:	06 84       	ldd	r0, Z+14	; 0x0e
     64c:	f7 85       	ldd	r31, Z+15	; 0x0f
     64e:	e0 2d       	mov	r30, r0
     650:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     652:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     654:	77 9b       	sbis	0x0e, 7	; 14
     656:	fe cf       	rjmp	.-4      	; 0x654 <main+0x8a>

	void PrintDebugMessage()
	{	
		tabs[9] = '0';
		this->ChangeActiveLine(0);
		eeprom_read_block(tabs,PinAString,6);
     658:	46 e0       	ldi	r20, 0x06	; 6
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	62 e1       	ldi	r22, 0x12	; 18
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	85 2d       	mov	r24, r5
     662:	94 2d       	mov	r25, r4
     664:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <eeprom_read_block>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     668:	80 91 1e 02 	lds	r24, 0x021E
     66c:	90 91 1f 02 	lds	r25, 0x021F
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	06 84       	ldd	r0, Z+14	; 0x0e
     678:	f7 85       	ldd	r31, Z+15	; 0x0f
     67a:	e0 2d       	mov	r30, r0
     67c:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     67e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     680:	77 9b       	sbis	0x0e, 7	; 14
     682:	fe cf       	rjmp	.-4      	; 0x680 <main+0xb6>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     684:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     686:	77 9b       	sbis	0x0e, 7	; 14
     688:	fe cf       	rjmp	.-4      	; 0x686 <main+0xbc>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     68a:	e2 e1       	ldi	r30, 0x12	; 18
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	10 81       	ld	r17, Z
     690:	11 23       	and	r17, r17
     692:	09 f4       	brne	.+2      	; 0x696 <main+0xcc>
     694:	42 c0       	rjmp	.+132    	; 0x71a <main+0x150>
     696:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     698:	10 32       	cpi	r17, 0x20	; 32
     69a:	21 f4       	brne	.+8      	; 0x6a4 <main+0xda>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     69c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     69e:	77 9b       	sbis	0x0e, 7	; 14
     6a0:	fe cf       	rjmp	.-4      	; 0x69e <main+0xd4>
     6a2:	36 c0       	rjmp	.+108    	; 0x710 <main+0x146>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     6a4:	80 91 1e 02 	lds	r24, 0x021E
     6a8:	90 91 1f 02 	lds	r25, 0x021F
     6ac:	dc 01       	movw	r26, r24
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	06 84       	ldd	r0, Z+14	; 0x0e
     6b4:	f7 85       	ldd	r31, Z+15	; 0x0f
     6b6:	e0 2d       	mov	r30, r0
     6b8:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     6ba:	01 2f       	mov	r16, r17
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	c8 01       	movw	r24, r16
     6c0:	88 97       	sbiw	r24, 0x28	; 40
     6c2:	8c 01       	movw	r16, r24
     6c4:	00 0f       	add	r16, r16
     6c6:	11 1f       	adc	r17, r17
     6c8:	00 0f       	add	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	08 0f       	add	r16, r24
     6ce:	19 1f       	adc	r17, r25
     6d0:	f8 01       	movw	r30, r16
     6d2:	e8 5e       	subi	r30, 0xE8	; 232
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	6f 01       	movw	r12, r30
     6d8:	03 5e       	subi	r16, 0xE3	; 227
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	c6 01       	movw	r24, r12
     6de:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     6e2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     6e4:	77 9b       	sbis	0x0e, 7	; 14
     6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <main+0x11a>
     6e8:	ff ef       	ldi	r31, 0xFF	; 255
     6ea:	cf 1a       	sub	r12, r31
     6ec:	df 0a       	sbc	r13, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     6ee:	c0 16       	cp	r12, r16
     6f0:	d1 06       	cpc	r13, r17
     6f2:	a1 f7       	brne	.-24     	; 0x6dc <main+0x112>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     6f4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     6f6:	77 9b       	sbis	0x0e, 7	; 14
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <main+0x12c>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     6fa:	80 91 1e 02 	lds	r24, 0x021E
     6fe:	90 91 1f 02 	lds	r25, 0x021F
     702:	dc 01       	movw	r26, r24
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	00 88       	ldd	r0, Z+16	; 0x10
     70a:	f1 89       	ldd	r31, Z+17	; 0x11
     70c:	e0 2d       	mov	r30, r0
     70e:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     710:	f7 01       	movw	r30, r14
     712:	11 91       	ld	r17, Z+
     714:	7f 01       	movw	r14, r30
     716:	11 11       	cpse	r17, r1
     718:	bf cf       	rjmp	.-130    	; 0x698 <main+0xce>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     71a:	80 91 1e 02 	lds	r24, 0x021E
     71e:	90 91 1f 02 	lds	r25, 0x021F
     722:	dc 01       	movw	r26, r24
     724:	ed 91       	ld	r30, X+
     726:	fc 91       	ld	r31, X
     728:	00 88       	ldd	r0, Z+16	; 0x10
     72a:	f1 89       	ldd	r31, Z+17	; 0x11
     72c:	e0 2d       	mov	r30, r0
     72e:	09 95       	icall
	{	
		tabs[9] = '0';
		this->ChangeActiveLine(0);
		eeprom_read_block(tabs,PinAString,6);
		this->PrintString(tabs);
		RegisterDataToString(PINA);
     730:	49 b3       	in	r20, 0x19	; 25
     732:	c5 2c       	mov	r12, r5
     734:	d4 2c       	mov	r13, r4
     736:	e5 2d       	mov	r30, r5
     738:	f4 2d       	mov	r31, r4
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     73a:	83 2d       	mov	r24, r3
     73c:	92 2d       	mov	r25, r2
		{
			if (registerData & (1<<i))
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	9a 01       	movw	r18, r20
     742:	08 2e       	mov	r0, r24
     744:	02 c0       	rjmp	.+4      	; 0x74a <main+0x180>
     746:	35 95       	asr	r19
     748:	27 95       	ror	r18
     74a:	0a 94       	dec	r0
     74c:	e2 f7       	brpl	.-8      	; 0x746 <main+0x17c>
     74e:	20 ff       	sbrs	r18, 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <main+0x18c>
			{
				tabs[i] = '1';
     752:	a0 82       	st	Z, r10
     754:	01 c0       	rjmp	.+2      	; 0x758 <main+0x18e>
			}
			else
			{
				tabs[i] = '0';
     756:	b0 82       	st	Z, r11
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	31 96       	adiw	r30, 0x01	; 1
     75c:	88 30       	cpi	r24, 0x08	; 8
     75e:	91 05       	cpc	r25, r1
     760:	79 f7       	brne	.-34     	; 0x740 <main+0x176>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     762:	80 91 1e 02 	lds	r24, 0x021E
     766:	90 91 1f 02 	lds	r25, 0x021F
     76a:	dc 01       	movw	r26, r24
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	06 84       	ldd	r0, Z+14	; 0x0e
     772:	f7 85       	ldd	r31, Z+15	; 0x0f
     774:	e0 2d       	mov	r30, r0
     776:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     778:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     77a:	77 9b       	sbis	0x0e, 7	; 14
     77c:	fe cf       	rjmp	.-4      	; 0x77a <main+0x1b0>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     77e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     780:	77 9b       	sbis	0x0e, 7	; 14
     782:	fe cf       	rjmp	.-4      	; 0x780 <main+0x1b6>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     784:	e2 e1       	ldi	r30, 0x12	; 18
     786:	f2 e0       	ldi	r31, 0x02	; 2
     788:	10 81       	ld	r17, Z
     78a:	11 23       	and	r17, r17
     78c:	09 f4       	brne	.+2      	; 0x790 <main+0x1c6>
     78e:	42 c0       	rjmp	.+132    	; 0x814 <main+0x24a>
     790:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     792:	10 32       	cpi	r17, 0x20	; 32
     794:	21 f4       	brne	.+8      	; 0x79e <main+0x1d4>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     796:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <main+0x1ce>
     79c:	36 c0       	rjmp	.+108    	; 0x80a <main+0x240>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     79e:	80 91 1e 02 	lds	r24, 0x021E
     7a2:	90 91 1f 02 	lds	r25, 0x021F
     7a6:	dc 01       	movw	r26, r24
     7a8:	ed 91       	ld	r30, X+
     7aa:	fc 91       	ld	r31, X
     7ac:	06 84       	ldd	r0, Z+14	; 0x0e
     7ae:	f7 85       	ldd	r31, Z+15	; 0x0f
     7b0:	e0 2d       	mov	r30, r0
     7b2:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     7b4:	01 2f       	mov	r16, r17
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	c8 01       	movw	r24, r16
     7ba:	88 97       	sbiw	r24, 0x28	; 40
     7bc:	8c 01       	movw	r16, r24
     7be:	00 0f       	add	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	00 0f       	add	r16, r16
     7c4:	11 1f       	adc	r17, r17
     7c6:	08 0f       	add	r16, r24
     7c8:	19 1f       	adc	r17, r25
     7ca:	f8 01       	movw	r30, r16
     7cc:	e8 5e       	subi	r30, 0xE8	; 232
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	4f 01       	movw	r8, r30
     7d2:	03 5e       	subi	r16, 0xE3	; 227
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	c4 01       	movw	r24, r8
     7d8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     7dc:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     7de:	77 9b       	sbis	0x0e, 7	; 14
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <main+0x214>
     7e2:	ff ef       	ldi	r31, 0xFF	; 255
     7e4:	8f 1a       	sub	r8, r31
     7e6:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     7e8:	80 16       	cp	r8, r16
     7ea:	91 06       	cpc	r9, r17
     7ec:	a1 f7       	brne	.-24     	; 0x7d6 <main+0x20c>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     7ee:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     7f0:	77 9b       	sbis	0x0e, 7	; 14
     7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <main+0x226>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     7f4:	80 91 1e 02 	lds	r24, 0x021E
     7f8:	90 91 1f 02 	lds	r25, 0x021F
     7fc:	dc 01       	movw	r26, r24
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	00 88       	ldd	r0, Z+16	; 0x10
     804:	f1 89       	ldd	r31, Z+17	; 0x11
     806:	e0 2d       	mov	r30, r0
     808:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     80a:	f7 01       	movw	r30, r14
     80c:	11 91       	ld	r17, Z+
     80e:	7f 01       	movw	r14, r30
     810:	11 11       	cpse	r17, r1
     812:	bf cf       	rjmp	.-130    	; 0x792 <main+0x1c8>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     814:	80 91 1e 02 	lds	r24, 0x021E
     818:	90 91 1f 02 	lds	r25, 0x021F
     81c:	dc 01       	movw	r26, r24
     81e:	ed 91       	ld	r30, X+
     820:	fc 91       	ld	r31, X
     822:	00 88       	ldd	r0, Z+16	; 0x10
     824:	f1 89       	ldd	r31, Z+17	; 0x11
     826:	e0 2d       	mov	r30, r0
     828:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
     82a:	80 91 1e 02 	lds	r24, 0x021E
     82e:	90 91 1f 02 	lds	r25, 0x021F
     832:	dc 01       	movw	r26, r24
     834:	ed 91       	ld	r30, X+
     836:	fc 91       	ld	r31, X
     838:	00 88       	ldd	r0, Z+16	; 0x10
     83a:	f1 89       	ldd	r31, Z+17	; 0x11
     83c:	e0 2d       	mov	r30, r0
     83e:	09 95       	icall
		this->operator<<(SH1106_SETLOWCOLUMN);
     840:	80 91 3c 02 	lds	r24, 0x023C
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     844:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     846:	77 9b       	sbis	0x0e, 7	; 14
     848:	fe cf       	rjmp	.-4      	; 0x846 <main+0x27c>
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     84a:	b1 eb       	ldi	r27, 0xB1	; 177
     84c:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1<< SPIF)));
     84e:	77 9b       	sbis	0x0e, 7	; 14
     850:	fe cf       	rjmp	.-4      	; 0x84e <main+0x284>
	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
     852:	80 91 3d 02 	lds	r24, 0x023D
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     856:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     858:	77 9b       	sbis	0x0e, 7	; 14
     85a:	fe cf       	rjmp	.-4      	; 0x858 <main+0x28e>
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
		_DataCommand->Set();
     85c:	80 91 1e 02 	lds	r24, 0x021E
     860:	90 91 1f 02 	lds	r25, 0x021F
     864:	dc 01       	movw	r26, r24
     866:	ed 91       	ld	r30, X+
     868:	fc 91       	ld	r31, X
     86a:	06 84       	ldd	r0, Z+14	; 0x0e
     86c:	f7 85       	ldd	r31, Z+15	; 0x0f
     86e:	e0 2d       	mov	r30, r0
     870:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     872:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     874:	77 9b       	sbis	0x0e, 7	; 14
     876:	fe cf       	rjmp	.-4      	; 0x874 <main+0x2aa>
		this->PrintString(tabs);
		RegisterDataToString(PINA);
		this->PrintString(tabs);
		
		this->ChangeActiveLine(1);
		eeprom_read_block(tabs,PinBString,6);
     878:	46 e0       	ldi	r20, 0x06	; 6
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	6c e0       	ldi	r22, 0x0C	; 12
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	85 2d       	mov	r24, r5
     882:	94 2d       	mov	r25, r4
     884:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <eeprom_read_block>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     888:	80 91 1e 02 	lds	r24, 0x021E
     88c:	90 91 1f 02 	lds	r25, 0x021F
     890:	dc 01       	movw	r26, r24
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	06 84       	ldd	r0, Z+14	; 0x0e
     898:	f7 85       	ldd	r31, Z+15	; 0x0f
     89a:	e0 2d       	mov	r30, r0
     89c:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     89e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     8a0:	77 9b       	sbis	0x0e, 7	; 14
     8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <main+0x2d6>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     8a4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     8a6:	77 9b       	sbis	0x0e, 7	; 14
     8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <main+0x2dc>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     8aa:	e2 e1       	ldi	r30, 0x12	; 18
     8ac:	f2 e0       	ldi	r31, 0x02	; 2
     8ae:	10 81       	ld	r17, Z
     8b0:	11 23       	and	r17, r17
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <main+0x2ec>
     8b4:	42 c0       	rjmp	.+132    	; 0x93a <main+0x370>
     8b6:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     8b8:	10 32       	cpi	r17, 0x20	; 32
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <main+0x2fa>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     8bc:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     8be:	77 9b       	sbis	0x0e, 7	; 14
     8c0:	fe cf       	rjmp	.-4      	; 0x8be <main+0x2f4>
     8c2:	36 c0       	rjmp	.+108    	; 0x930 <main+0x366>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     8c4:	80 91 1e 02 	lds	r24, 0x021E
     8c8:	90 91 1f 02 	lds	r25, 0x021F
     8cc:	dc 01       	movw	r26, r24
     8ce:	ed 91       	ld	r30, X+
     8d0:	fc 91       	ld	r31, X
     8d2:	06 84       	ldd	r0, Z+14	; 0x0e
     8d4:	f7 85       	ldd	r31, Z+15	; 0x0f
     8d6:	e0 2d       	mov	r30, r0
     8d8:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     8da:	01 2f       	mov	r16, r17
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	c8 01       	movw	r24, r16
     8e0:	88 97       	sbiw	r24, 0x28	; 40
     8e2:	8c 01       	movw	r16, r24
     8e4:	00 0f       	add	r16, r16
     8e6:	11 1f       	adc	r17, r17
     8e8:	00 0f       	add	r16, r16
     8ea:	11 1f       	adc	r17, r17
     8ec:	08 0f       	add	r16, r24
     8ee:	19 1f       	adc	r17, r25
     8f0:	f8 01       	movw	r30, r16
     8f2:	e8 5e       	subi	r30, 0xE8	; 232
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	4f 01       	movw	r8, r30
     8f8:	03 5e       	subi	r16, 0xE3	; 227
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	c4 01       	movw	r24, r8
     8fe:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     902:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     904:	77 9b       	sbis	0x0e, 7	; 14
     906:	fe cf       	rjmp	.-4      	; 0x904 <main+0x33a>
     908:	ff ef       	ldi	r31, 0xFF	; 255
     90a:	8f 1a       	sub	r8, r31
     90c:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     90e:	80 16       	cp	r8, r16
     910:	91 06       	cpc	r9, r17
     912:	a1 f7       	brne	.-24     	; 0x8fc <main+0x332>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     914:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     916:	77 9b       	sbis	0x0e, 7	; 14
     918:	fe cf       	rjmp	.-4      	; 0x916 <main+0x34c>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     91a:	80 91 1e 02 	lds	r24, 0x021E
     91e:	90 91 1f 02 	lds	r25, 0x021F
     922:	dc 01       	movw	r26, r24
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	00 88       	ldd	r0, Z+16	; 0x10
     92a:	f1 89       	ldd	r31, Z+17	; 0x11
     92c:	e0 2d       	mov	r30, r0
     92e:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     930:	f7 01       	movw	r30, r14
     932:	11 91       	ld	r17, Z+
     934:	7f 01       	movw	r14, r30
     936:	11 11       	cpse	r17, r1
     938:	bf cf       	rjmp	.-130    	; 0x8b8 <main+0x2ee>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     93a:	80 91 1e 02 	lds	r24, 0x021E
     93e:	90 91 1f 02 	lds	r25, 0x021F
     942:	dc 01       	movw	r26, r24
     944:	ed 91       	ld	r30, X+
     946:	fc 91       	ld	r31, X
     948:	00 88       	ldd	r0, Z+16	; 0x10
     94a:	f1 89       	ldd	r31, Z+17	; 0x11
     94c:	e0 2d       	mov	r30, r0
     94e:	09 95       	icall
		this->PrintString(tabs);
		
		this->ChangeActiveLine(1);
		eeprom_read_block(tabs,PinBString,6);
		this->PrintString(tabs);
		RegisterDataToString(DDRB);
     950:	47 b3       	in	r20, 0x17	; 23
     952:	e5 2d       	mov	r30, r5
     954:	f4 2d       	mov	r31, r4
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     956:	83 2d       	mov	r24, r3
     958:	92 2d       	mov	r25, r2
		{
			if (registerData & (1<<i))
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	9a 01       	movw	r18, r20
     95e:	08 2e       	mov	r0, r24
     960:	02 c0       	rjmp	.+4      	; 0x966 <main+0x39c>
     962:	35 95       	asr	r19
     964:	27 95       	ror	r18
     966:	0a 94       	dec	r0
     968:	e2 f7       	brpl	.-8      	; 0x962 <main+0x398>
     96a:	20 ff       	sbrs	r18, 0
     96c:	02 c0       	rjmp	.+4      	; 0x972 <main+0x3a8>
			{
				tabs[i] = '1';
     96e:	a0 82       	st	Z, r10
     970:	01 c0       	rjmp	.+2      	; 0x974 <main+0x3aa>
			}
			else
			{
				tabs[i] = '0';
     972:	b0 82       	st	Z, r11
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	31 96       	adiw	r30, 0x01	; 1
     978:	88 30       	cpi	r24, 0x08	; 8
     97a:	91 05       	cpc	r25, r1
     97c:	79 f7       	brne	.-34     	; 0x95c <main+0x392>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     97e:	80 91 1e 02 	lds	r24, 0x021E
     982:	90 91 1f 02 	lds	r25, 0x021F
     986:	dc 01       	movw	r26, r24
     988:	ed 91       	ld	r30, X+
     98a:	fc 91       	ld	r31, X
     98c:	06 84       	ldd	r0, Z+14	; 0x0e
     98e:	f7 85       	ldd	r31, Z+15	; 0x0f
     990:	e0 2d       	mov	r30, r0
     992:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     994:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     996:	77 9b       	sbis	0x0e, 7	; 14
     998:	fe cf       	rjmp	.-4      	; 0x996 <main+0x3cc>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     99a:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     99c:	77 9b       	sbis	0x0e, 7	; 14
     99e:	fe cf       	rjmp	.-4      	; 0x99c <main+0x3d2>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     9a0:	e2 e1       	ldi	r30, 0x12	; 18
     9a2:	f2 e0       	ldi	r31, 0x02	; 2
     9a4:	10 81       	ld	r17, Z
     9a6:	11 23       	and	r17, r17
     9a8:	09 f4       	brne	.+2      	; 0x9ac <main+0x3e2>
     9aa:	42 c0       	rjmp	.+132    	; 0xa30 <main+0x466>
     9ac:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     9ae:	10 32       	cpi	r17, 0x20	; 32
     9b0:	21 f4       	brne	.+8      	; 0x9ba <main+0x3f0>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     9b2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     9b4:	77 9b       	sbis	0x0e, 7	; 14
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <main+0x3ea>
     9b8:	36 c0       	rjmp	.+108    	; 0xa26 <main+0x45c>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     9ba:	80 91 1e 02 	lds	r24, 0x021E
     9be:	90 91 1f 02 	lds	r25, 0x021F
     9c2:	dc 01       	movw	r26, r24
     9c4:	ed 91       	ld	r30, X+
     9c6:	fc 91       	ld	r31, X
     9c8:	06 84       	ldd	r0, Z+14	; 0x0e
     9ca:	f7 85       	ldd	r31, Z+15	; 0x0f
     9cc:	e0 2d       	mov	r30, r0
     9ce:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     9d0:	01 2f       	mov	r16, r17
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	c8 01       	movw	r24, r16
     9d6:	88 97       	sbiw	r24, 0x28	; 40
     9d8:	8c 01       	movw	r16, r24
     9da:	00 0f       	add	r16, r16
     9dc:	11 1f       	adc	r17, r17
     9de:	00 0f       	add	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	08 0f       	add	r16, r24
     9e4:	19 1f       	adc	r17, r25
     9e6:	f8 01       	movw	r30, r16
     9e8:	e8 5e       	subi	r30, 0xE8	; 232
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	4f 01       	movw	r8, r30
     9ee:	03 5e       	subi	r16, 0xE3	; 227
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	c4 01       	movw	r24, r8
     9f4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     9f8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     9fa:	77 9b       	sbis	0x0e, 7	; 14
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <main+0x430>
     9fe:	ff ef       	ldi	r31, 0xFF	; 255
     a00:	8f 1a       	sub	r8, r31
     a02:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     a04:	80 16       	cp	r8, r16
     a06:	91 06       	cpc	r9, r17
     a08:	a1 f7       	brne	.-24     	; 0x9f2 <main+0x428>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     a0a:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     a0c:	77 9b       	sbis	0x0e, 7	; 14
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <main+0x442>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     a10:	80 91 1e 02 	lds	r24, 0x021E
     a14:	90 91 1f 02 	lds	r25, 0x021F
     a18:	dc 01       	movw	r26, r24
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	00 88       	ldd	r0, Z+16	; 0x10
     a20:	f1 89       	ldd	r31, Z+17	; 0x11
     a22:	e0 2d       	mov	r30, r0
     a24:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     a26:	f7 01       	movw	r30, r14
     a28:	11 91       	ld	r17, Z+
     a2a:	7f 01       	movw	r14, r30
     a2c:	11 11       	cpse	r17, r1
     a2e:	bf cf       	rjmp	.-130    	; 0x9ae <main+0x3e4>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     a30:	80 91 1e 02 	lds	r24, 0x021E
     a34:	90 91 1f 02 	lds	r25, 0x021F
     a38:	dc 01       	movw	r26, r24
     a3a:	ed 91       	ld	r30, X+
     a3c:	fc 91       	ld	r31, X
     a3e:	00 88       	ldd	r0, Z+16	; 0x10
     a40:	f1 89       	ldd	r31, Z+17	; 0x11
     a42:	e0 2d       	mov	r30, r0
     a44:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
     a46:	80 91 1e 02 	lds	r24, 0x021E
     a4a:	90 91 1f 02 	lds	r25, 0x021F
     a4e:	dc 01       	movw	r26, r24
     a50:	ed 91       	ld	r30, X+
     a52:	fc 91       	ld	r31, X
     a54:	00 88       	ldd	r0, Z+16	; 0x10
     a56:	f1 89       	ldd	r31, Z+17	; 0x11
     a58:	e0 2d       	mov	r30, r0
     a5a:	09 95       	icall
		this->operator<<(SH1106_SETLOWCOLUMN);
     a5c:	80 91 3c 02 	lds	r24, 0x023C
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     a60:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     a62:	77 9b       	sbis	0x0e, 7	; 14
     a64:	fe cf       	rjmp	.-4      	; 0xa62 <main+0x498>
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     a66:	b2 eb       	ldi	r27, 0xB2	; 178
     a68:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1<< SPIF)));
     a6a:	77 9b       	sbis	0x0e, 7	; 14
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <main+0x4a0>
	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
     a6e:	80 91 3d 02 	lds	r24, 0x023D
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     a72:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     a74:	77 9b       	sbis	0x0e, 7	; 14
     a76:	fe cf       	rjmp	.-4      	; 0xa74 <main+0x4aa>
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
		_DataCommand->Set();
     a78:	80 91 1e 02 	lds	r24, 0x021E
     a7c:	90 91 1f 02 	lds	r25, 0x021F
     a80:	dc 01       	movw	r26, r24
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	06 84       	ldd	r0, Z+14	; 0x0e
     a88:	f7 85       	ldd	r31, Z+15	; 0x0f
     a8a:	e0 2d       	mov	r30, r0
     a8c:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     a8e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     a90:	77 9b       	sbis	0x0e, 7	; 14
     a92:	fe cf       	rjmp	.-4      	; 0xa90 <main+0x4c6>
		this->PrintString(tabs);
		RegisterDataToString(DDRB);
		this->PrintString(tabs);
		
		this->ChangeActiveLine(2);
		eeprom_read_block(tabs,PinCString,6);
     a94:	46 e0       	ldi	r20, 0x06	; 6
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	66 e0       	ldi	r22, 0x06	; 6
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	85 2d       	mov	r24, r5
     a9e:	94 2d       	mov	r25, r4
     aa0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <eeprom_read_block>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     aa4:	80 91 1e 02 	lds	r24, 0x021E
     aa8:	90 91 1f 02 	lds	r25, 0x021F
     aac:	dc 01       	movw	r26, r24
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	06 84       	ldd	r0, Z+14	; 0x0e
     ab4:	f7 85       	ldd	r31, Z+15	; 0x0f
     ab6:	e0 2d       	mov	r30, r0
     ab8:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     aba:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     abc:	77 9b       	sbis	0x0e, 7	; 14
     abe:	fe cf       	rjmp	.-4      	; 0xabc <main+0x4f2>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ac0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ac2:	77 9b       	sbis	0x0e, 7	; 14
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <main+0x4f8>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     ac6:	e2 e1       	ldi	r30, 0x12	; 18
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	10 81       	ld	r17, Z
     acc:	11 23       	and	r17, r17
     ace:	09 f4       	brne	.+2      	; 0xad2 <main+0x508>
     ad0:	42 c0       	rjmp	.+132    	; 0xb56 <main+0x58c>
     ad2:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     ad4:	10 32       	cpi	r17, 0x20	; 32
     ad6:	21 f4       	brne	.+8      	; 0xae0 <main+0x516>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ad8:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <main+0x510>
     ade:	36 c0       	rjmp	.+108    	; 0xb4c <main+0x582>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     ae0:	80 91 1e 02 	lds	r24, 0x021E
     ae4:	90 91 1f 02 	lds	r25, 0x021F
     ae8:	dc 01       	movw	r26, r24
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	06 84       	ldd	r0, Z+14	; 0x0e
     af0:	f7 85       	ldd	r31, Z+15	; 0x0f
     af2:	e0 2d       	mov	r30, r0
     af4:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     af6:	01 2f       	mov	r16, r17
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	c8 01       	movw	r24, r16
     afc:	88 97       	sbiw	r24, 0x28	; 40
     afe:	8c 01       	movw	r16, r24
     b00:	00 0f       	add	r16, r16
     b02:	11 1f       	adc	r17, r17
     b04:	00 0f       	add	r16, r16
     b06:	11 1f       	adc	r17, r17
     b08:	08 0f       	add	r16, r24
     b0a:	19 1f       	adc	r17, r25
     b0c:	f8 01       	movw	r30, r16
     b0e:	e8 5e       	subi	r30, 0xE8	; 232
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	4f 01       	movw	r8, r30
     b14:	03 5e       	subi	r16, 0xE3	; 227
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	c4 01       	movw	r24, r8
     b1a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     b1e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <main+0x556>
     b24:	ff ef       	ldi	r31, 0xFF	; 255
     b26:	8f 1a       	sub	r8, r31
     b28:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     b2a:	80 16       	cp	r8, r16
     b2c:	91 06       	cpc	r9, r17
     b2e:	a1 f7       	brne	.-24     	; 0xb18 <main+0x54e>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     b30:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     b32:	77 9b       	sbis	0x0e, 7	; 14
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <main+0x568>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     b36:	80 91 1e 02 	lds	r24, 0x021E
     b3a:	90 91 1f 02 	lds	r25, 0x021F
     b3e:	dc 01       	movw	r26, r24
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	00 88       	ldd	r0, Z+16	; 0x10
     b46:	f1 89       	ldd	r31, Z+17	; 0x11
     b48:	e0 2d       	mov	r30, r0
     b4a:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     b4c:	f7 01       	movw	r30, r14
     b4e:	11 91       	ld	r17, Z+
     b50:	7f 01       	movw	r14, r30
     b52:	11 11       	cpse	r17, r1
     b54:	bf cf       	rjmp	.-130    	; 0xad4 <main+0x50a>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     b56:	80 91 1e 02 	lds	r24, 0x021E
     b5a:	90 91 1f 02 	lds	r25, 0x021F
     b5e:	dc 01       	movw	r26, r24
     b60:	ed 91       	ld	r30, X+
     b62:	fc 91       	ld	r31, X
     b64:	00 88       	ldd	r0, Z+16	; 0x10
     b66:	f1 89       	ldd	r31, Z+17	; 0x11
     b68:	e0 2d       	mov	r30, r0
     b6a:	09 95       	icall
		this->PrintString(tabs);
		
		this->ChangeActiveLine(2);
		eeprom_read_block(tabs,PinCString,6);
		this->PrintString(tabs);
		RegisterDataToString(PINC);
     b6c:	43 b3       	in	r20, 0x13	; 19
     b6e:	e5 2d       	mov	r30, r5
     b70:	f4 2d       	mov	r31, r4
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     b72:	83 2d       	mov	r24, r3
     b74:	92 2d       	mov	r25, r2
		{
			if (registerData & (1<<i))
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	9a 01       	movw	r18, r20
     b7a:	08 2e       	mov	r0, r24
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <main+0x5b8>
     b7e:	35 95       	asr	r19
     b80:	27 95       	ror	r18
     b82:	0a 94       	dec	r0
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <main+0x5b4>
     b86:	20 ff       	sbrs	r18, 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <main+0x5c4>
			{
				tabs[i] = '1';
     b8a:	a0 82       	st	Z, r10
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <main+0x5c6>
			}
			else
			{
				tabs[i] = '0';
     b8e:	b0 82       	st	Z, r11
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	88 30       	cpi	r24, 0x08	; 8
     b96:	91 05       	cpc	r25, r1
     b98:	79 f7       	brne	.-34     	; 0xb78 <main+0x5ae>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     b9a:	80 91 1e 02 	lds	r24, 0x021E
     b9e:	90 91 1f 02 	lds	r25, 0x021F
     ba2:	dc 01       	movw	r26, r24
     ba4:	ed 91       	ld	r30, X+
     ba6:	fc 91       	ld	r31, X
     ba8:	06 84       	ldd	r0, Z+14	; 0x0e
     baa:	f7 85       	ldd	r31, Z+15	; 0x0f
     bac:	e0 2d       	mov	r30, r0
     bae:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     bb0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     bb2:	77 9b       	sbis	0x0e, 7	; 14
     bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <main+0x5e8>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     bb6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     bb8:	77 9b       	sbis	0x0e, 7	; 14
     bba:	fe cf       	rjmp	.-4      	; 0xbb8 <main+0x5ee>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     bbc:	e2 e1       	ldi	r30, 0x12	; 18
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	10 81       	ld	r17, Z
     bc2:	11 23       	and	r17, r17
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <main+0x5fe>
     bc6:	42 c0       	rjmp	.+132    	; 0xc4c <main+0x682>
     bc8:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     bca:	10 32       	cpi	r17, 0x20	; 32
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <main+0x60c>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     bce:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     bd0:	77 9b       	sbis	0x0e, 7	; 14
     bd2:	fe cf       	rjmp	.-4      	; 0xbd0 <main+0x606>
     bd4:	36 c0       	rjmp	.+108    	; 0xc42 <main+0x678>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     bd6:	80 91 1e 02 	lds	r24, 0x021E
     bda:	90 91 1f 02 	lds	r25, 0x021F
     bde:	dc 01       	movw	r26, r24
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	06 84       	ldd	r0, Z+14	; 0x0e
     be6:	f7 85       	ldd	r31, Z+15	; 0x0f
     be8:	e0 2d       	mov	r30, r0
     bea:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     bec:	01 2f       	mov	r16, r17
     bee:	10 e0       	ldi	r17, 0x00	; 0
     bf0:	c8 01       	movw	r24, r16
     bf2:	88 97       	sbiw	r24, 0x28	; 40
     bf4:	8c 01       	movw	r16, r24
     bf6:	00 0f       	add	r16, r16
     bf8:	11 1f       	adc	r17, r17
     bfa:	00 0f       	add	r16, r16
     bfc:	11 1f       	adc	r17, r17
     bfe:	08 0f       	add	r16, r24
     c00:	19 1f       	adc	r17, r25
     c02:	f8 01       	movw	r30, r16
     c04:	e8 5e       	subi	r30, 0xE8	; 232
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	4f 01       	movw	r8, r30
     c0a:	03 5e       	subi	r16, 0xE3	; 227
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	c4 01       	movw	r24, r8
     c10:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     c14:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     c16:	77 9b       	sbis	0x0e, 7	; 14
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <main+0x64c>
     c1a:	ff ef       	ldi	r31, 0xFF	; 255
     c1c:	8f 1a       	sub	r8, r31
     c1e:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     c20:	80 16       	cp	r8, r16
     c22:	91 06       	cpc	r9, r17
     c24:	a1 f7       	brne	.-24     	; 0xc0e <main+0x644>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     c26:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     c28:	77 9b       	sbis	0x0e, 7	; 14
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <main+0x65e>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     c2c:	80 91 1e 02 	lds	r24, 0x021E
     c30:	90 91 1f 02 	lds	r25, 0x021F
     c34:	dc 01       	movw	r26, r24
     c36:	ed 91       	ld	r30, X+
     c38:	fc 91       	ld	r31, X
     c3a:	00 88       	ldd	r0, Z+16	; 0x10
     c3c:	f1 89       	ldd	r31, Z+17	; 0x11
     c3e:	e0 2d       	mov	r30, r0
     c40:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     c42:	f7 01       	movw	r30, r14
     c44:	11 91       	ld	r17, Z+
     c46:	7f 01       	movw	r14, r30
     c48:	11 11       	cpse	r17, r1
     c4a:	bf cf       	rjmp	.-130    	; 0xbca <main+0x600>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     c4c:	80 91 1e 02 	lds	r24, 0x021E
     c50:	90 91 1f 02 	lds	r25, 0x021F
     c54:	dc 01       	movw	r26, r24
     c56:	ed 91       	ld	r30, X+
     c58:	fc 91       	ld	r31, X
     c5a:	00 88       	ldd	r0, Z+16	; 0x10
     c5c:	f1 89       	ldd	r31, Z+17	; 0x11
     c5e:	e0 2d       	mov	r30, r0
     c60:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
     c62:	80 91 1e 02 	lds	r24, 0x021E
     c66:	90 91 1f 02 	lds	r25, 0x021F
     c6a:	dc 01       	movw	r26, r24
     c6c:	ed 91       	ld	r30, X+
     c6e:	fc 91       	ld	r31, X
     c70:	00 88       	ldd	r0, Z+16	; 0x10
     c72:	f1 89       	ldd	r31, Z+17	; 0x11
     c74:	e0 2d       	mov	r30, r0
     c76:	09 95       	icall
		this->operator<<(SH1106_SETLOWCOLUMN);
     c78:	80 91 3c 02 	lds	r24, 0x023C
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     c7c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     c7e:	77 9b       	sbis	0x0e, 7	; 14
     c80:	fe cf       	rjmp	.-4      	; 0xc7e <main+0x6b4>
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     c82:	b3 eb       	ldi	r27, 0xB3	; 179
     c84:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1<< SPIF)));
     c86:	77 9b       	sbis	0x0e, 7	; 14
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <main+0x6bc>
	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
     c8a:	80 91 3d 02 	lds	r24, 0x023D
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     c8e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     c90:	77 9b       	sbis	0x0e, 7	; 14
     c92:	fe cf       	rjmp	.-4      	; 0xc90 <main+0x6c6>
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
		_DataCommand->Set();
     c94:	80 91 1e 02 	lds	r24, 0x021E
     c98:	90 91 1f 02 	lds	r25, 0x021F
     c9c:	dc 01       	movw	r26, r24
     c9e:	ed 91       	ld	r30, X+
     ca0:	fc 91       	ld	r31, X
     ca2:	06 84       	ldd	r0, Z+14	; 0x0e
     ca4:	f7 85       	ldd	r31, Z+15	; 0x0f
     ca6:	e0 2d       	mov	r30, r0
     ca8:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     caa:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     cac:	77 9b       	sbis	0x0e, 7	; 14
     cae:	fe cf       	rjmp	.-4      	; 0xcac <main+0x6e2>
		this->PrintString(tabs);
		RegisterDataToString(PINC);
		this->PrintString(tabs);

		this->ChangeActiveLine(3);
		eeprom_read_block(tabs,PinDString,6);
     cb0:	46 e0       	ldi	r20, 0x06	; 6
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	85 2d       	mov	r24, r5
     cba:	94 2d       	mov	r25, r4
     cbc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <eeprom_read_block>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     cc0:	80 91 1e 02 	lds	r24, 0x021E
     cc4:	90 91 1f 02 	lds	r25, 0x021F
     cc8:	dc 01       	movw	r26, r24
     cca:	ed 91       	ld	r30, X+
     ccc:	fc 91       	ld	r31, X
     cce:	06 84       	ldd	r0, Z+14	; 0x0e
     cd0:	f7 85       	ldd	r31, Z+15	; 0x0f
     cd2:	e0 2d       	mov	r30, r0
     cd4:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     cd6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     cd8:	77 9b       	sbis	0x0e, 7	; 14
     cda:	fe cf       	rjmp	.-4      	; 0xcd8 <main+0x70e>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     cdc:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     cde:	77 9b       	sbis	0x0e, 7	; 14
     ce0:	fe cf       	rjmp	.-4      	; 0xcde <main+0x714>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     ce2:	e2 e1       	ldi	r30, 0x12	; 18
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	10 81       	ld	r17, Z
     ce8:	11 23       	and	r17, r17
     cea:	09 f4       	brne	.+2      	; 0xcee <main+0x724>
     cec:	42 c0       	rjmp	.+132    	; 0xd72 <main+0x7a8>
     cee:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
     cf0:	10 32       	cpi	r17, 0x20	; 32
     cf2:	21 f4       	brne	.+8      	; 0xcfc <main+0x732>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     cf4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     cf6:	77 9b       	sbis	0x0e, 7	; 14
     cf8:	fe cf       	rjmp	.-4      	; 0xcf6 <main+0x72c>
     cfa:	36 c0       	rjmp	.+108    	; 0xd68 <main+0x79e>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     cfc:	80 91 1e 02 	lds	r24, 0x021E
     d00:	90 91 1f 02 	lds	r25, 0x021F
     d04:	dc 01       	movw	r26, r24
     d06:	ed 91       	ld	r30, X+
     d08:	fc 91       	ld	r31, X
     d0a:	06 84       	ldd	r0, Z+14	; 0x0e
     d0c:	f7 85       	ldd	r31, Z+15	; 0x0f
     d0e:	e0 2d       	mov	r30, r0
     d10:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     d12:	01 2f       	mov	r16, r17
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	c8 01       	movw	r24, r16
     d18:	88 97       	sbiw	r24, 0x28	; 40
     d1a:	8c 01       	movw	r16, r24
     d1c:	00 0f       	add	r16, r16
     d1e:	11 1f       	adc	r17, r17
     d20:	00 0f       	add	r16, r16
     d22:	11 1f       	adc	r17, r17
     d24:	08 0f       	add	r16, r24
     d26:	19 1f       	adc	r17, r25
     d28:	f8 01       	movw	r30, r16
     d2a:	e8 5e       	subi	r30, 0xE8	; 232
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	4f 01       	movw	r8, r30
     d30:	03 5e       	subi	r16, 0xE3	; 227
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	c4 01       	movw	r24, r8
     d36:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     d3a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     d3c:	77 9b       	sbis	0x0e, 7	; 14
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <main+0x772>
     d40:	ff ef       	ldi	r31, 0xFF	; 255
     d42:	8f 1a       	sub	r8, r31
     d44:	9f 0a       	sbc	r9, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     d46:	80 16       	cp	r8, r16
     d48:	91 06       	cpc	r9, r17
     d4a:	a1 f7       	brne	.-24     	; 0xd34 <main+0x76a>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     d4c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     d4e:	77 9b       	sbis	0x0e, 7	; 14
     d50:	fe cf       	rjmp	.-4      	; 0xd4e <main+0x784>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     d52:	80 91 1e 02 	lds	r24, 0x021E
     d56:	90 91 1f 02 	lds	r25, 0x021F
     d5a:	dc 01       	movw	r26, r24
     d5c:	ed 91       	ld	r30, X+
     d5e:	fc 91       	ld	r31, X
     d60:	00 88       	ldd	r0, Z+16	; 0x10
     d62:	f1 89       	ldd	r31, Z+17	; 0x11
     d64:	e0 2d       	mov	r30, r0
     d66:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     d68:	f7 01       	movw	r30, r14
     d6a:	11 91       	ld	r17, Z+
     d6c:	7f 01       	movw	r14, r30
     d6e:	11 11       	cpse	r17, r1
     d70:	bf cf       	rjmp	.-130    	; 0xcf0 <main+0x726>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     d72:	80 91 1e 02 	lds	r24, 0x021E
     d76:	90 91 1f 02 	lds	r25, 0x021F
     d7a:	dc 01       	movw	r26, r24
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	00 88       	ldd	r0, Z+16	; 0x10
     d82:	f1 89       	ldd	r31, Z+17	; 0x11
     d84:	e0 2d       	mov	r30, r0
     d86:	09 95       	icall
		this->PrintString(tabs);

		this->ChangeActiveLine(3);
		eeprom_read_block(tabs,PinDString,6);
		this->PrintString(tabs);
		RegisterDataToString(PIND);
     d88:	40 b3       	in	r20, 0x10	; 16
     d8a:	e5 2d       	mov	r30, r5
     d8c:	f4 2d       	mov	r31, r4
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     d8e:	83 2d       	mov	r24, r3
     d90:	92 2d       	mov	r25, r2
		{
			if (registerData & (1<<i))
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	9a 01       	movw	r18, r20
     d96:	08 2e       	mov	r0, r24
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <main+0x7d4>
     d9a:	35 95       	asr	r19
     d9c:	27 95       	ror	r18
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <main+0x7d0>
     da2:	20 ff       	sbrs	r18, 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <main+0x7e0>
			{
				tabs[i] = '1';
     da6:	a0 82       	st	Z, r10
     da8:	01 c0       	rjmp	.+2      	; 0xdac <main+0x7e2>
			}
			else
			{
				tabs[i] = '0';
     daa:	b0 82       	st	Z, r11
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	91 05       	cpc	r25, r1
     db4:	79 f7       	brne	.-34     	; 0xd94 <main+0x7ca>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     db6:	80 91 1e 02 	lds	r24, 0x021E
     dba:	90 91 1f 02 	lds	r25, 0x021F
     dbe:	dc 01       	movw	r26, r24
     dc0:	ed 91       	ld	r30, X+
     dc2:	fc 91       	ld	r31, X
     dc4:	06 84       	ldd	r0, Z+14	; 0x0e
     dc6:	f7 85       	ldd	r31, Z+15	; 0x0f
     dc8:	e0 2d       	mov	r30, r0
     dca:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     dcc:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     dce:	77 9b       	sbis	0x0e, 7	; 14
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <main+0x804>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     dd2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     dd4:	77 9b       	sbis	0x0e, 7	; 14
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <main+0x80a>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     dd8:	e2 e1       	ldi	r30, 0x12	; 18
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	10 81       	ld	r17, Z
     dde:	11 23       	and	r17, r17
     de0:	09 f4       	brne	.+2      	; 0xde4 <main+0x81a>
     de2:	41 c0       	rjmp	.+130    	; 0xe66 <main+0x89c>
     de4:	43 01       	movw	r8, r6
		{
			if (*(string) ==  ' ')
     de6:	10 32       	cpi	r17, 0x20	; 32
     de8:	21 f4       	brne	.+8      	; 0xdf2 <main+0x828>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     dea:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     dec:	77 9b       	sbis	0x0e, 7	; 14
     dee:	fe cf       	rjmp	.-4      	; 0xdec <main+0x822>
     df0:	35 c0       	rjmp	.+106    	; 0xe5c <main+0x892>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     df2:	80 91 1e 02 	lds	r24, 0x021E
     df6:	90 91 1f 02 	lds	r25, 0x021F
     dfa:	dc 01       	movw	r26, r24
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	06 84       	ldd	r0, Z+14	; 0x0e
     e02:	f7 85       	ldd	r31, Z+15	; 0x0f
     e04:	e0 2d       	mov	r30, r0
     e06:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     e08:	81 2f       	mov	r24, r17
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	88 97       	sbiw	r24, 0x28	; 40
     e0e:	7c 01       	movw	r14, r24
     e10:	ee 0c       	add	r14, r14
     e12:	ff 1c       	adc	r15, r15
     e14:	ee 0c       	add	r14, r14
     e16:	ff 1c       	adc	r15, r15
     e18:	8e 0d       	add	r24, r14
     e1a:	9f 1d       	adc	r25, r15
     e1c:	8c 01       	movw	r16, r24
     e1e:	08 5e       	subi	r16, 0xE8	; 232
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	fc 01       	movw	r30, r24
     e24:	e3 5e       	subi	r30, 0xE3	; 227
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	7f 01       	movw	r14, r30
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     e30:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     e32:	77 9b       	sbis	0x0e, 7	; 14
     e34:	fe cf       	rjmp	.-4      	; 0xe32 <main+0x868>
     e36:	0f 5f       	subi	r16, 0xFF	; 255
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     e3a:	0e 15       	cp	r16, r14
     e3c:	1f 05       	cpc	r17, r15
     e3e:	a9 f7       	brne	.-22     	; 0xe2a <main+0x860>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     e40:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     e42:	77 9b       	sbis	0x0e, 7	; 14
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <main+0x878>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     e46:	80 91 1e 02 	lds	r24, 0x021E
     e4a:	90 91 1f 02 	lds	r25, 0x021F
     e4e:	dc 01       	movw	r26, r24
     e50:	ed 91       	ld	r30, X+
     e52:	fc 91       	ld	r31, X
     e54:	00 88       	ldd	r0, Z+16	; 0x10
     e56:	f1 89       	ldd	r31, Z+17	; 0x11
     e58:	e0 2d       	mov	r30, r0
     e5a:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     e5c:	f4 01       	movw	r30, r8
     e5e:	11 91       	ld	r17, Z+
     e60:	4f 01       	movw	r8, r30
     e62:	11 11       	cpse	r17, r1
     e64:	c0 cf       	rjmp	.-128    	; 0xde6 <main+0x81c>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     e66:	80 91 1e 02 	lds	r24, 0x021E
     e6a:	90 91 1f 02 	lds	r25, 0x021F
     e6e:	dc 01       	movw	r26, r24
     e70:	ed 91       	ld	r30, X+
     e72:	fc 91       	ld	r31, X
     e74:	00 88       	ldd	r0, Z+16	; 0x10
     e76:	f1 89       	ldd	r31, Z+17	; 0x11
     e78:	e0 2d       	mov	r30, r0
     e7a:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
     e7c:	80 91 1e 02 	lds	r24, 0x021E
     e80:	90 91 1f 02 	lds	r25, 0x021F
     e84:	dc 01       	movw	r26, r24
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	00 88       	ldd	r0, Z+16	; 0x10
     e8c:	f1 89       	ldd	r31, Z+17	; 0x11
     e8e:	e0 2d       	mov	r30, r0
     e90:	09 95       	icall
		this->operator<<(SH1106_SETLOWCOLUMN);
     e92:	80 91 3c 02 	lds	r24, 0x023C
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     e96:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     e98:	77 9b       	sbis	0x0e, 7	; 14
     e9a:	fe cf       	rjmp	.-4      	; 0xe98 <main+0x8ce>
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     e9c:	b6 eb       	ldi	r27, 0xB6	; 182
     e9e:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1<< SPIF)));
     ea0:	77 9b       	sbis	0x0e, 7	; 14
     ea2:	fe cf       	rjmp	.-4      	; 0xea0 <main+0x8d6>
	void ChangeActiveLine(uint8_t line)
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
     ea4:	80 91 3d 02 	lds	r24, 0x023D
		PrintString(texts);
	}

	void operator << (uint8_t data)
	{
		SPDR = data;
     ea8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     eaa:	77 9b       	sbis	0x0e, 7	; 14
     eac:	fe cf       	rjmp	.-4      	; 0xeaa <main+0x8e0>
	{
		_DataCommand->Clear();
		this->operator<<(SH1106_SETLOWCOLUMN);
		this->operator<<(0xb0 + line);
		this->operator<<(SH1106_SETHIGHCOLUMN);
		_DataCommand->Set();
     eae:	80 91 1e 02 	lds	r24, 0x021E
     eb2:	90 91 1f 02 	lds	r25, 0x021F
     eb6:	dc 01       	movw	r26, r24
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	06 84       	ldd	r0, Z+14	; 0x0e
     ebe:	f7 85       	ldd	r31, Z+15	; 0x0f
     ec0:	e0 2d       	mov	r30, r0
     ec2:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ec4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ec6:	77 9b       	sbis	0x0e, 7	; 14
     ec8:	fe cf       	rjmp	.-4      	; 0xec6 <main+0x8fc>
		this->PrintString(tabs);
		RegisterDataToString(PIND);
		this->PrintString(tabs);

				this->ChangeActiveLine(6);
				eeprom_read_block(tabs,PinDString,6);
     eca:	46 e0       	ldi	r20, 0x06	; 6
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	85 2d       	mov	r24, r5
     ed4:	94 2d       	mov	r25, r4
     ed6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <eeprom_read_block>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     eda:	80 91 1e 02 	lds	r24, 0x021E
     ede:	90 91 1f 02 	lds	r25, 0x021F
     ee2:	dc 01       	movw	r26, r24
     ee4:	ed 91       	ld	r30, X+
     ee6:	fc 91       	ld	r31, X
     ee8:	06 84       	ldd	r0, Z+14	; 0x0e
     eea:	f7 85       	ldd	r31, Z+15	; 0x0f
     eec:	e0 2d       	mov	r30, r0
     eee:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ef0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ef2:	77 9b       	sbis	0x0e, 7	; 14
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <main+0x928>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ef6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ef8:	77 9b       	sbis	0x0e, 7	; 14
     efa:	fe cf       	rjmp	.-4      	; 0xef8 <main+0x92e>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     efc:	e2 e1       	ldi	r30, 0x12	; 18
     efe:	f2 e0       	ldi	r31, 0x02	; 2
     f00:	10 81       	ld	r17, Z
     f02:	11 23       	and	r17, r17
     f04:	09 f4       	brne	.+2      	; 0xf08 <main+0x93e>
     f06:	41 c0       	rjmp	.+130    	; 0xf8a <main+0x9c0>
     f08:	43 01       	movw	r8, r6
		{
			if (*(string) ==  ' ')
     f0a:	10 32       	cpi	r17, 0x20	; 32
     f0c:	21 f4       	brne	.+8      	; 0xf16 <main+0x94c>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     f0e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     f10:	77 9b       	sbis	0x0e, 7	; 14
     f12:	fe cf       	rjmp	.-4      	; 0xf10 <main+0x946>
     f14:	35 c0       	rjmp	.+106    	; 0xf80 <main+0x9b6>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
     f16:	80 91 1e 02 	lds	r24, 0x021E
     f1a:	90 91 1f 02 	lds	r25, 0x021F
     f1e:	dc 01       	movw	r26, r24
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	06 84       	ldd	r0, Z+14	; 0x0e
     f26:	f7 85       	ldd	r31, Z+15	; 0x0f
     f28:	e0 2d       	mov	r30, r0
     f2a:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
     f2c:	81 2f       	mov	r24, r17
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 97       	sbiw	r24, 0x28	; 40
     f32:	7c 01       	movw	r14, r24
     f34:	ee 0c       	add	r14, r14
     f36:	ff 1c       	adc	r15, r15
     f38:	ee 0c       	add	r14, r14
     f3a:	ff 1c       	adc	r15, r15
     f3c:	8e 0d       	add	r24, r14
     f3e:	9f 1d       	adc	r25, r15
     f40:	8c 01       	movw	r16, r24
     f42:	08 5e       	subi	r16, 0xE8	; 232
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	fc 01       	movw	r30, r24
     f48:	e3 5e       	subi	r30, 0xE3	; 227
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	7f 01       	movw	r14, r30
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     f54:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     f56:	77 9b       	sbis	0x0e, 7	; 14
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <main+0x98c>
     f5a:	0f 5f       	subi	r16, 0xFF	; 255
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
     f5e:	0e 15       	cp	r16, r14
     f60:	1f 05       	cpc	r17, r15
     f62:	a9 f7       	brne	.-22     	; 0xf4e <main+0x984>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     f64:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     f66:	77 9b       	sbis	0x0e, 7	; 14
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <main+0x99c>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
     f6a:	80 91 1e 02 	lds	r24, 0x021E
     f6e:	90 91 1f 02 	lds	r25, 0x021F
     f72:	dc 01       	movw	r26, r24
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	00 88       	ldd	r0, Z+16	; 0x10
     f7a:	f1 89       	ldd	r31, Z+17	; 0x11
     f7c:	e0 2d       	mov	r30, r0
     f7e:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     f80:	f4 01       	movw	r30, r8
     f82:	11 91       	ld	r17, Z+
     f84:	4f 01       	movw	r8, r30
     f86:	11 11       	cpse	r17, r1
     f88:	c0 cf       	rjmp	.-128    	; 0xf0a <main+0x940>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
     f8a:	80 91 1e 02 	lds	r24, 0x021E
     f8e:	90 91 1f 02 	lds	r25, 0x021F
     f92:	dc 01       	movw	r26, r24
     f94:	ed 91       	ld	r30, X+
     f96:	fc 91       	ld	r31, X
     f98:	00 88       	ldd	r0, Z+16	; 0x10
     f9a:	f1 89       	ldd	r31, Z+17	; 0x11
     f9c:	e0 2d       	mov	r30, r0
     f9e:	09 95       	icall
		this->PrintString(tabs);

				this->ChangeActiveLine(6);
				eeprom_read_block(tabs,PinDString,6);
				this->PrintString(tabs);
				RegisterDataToString(valuea);
     fa0:	40 91 1c 02 	lds	r20, 0x021C
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     fa4:	83 2d       	mov	r24, r3
     fa6:	92 2d       	mov	r25, r2
		{
			if (registerData & (1<<i))
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	9a 01       	movw	r18, r20
     fac:	08 2e       	mov	r0, r24
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <main+0x9ea>
     fb0:	35 95       	asr	r19
     fb2:	27 95       	ror	r18
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <main+0x9e6>
     fb8:	20 ff       	sbrs	r18, 0
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <main+0x9f8>
			{
				tabs[i] = '1';
     fbc:	f6 01       	movw	r30, r12
     fbe:	a0 82       	st	Z, r10
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <main+0x9fc>
			}
			else
			{
				tabs[i] = '0';
     fc2:	d6 01       	movw	r26, r12
     fc4:	bc 92       	st	X, r11
public:
char tabs[10];
uint8_t valuea;
	void RegisterDataToString(uint8_t registerData)
	{
		for (int i = 0; i < 8; i++)
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	bf ef       	ldi	r27, 0xFF	; 255
     fca:	cb 1a       	sub	r12, r27
     fcc:	db 0a       	sbc	r13, r27
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	91 05       	cpc	r25, r1
     fd2:	59 f7       	brne	.-42     	; 0xfaa <main+0x9e0>
		_DataCommand->Clear();
	}

	void PrintString(char string[])
	{
		_DataCommand->Set();
     fd4:	80 91 1e 02 	lds	r24, 0x021E
     fd8:	90 91 1f 02 	lds	r25, 0x021F
     fdc:	dc 01       	movw	r26, r24
     fde:	ed 91       	ld	r30, X+
     fe0:	fc 91       	ld	r31, X
     fe2:	06 84       	ldd	r0, Z+14	; 0x0e
     fe4:	f7 85       	ldd	r31, Z+15	; 0x0f
     fe6:	e0 2d       	mov	r30, r0
     fe8:	09 95       	icall
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     fea:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     fec:	77 9b       	sbis	0x0e, 7	; 14
     fee:	fe cf       	rjmp	.-4      	; 0xfec <main+0xa22>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
     ff0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
     ff2:	77 9b       	sbis	0x0e, 7	; 14
     ff4:	fe cf       	rjmp	.-4      	; 0xff2 <main+0xa28>
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
     ff6:	e2 e1       	ldi	r30, 0x12	; 18
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	10 81       	ld	r17, Z
     ffc:	11 23       	and	r17, r17
     ffe:	09 f4       	brne	.+2      	; 0x1002 <main+0xa38>
    1000:	42 c0       	rjmp	.+132    	; 0x1086 <main+0xabc>
    1002:	73 01       	movw	r14, r6
		{
			if (*(string) ==  ' ')
    1004:	10 32       	cpi	r17, 0x20	; 32
    1006:	21 f4       	brne	.+8      	; 0x1010 <main+0xa46>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    1008:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
    100a:	77 9b       	sbis	0x0e, 7	; 14
    100c:	fe cf       	rjmp	.-4      	; 0x100a <main+0xa40>
    100e:	36 c0       	rjmp	.+108    	; 0x107c <main+0xab2>
		SPI_Send(0);
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
    1010:	80 91 1e 02 	lds	r24, 0x021E
    1014:	90 91 1f 02 	lds	r25, 0x021F
    1018:	dc 01       	movw	r26, r24
    101a:	ed 91       	ld	r30, X+
    101c:	fc 91       	ld	r31, X
    101e:	06 84       	ldd	r0, Z+14	; 0x0e
    1020:	f7 85       	ldd	r31, Z+15	; 0x0f
    1022:	e0 2d       	mov	r30, r0
    1024:	09 95       	icall
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
    1026:	01 2f       	mov	r16, r17
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	c8 01       	movw	r24, r16
    102c:	88 97       	sbiw	r24, 0x28	; 40
    102e:	8c 01       	movw	r16, r24
    1030:	00 0f       	add	r16, r16
    1032:	11 1f       	adc	r17, r17
    1034:	00 0f       	add	r16, r16
    1036:	11 1f       	adc	r17, r17
    1038:	08 0f       	add	r16, r24
    103a:	19 1f       	adc	r17, r25
    103c:	f8 01       	movw	r30, r16
    103e:	e8 5e       	subi	r30, 0xE8	; 232
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	6f 01       	movw	r12, r30
    1044:	03 5e       	subi	r16, 0xE3	; 227
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	c6 01       	movw	r24, r12
    104a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <eeprom_read_byte>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    104e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
    1050:	77 9b       	sbis	0x0e, 7	; 14
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <main+0xa86>
    1054:	ff ef       	ldi	r31, 0xFF	; 255
    1056:	cf 1a       	sub	r12, r31
    1058:	df 0a       	sbc	r13, r31
	}
	
	void PrintChar(char toPrint)
	{
		_DataCommand->Set();
		for (int i = 0;i<5;i++)
    105a:	c0 16       	cp	r12, r16
    105c:	d1 06       	cpc	r13, r17
    105e:	a1 f7       	brne	.-24     	; 0x1048 <main+0xa7e>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    1060:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
    1062:	77 9b       	sbis	0x0e, 7	; 14
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <main+0xa98>
		for (int i = 0;i<5;i++)
		{
			SPI_Send(eeprom_read_byte((unsigned char *)&font5x7[i+(toPrint-'(')*5]));
		}
		SPI_Send(0x00);
		_DataCommand->Clear();
    1066:	80 91 1e 02 	lds	r24, 0x021E
    106a:	90 91 1f 02 	lds	r25, 0x021F
    106e:	dc 01       	movw	r26, r24
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	00 88       	ldd	r0, Z+16	; 0x10
    1076:	f1 89       	ldd	r31, Z+17	; 0x11
    1078:	e0 2d       	mov	r30, r0
    107a:	09 95       	icall
	void PrintString(char string[])
	{
		_DataCommand->Set();
		SPI_Send(0x00);
		SPI_Send(0x00);
		while (*(string) !=0)
    107c:	f7 01       	movw	r30, r14
    107e:	11 91       	ld	r17, Z+
    1080:	7f 01       	movw	r14, r30
    1082:	11 11       	cpse	r17, r1
    1084:	bf cf       	rjmp	.-130    	; 0x1004 <main+0xa3a>
			}
			else
			PrintChar(*(string));
			string++;
		}
		_DataCommand->Clear();
    1086:	80 91 1e 02 	lds	r24, 0x021E
    108a:	90 91 1f 02 	lds	r25, 0x021F
    108e:	dc 01       	movw	r26, r24
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	00 88       	ldd	r0, Z+16	; 0x10
    1096:	f1 89       	ldd	r31, Z+17	; 0x11
    1098:	e0 2d       	mov	r30, r0
    109a:	09 95       	icall
		_Clk = &Clk;
	}

	void TryClear()
	{
		if (_NeedToClear)
    109c:	80 91 1d 02 	lds	r24, 0x021D
    10a0:	88 23       	and	r24, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <main+0xadc>
    10a4:	af ca       	rjmp	.-2722   	; 0x604 <main+0x3a>
    10a6:	10 eb       	ldi	r17, 0xB0	; 176
		{
			_DataCommand->Clear();
			SPI_Send(SH1106_SETLOWCOLUMN);
			SPI_Send(0xb0 + i);
			SPI_Send(SH1106_SETHIGHCOLUMN);
			_DataCommand->Set();
    10a8:	00 e0       	ldi	r16, 0x00	; 0

	void ClearScreen()
	{
		for (char i = 0; i<8; i++)
		{
			_DataCommand->Clear();
    10aa:	80 91 1e 02 	lds	r24, 0x021E
    10ae:	90 91 1f 02 	lds	r25, 0x021F
    10b2:	dc 01       	movw	r26, r24
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	00 88       	ldd	r0, Z+16	; 0x10
    10ba:	f1 89       	ldd	r31, Z+17	; 0x11
    10bc:	e0 2d       	mov	r30, r0
    10be:	09 95       	icall
			SPI_Send(SH1106_SETLOWCOLUMN);
    10c0:	80 91 3c 02 	lds	r24, 0x023C
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    10c4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
    10c6:	77 9b       	sbis	0x0e, 7	; 14
    10c8:	fe cf       	rjmp	.-4      	; 0x10c6 <main+0xafc>
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    10ca:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<< SPIF)));
    10cc:	77 9b       	sbis	0x0e, 7	; 14
    10ce:	fe cf       	rjmp	.-4      	; 0x10cc <main+0xb02>
		for (char i = 0; i<8; i++)
		{
			_DataCommand->Clear();
			SPI_Send(SH1106_SETLOWCOLUMN);
			SPI_Send(0xb0 + i);
			SPI_Send(SH1106_SETHIGHCOLUMN);
    10d0:	80 91 3d 02 	lds	r24, 0x023D
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    10d4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <main+0xb0c>
		{
			_DataCommand->Clear();
			SPI_Send(SH1106_SETLOWCOLUMN);
			SPI_Send(0xb0 + i);
			SPI_Send(SH1106_SETHIGHCOLUMN);
			_DataCommand->Set();
    10da:	80 91 1e 02 	lds	r24, 0x021E
    10de:	90 91 1f 02 	lds	r25, 0x021F
    10e2:	dc 01       	movw	r26, r24
    10e4:	ed 91       	ld	r30, X+
    10e6:	fc 91       	ld	r31, X
    10e8:	06 84       	ldd	r0, Z+14	; 0x0e
    10ea:	f7 85       	ldd	r31, Z+15	; 0x0f
    10ec:	e0 2d       	mov	r30, r0
    10ee:	09 95       	icall
    10f0:	80 2f       	mov	r24, r16
		while(!(SPSR & (1<< SPIF)));
	}

	void SPI_Send(uint8_t data)
	{
		SPDR = data;
    10f2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<< SPIF)));
    10f4:	77 9b       	sbis	0x0e, 7	; 14
    10f6:	fe cf       	rjmp	.-4      	; 0x10f4 <main+0xb2a>
			_DataCommand->Clear();
			SPI_Send(SH1106_SETLOWCOLUMN);
			SPI_Send(0xb0 + i);
			SPI_Send(SH1106_SETHIGHCOLUMN);
			_DataCommand->Set();
			for (char j = 0; j < 128;j++)
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	80 38       	cpi	r24, 0x80	; 128
    10fc:	d1 f7       	brne	.-12     	; 0x10f2 <main+0xb28>
			{
				SPI_Send(0x00);
			}
			_DataCommand->Clear();
    10fe:	80 91 1e 02 	lds	r24, 0x021E
    1102:	90 91 1f 02 	lds	r25, 0x021F
    1106:	dc 01       	movw	r26, r24
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	00 88       	ldd	r0, Z+16	; 0x10
    110e:	f1 89       	ldd	r31, Z+17	; 0x11
    1110:	e0 2d       	mov	r30, r0
    1112:	09 95       	icall
    1114:	1f 5f       	subi	r17, 0xFF	; 255
		_DataCommand->Clear();
	}

	void ClearScreen()
	{
		for (char i = 0; i<8; i++)
    1116:	18 3b       	cpi	r17, 0xB8	; 184
    1118:	41 f6       	brne	.-112    	; 0x10aa <main+0xae0>
	void TryClear()
	{
		if (_NeedToClear)
		{
			ClearScreen();
			_NeedToClear = false;
    111a:	10 92 1d 02 	sts	0x021D, r1
    111e:	72 ca       	rjmp	.-2844   	; 0x604 <main+0x3a>

00001120 <_GLOBAL__sub_I__Znwj>:
	while("forever")
	{
		debugDisplay.PrintDebugMessage();
		debugDisplay.TryClear();
	}
}
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
	Task* tasks[NumberOfTasks];
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
    1128:	10 92 73 02 	sts	0x0273, r1
    112c:	e3 e6       	ldi	r30, 0x63	; 99
    112e:	f2 e0       	ldi	r31, 0x02	; 2
    1130:	83 e7       	ldi	r24, 0x73	; 115
    1132:	92 e0       	ldi	r25, 0x02	; 2
	for (size_t i = 0; i < NumberOfTasks; i++)
	{
		tasks[i] = nullptr;
    1134:	11 92       	st	Z+, r1
    1136:	11 92       	st	Z+, r1
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
	for (size_t i = 0; i < NumberOfTasks; i++)
    1138:	e8 17       	cp	r30, r24
    113a:	f9 07       	cpc	r31, r25
    113c:	d9 f7       	brne	.-10     	; 0x1134 <_GLOBAL__sub_I__Znwj+0x14>

class Task;

typedef void(*Func)(Task*);

class Task
    113e:	10 92 5f 02 	sts	0x025F, r1
    1142:	10 92 5e 02 	sts	0x025E, r1
    1146:	10 92 5b 02 	sts	0x025B, r1
    114a:	10 92 5a 02 	sts	0x025A, r1
    114e:	10 92 57 02 	sts	0x0257, r1
    1152:	10 92 56 02 	sts	0x0256, r1
	const uint8_t SH1106_LEFT_HORIZONTAL_SCROLL = 0x27;
	const uint8_t SH1106_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;
	const uint8_t SH1106_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A;
public:
	Sh1106(PinSBase &DataCommand,PinSBase &Reset,PinSBase& Mosi,PinSBase& ChipSelect, PinSBase& Clk, PinSBase &Miso, PinSBase & SS)
	{
    1156:	e2 e1       	ldi	r30, 0x12	; 18
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	80 e8       	ldi	r24, 0x80	; 128
    115c:	82 8f       	std	Z+26, r24	; 0x1a
    115e:	90 eb       	ldi	r25, 0xB0	; 176
    1160:	93 8f       	std	Z+27, r25	; 0x1b
    1162:	80 ef       	ldi	r24, 0xF0	; 240
    1164:	84 8f       	std	Z+28, r24	; 0x1c
    1166:	81 e8       	ldi	r24, 0x81	; 129
    1168:	85 8f       	std	Z+29, r24	; 0x1d
    116a:	84 ea       	ldi	r24, 0xA4	; 164
    116c:	86 8f       	std	Z+30, r24	; 0x1e
    116e:	85 ea       	ldi	r24, 0xA5	; 165
    1170:	87 8f       	std	Z+31, r24	; 0x1f
    1172:	86 ea       	ldi	r24, 0xA6	; 166
    1174:	80 a3       	std	Z+32, r24	; 0x20
    1176:	87 ea       	ldi	r24, 0xA7	; 167
    1178:	81 a3       	std	Z+33, r24	; 0x21
    117a:	8e ea       	ldi	r24, 0xAE	; 174
    117c:	82 a3       	std	Z+34, r24	; 0x22
    117e:	8f ea       	ldi	r24, 0xAF	; 175
    1180:	83 a3       	std	Z+35, r24	; 0x23
    1182:	83 ed       	ldi	r24, 0xD3	; 211
    1184:	84 a3       	std	Z+36, r24	; 0x24
    1186:	8a ed       	ldi	r24, 0xDA	; 218
    1188:	85 a3       	std	Z+37, r24	; 0x25
    118a:	8b ed       	ldi	r24, 0xDB	; 219
    118c:	86 a3       	std	Z+38, r24	; 0x26
    118e:	85 ed       	ldi	r24, 0xD5	; 213
    1190:	87 a3       	std	Z+39, r24	; 0x27
    1192:	89 ed       	ldi	r24, 0xD9	; 217
    1194:	80 a7       	std	Z+40, r24	; 0x28
    1196:	88 ea       	ldi	r24, 0xA8	; 168
    1198:	81 a7       	std	Z+41, r24	; 0x29
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	82 a7       	std	Z+42, r24	; 0x2a
    119e:	20 e1       	ldi	r18, 0x10	; 16
    11a0:	23 a7       	std	Z+43, r18	; 0x2b
    11a2:	20 e4       	ldi	r18, 0x40	; 64
    11a4:	24 a7       	std	Z+44, r18	; 0x2c
    11a6:	20 e2       	ldi	r18, 0x20	; 32
    11a8:	25 a7       	std	Z+45, r18	; 0x2d
    11aa:	21 e2       	ldi	r18, 0x21	; 33
    11ac:	26 a7       	std	Z+46, r18	; 0x2e
    11ae:	97 a7       	std	Z+47, r25	; 0x2f
    11b0:	90 ec       	ldi	r25, 0xC0	; 192
    11b2:	90 ab       	std	Z+48, r25	; 0x30
    11b4:	98 ec       	ldi	r25, 0xC8	; 200
    11b6:	91 ab       	std	Z+49, r25	; 0x31
    11b8:	90 ea       	ldi	r25, 0xA0	; 160
    11ba:	92 ab       	std	Z+50, r25	; 0x32
    11bc:	9d ea       	ldi	r25, 0xAD	; 173
    11be:	93 ab       	std	Z+51, r25	; 0x33
    11c0:	9b e8       	ldi	r25, 0x8B	; 139
    11c2:	94 ab       	std	Z+52, r25	; 0x34
    11c4:	85 ab       	std	Z+53, r24	; 0x35
    11c6:	8f e2       	ldi	r24, 0x2F	; 47
    11c8:	86 ab       	std	Z+54, r24	; 0x36
    11ca:	8e e2       	ldi	r24, 0x2E	; 46
    11cc:	87 ab       	std	Z+55, r24	; 0x37
    11ce:	83 ea       	ldi	r24, 0xA3	; 163
    11d0:	80 af       	std	Z+56, r24	; 0x38
    11d2:	86 e2       	ldi	r24, 0x26	; 38
    11d4:	81 af       	std	Z+57, r24	; 0x39
    11d6:	87 e2       	ldi	r24, 0x27	; 39
    11d8:	82 af       	std	Z+58, r24	; 0x3a
    11da:	89 e2       	ldi	r24, 0x29	; 41
    11dc:	83 af       	std	Z+59, r24	; 0x3b
    11de:	8a e2       	ldi	r24, 0x2A	; 42
    11e0:	84 af       	std	Z+60, r24	; 0x3c
		_NeedToClear = true;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	83 87       	std	Z+11, r24	; 0x0b
		_DataCommand = &DataCommand;
    11e6:	86 e6       	ldi	r24, 0x66	; 102
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	95 87       	std	Z+13, r25	; 0x0d
    11ec:	84 87       	std	Z+12, r24	; 0x0c
		_Reset = &Reset;
    11ee:	84 e6       	ldi	r24, 0x64	; 100
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	97 87       	std	Z+15, r25	; 0x0f
    11f4:	86 87       	std	Z+14, r24	; 0x0e
		_Miso = &Miso;
    11f6:	80 e7       	ldi	r24, 0x70	; 112
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	97 8b       	std	Z+23, r25	; 0x17
    11fc:	86 8b       	std	Z+22, r24	; 0x16
		_Mosi = &Mosi;
    11fe:	8e e6       	ldi	r24, 0x6E	; 110
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	91 8b       	std	Z+17, r25	; 0x11
    1204:	80 8b       	std	Z+16, r24	; 0x10
		_ChipSelect = &ChipSelect;
    1206:	82 e6       	ldi	r24, 0x62	; 98
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	93 8b       	std	Z+19, r25	; 0x13
    120c:	82 8b       	std	Z+18, r24	; 0x12
		_SS = &SS;
    120e:	80 e6       	ldi	r24, 0x60	; 96
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	91 8f       	std	Z+25, r25	; 0x19
    1214:	80 8f       	std	Z+24, r24	; 0x18
		_Clk = &Clk;
    1216:	82 e7       	ldi	r24, 0x72	; 114
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	95 8b       	std	Z+21, r25	; 0x15
    121c:	84 8b       	std	Z+20, r24	; 0x14
	Action _HoldAction = nullptr;
	public:
	const uint8_t MinClickTime = 15;
	const uint8_t MinHoldTime = 220;
	SingleButton(PinSBase &pin, Action click,Action hold)
	{
    121e:	c8 e0       	ldi	r28, 0x08	; 8
    1220:	d2 e0       	ldi	r29, 0x02	; 2
    1222:	1d 82       	std	Y+5, r1	; 0x05
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	1f 82       	std	Y+7, r1	; 0x07
    1228:	1e 82       	std	Y+6, r1	; 0x06
    122a:	0f e0       	ldi	r16, 0x0F	; 15
    122c:	08 87       	std	Y+8, r16	; 0x08
    122e:	1c ed       	ldi	r17, 0xDC	; 220
    1230:	19 87       	std	Y+9, r17	; 0x09
		_ButtonPin = &pin;
    1232:	e4 e7       	ldi	r30, 0x74	; 116
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	f9 83       	std	Y+1, r31	; 0x01
    1238:	e8 83       	st	Y, r30
		_ButtonPin->AsInput();
    123a:	01 90       	ld	r0, Z+
    123c:	f0 81       	ld	r31, Z
    123e:	e0 2d       	mov	r30, r0
    1240:	06 88       	ldd	r0, Z+22	; 0x16
    1242:	f7 89       	ldd	r31, Z+23	; 0x17
    1244:	e0 2d       	mov	r30, r0
    1246:	84 e7       	ldi	r24, 0x74	; 116
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	09 95       	icall
		_ButtonPin->Set();
    124c:	88 81       	ld	r24, Y
    124e:	99 81       	ldd	r25, Y+1	; 0x01
    1250:	dc 01       	movw	r26, r24
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	06 84       	ldd	r0, Z+14	; 0x0e
    1258:	f7 85       	ldd	r31, Z+15	; 0x0f
    125a:	e0 2d       	mov	r30, r0
    125c:	09 95       	icall
		_PressTime = 0;
    125e:	1b 82       	std	Y+3, r1	; 0x03
    1260:	1a 82       	std	Y+2, r1	; 0x02
		_ClickAction = click;
    1262:	86 e5       	ldi	r24, 0x56	; 86
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9d 83       	std	Y+5, r25	; 0x05
    1268:	8c 83       	std	Y+4, r24	; 0x04
		_HoldAction = hold;
    126a:	8b e5       	ldi	r24, 0x5B	; 91
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9f 83       	std	Y+7, r25	; 0x07
    1270:	8e 83       	std	Y+6, r24	; 0x06
	Action _HoldAction = nullptr;
	public:
	const uint8_t MinClickTime = 15;
	const uint8_t MinHoldTime = 220;
	SingleButton(PinSBase &pin, Action click,Action hold)
	{
    1272:	ce ef       	ldi	r28, 0xFE	; 254
    1274:	d1 e0       	ldi	r29, 0x01	; 1
    1276:	1d 82       	std	Y+5, r1	; 0x05
    1278:	1c 82       	std	Y+4, r1	; 0x04
    127a:	1f 82       	std	Y+7, r1	; 0x07
    127c:	1e 82       	std	Y+6, r1	; 0x06
    127e:	08 87       	std	Y+8, r16	; 0x08
    1280:	19 87       	std	Y+9, r17	; 0x09
		_ButtonPin = &pin;
    1282:	e6 e7       	ldi	r30, 0x76	; 118
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	f9 83       	std	Y+1, r31	; 0x01
    1288:	e8 83       	st	Y, r30
		_ButtonPin->AsInput();
    128a:	01 90       	ld	r0, Z+
    128c:	f0 81       	ld	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	06 88       	ldd	r0, Z+22	; 0x16
    1292:	f7 89       	ldd	r31, Z+23	; 0x17
    1294:	e0 2d       	mov	r30, r0
    1296:	86 e7       	ldi	r24, 0x76	; 118
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	09 95       	icall
		_ButtonPin->Set();
    129c:	88 81       	ld	r24, Y
    129e:	99 81       	ldd	r25, Y+1	; 0x01
    12a0:	dc 01       	movw	r26, r24
    12a2:	ed 91       	ld	r30, X+
    12a4:	fc 91       	ld	r31, X
    12a6:	06 84       	ldd	r0, Z+14	; 0x0e
    12a8:	f7 85       	ldd	r31, Z+15	; 0x0f
    12aa:	e0 2d       	mov	r30, r0
    12ac:	09 95       	icall
		_PressTime = 0;
    12ae:	1b 82       	std	Y+3, r1	; 0x03
    12b0:	1a 82       	std	Y+2, r1	; 0x02
		_ClickAction = click;
    12b2:	82 e6       	ldi	r24, 0x62	; 98
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9d 83       	std	Y+5, r25	; 0x05
    12b8:	8c 83       	std	Y+4, r24	; 0x04
		_HoldAction = hold;
    12ba:	85 e7       	ldi	r24, 0x75	; 117
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9f 83       	std	Y+7, r25	; 0x07
    12c0:	8e 83       	std	Y+6, r24	; 0x06
	while("forever")
	{
		debugDisplay.PrintDebugMessage();
		debugDisplay.TryClear();
	}
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <_GLOBAL__sub_D__Znwj>:
    12cc:	08 95       	ret

000012ce <_ZN4PinSILh59ELh57ELh58ELh0EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    12ce:	9b b3       	in	r25, 0x1b	; 27
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 27       	eor	r24, r25
    12d4:	8b bb       	out	0x1b, r24	; 27
    12d6:	08 95       	ret

000012d8 <_ZN4PinSILh59ELh57ELh58ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    12d8:	d9 9a       	sbi	0x1b, 1	; 27
    12da:	08 95       	ret

000012dc <_ZN4PinSILh59ELh57ELh58ELh1EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    12dc:	d9 98       	cbi	0x1b, 1	; 27
    12de:	08 95       	ret

000012e0 <_ZN4PinSILh59ELh57ELh58ELh2EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    12e0:	9b b3       	in	r25, 0x1b	; 27
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	89 27       	eor	r24, r25
    12e6:	8b bb       	out	0x1b, r24	; 27
    12e8:	08 95       	ret

000012ea <_ZN4PinSILh59ELh57ELh58ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    12ea:	da 9a       	sbi	0x1b, 2	; 27
    12ec:	08 95       	ret

000012ee <_ZN4PinSILh59ELh57ELh58ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    12ee:	d0 9a       	sbi	0x1a, 0	; 26
    12f0:	08 95       	ret

000012f2 <_ZN4PinSILh59ELh57ELh58ELh1EE8AsOutputEv>:
    12f2:	d1 9a       	sbi	0x1a, 1	; 26
    12f4:	08 95       	ret

000012f6 <_ZN4PinSILh59ELh57ELh58ELh2EE8AsOutputEv>:
    12f6:	d2 9a       	sbi	0x1a, 2	; 26
    12f8:	08 95       	ret

000012fa <_ZN4PinSILh59ELh57ELh58ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    12fa:	d8 9a       	sbi	0x1b, 0	; 27
    12fc:	08 95       	ret

000012fe <_ZN4PinSILh56ELh54ELh55ELh4EED1Ev>:
	virtual void AsInput(){}
	virtual ~PinSBase(){}
};

 template<const volatile uint8_t PortAddress,const volatile uint8_t PinAddress,const volatile uint8_t DdrAddress,const volatile uint8_t NOPin>
 class PinS : public PinSBase
    12fe:	08 95       	ret

00001300 <_ZN4PinSILh59ELh57ELh58ELh5EED1Ev>:
    1300:	08 95       	ret

00001302 <_ZN4PinSILh59ELh57ELh58ELh4EED1Ev>:
    1302:	08 95       	ret

00001304 <_ZN4PinSILh59ELh57ELh58ELh3EED1Ev>:
    1304:	08 95       	ret

00001306 <_ZN4PinSILh59ELh57ELh58ELh2EED1Ev>:
    1306:	08 95       	ret

00001308 <_ZN4PinSILh59ELh57ELh58ELh1EED1Ev>:
    1308:	08 95       	ret

0000130a <_ZN4PinSILh59ELh57ELh58ELh0EED1Ev>:
    130a:	08 95       	ret

0000130c <_ZN4PinSILh56ELh54ELh55ELh5EED1Ev>:
    130c:	08 95       	ret

0000130e <_ZN4PinSILh56ELh54ELh55ELh6EED1Ev>:
    130e:	08 95       	ret

00001310 <_ZN4PinSILh56ELh54ELh55ELh7EED1Ev>:
    1310:	08 95       	ret

00001312 <_ZN4PinSILh50ELh48ELh49ELh7EED1Ev>:
    1312:	08 95       	ret

00001314 <_ZN4PinSILh50ELh48ELh49ELh6EED1Ev>:
    1314:	08 95       	ret

00001316 <_ZN4PinSILh56ELh54ELh55ELh4EE7FastSetEv>:
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    1316:	c4 9a       	sbi	0x18, 4	; 24
    1318:	08 95       	ret

0000131a <_ZN4PinSILh56ELh54ELh55ELh4EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    131a:	c4 98       	cbi	0x18, 4	; 24
    131c:	08 95       	ret

0000131e <_ZN4PinSILh56ELh54ELh55ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    131e:	98 b3       	in	r25, 0x18	; 24
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	89 27       	eor	r24, r25
    1324:	88 bb       	out	0x18, r24	; 24
    1326:	08 95       	ret

00001328 <_ZN4PinSILh56ELh54ELh55ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    1328:	bc 9a       	sbi	0x17, 4	; 23
    132a:	08 95       	ret

0000132c <_ZN4PinSILh56ELh54ELh55ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    132c:	17 ba       	out	0x17, r1	; 23
    132e:	08 95       	ret

00001330 <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1330:	66 23       	and	r22, r22
    1332:	41 f0       	breq	.+16     	; 0x1344 <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb+0x14>
			Set();
    1334:	dc 01       	movw	r26, r24
    1336:	ed 91       	ld	r30, X+
    1338:	fc 91       	ld	r31, X
    133a:	06 84       	ldd	r0, Z+14	; 0x0e
    133c:	f7 85       	ldd	r31, Z+15	; 0x0f
    133e:	e0 2d       	mov	r30, r0
    1340:	09 95       	icall
    1342:	08 95       	ret
		else
			Clear();
    1344:	dc 01       	movw	r26, r24
    1346:	ed 91       	ld	r30, X+
    1348:	fc 91       	ld	r31, X
    134a:	00 88       	ldd	r0, Z+16	; 0x10
    134c:	f1 89       	ldd	r31, Z+17	; 0x11
    134e:	e0 2d       	mov	r30, r0
    1350:	09 95       	icall
    1352:	08 95       	ret

00001354 <_ZN4PinSILh56ELh54ELh55ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    1354:	86 b3       	in	r24, 0x16	; 22
    }
    1356:	82 95       	swap	r24
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	08 95       	ret

0000135c <_ZN4PinSILh56ELh54ELh55ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    135c:	c4 9a       	sbi	0x18, 4	; 24
    135e:	08 95       	ret

00001360 <_ZN4PinSILh56ELh54ELh55ELh4EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    1360:	c4 98       	cbi	0x18, 4	; 24
    1362:	08 95       	ret

00001364 <_ZN4PinSILh56ELh54ELh55ELh4EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    1364:	98 b3       	in	r25, 0x18	; 24
    1366:	80 e1       	ldi	r24, 0x10	; 16
    1368:	89 27       	eor	r24, r25
    136a:	88 bb       	out	0x18, r24	; 24
    136c:	08 95       	ret

0000136e <_ZN4PinSILh56ELh54ELh55ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    136e:	bc 9a       	sbi	0x17, 4	; 23
    1370:	08 95       	ret

00001372 <_ZN4PinSILh56ELh54ELh55ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    1372:	87 b3       	in	r24, 0x17	; 23
    1374:	17 ba       	out	0x17, r1	; 23
    1376:	08 95       	ret

00001378 <_ZN4PinSILh59ELh57ELh58ELh5EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    1378:	dd 9a       	sbi	0x1b, 5	; 27
    137a:	08 95       	ret

0000137c <_ZN4PinSILh59ELh57ELh58ELh5EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    137c:	dd 98       	cbi	0x1b, 5	; 27
    137e:	08 95       	ret

00001380 <_ZN4PinSILh59ELh57ELh58ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1380:	9b b3       	in	r25, 0x1b	; 27
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	89 27       	eor	r24, r25
    1386:	8b bb       	out	0x1b, r24	; 27
    1388:	08 95       	ret

0000138a <_ZN4PinSILh59ELh57ELh58ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    138a:	d5 9a       	sbi	0x1a, 5	; 26
    138c:	08 95       	ret

0000138e <_ZN4PinSILh59ELh57ELh58ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    138e:	1a ba       	out	0x1a, r1	; 26
    1390:	08 95       	ret

00001392 <_ZN4PinSILh59ELh57ELh58ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1392:	66 23       	and	r22, r22
    1394:	41 f0       	breq	.+16     	; 0x13a6 <_ZN4PinSILh59ELh57ELh58ELh5EE7BoolSetEb+0x14>
			Set();
    1396:	dc 01       	movw	r26, r24
    1398:	ed 91       	ld	r30, X+
    139a:	fc 91       	ld	r31, X
    139c:	06 84       	ldd	r0, Z+14	; 0x0e
    139e:	f7 85       	ldd	r31, Z+15	; 0x0f
    13a0:	e0 2d       	mov	r30, r0
    13a2:	09 95       	icall
    13a4:	08 95       	ret
		else
			Clear();
    13a6:	dc 01       	movw	r26, r24
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	00 88       	ldd	r0, Z+16	; 0x10
    13ae:	f1 89       	ldd	r31, Z+17	; 0x11
    13b0:	e0 2d       	mov	r30, r0
    13b2:	09 95       	icall
    13b4:	08 95       	ret

000013b6 <_ZN4PinSILh59ELh57ELh58ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    13b6:	89 b3       	in	r24, 0x19	; 25
    }
    13b8:	85 fb       	bst	r24, 5
    13ba:	88 27       	eor	r24, r24
    13bc:	80 f9       	bld	r24, 0
    13be:	08 95       	ret

000013c0 <_ZN4PinSILh59ELh57ELh58ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    13c0:	dd 9a       	sbi	0x1b, 5	; 27
    13c2:	08 95       	ret

000013c4 <_ZN4PinSILh59ELh57ELh58ELh5EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    13c4:	dd 98       	cbi	0x1b, 5	; 27
    13c6:	08 95       	ret

000013c8 <_ZN4PinSILh59ELh57ELh58ELh5EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    13c8:	9b b3       	in	r25, 0x1b	; 27
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	89 27       	eor	r24, r25
    13ce:	8b bb       	out	0x1b, r24	; 27
    13d0:	08 95       	ret

000013d2 <_ZN4PinSILh59ELh57ELh58ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    13d2:	d5 9a       	sbi	0x1a, 5	; 26
    13d4:	08 95       	ret

000013d6 <_ZN4PinSILh59ELh57ELh58ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    13d6:	8a b3       	in	r24, 0x1a	; 26
    13d8:	1a ba       	out	0x1a, r1	; 26
    13da:	08 95       	ret

000013dc <_ZN4PinSILh59ELh57ELh58ELh4EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    13dc:	dc 9a       	sbi	0x1b, 4	; 27
    13de:	08 95       	ret

000013e0 <_ZN4PinSILh59ELh57ELh58ELh4EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    13e0:	dc 98       	cbi	0x1b, 4	; 27
    13e2:	08 95       	ret

000013e4 <_ZN4PinSILh59ELh57ELh58ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    13e4:	9b b3       	in	r25, 0x1b	; 27
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	89 27       	eor	r24, r25
    13ea:	8b bb       	out	0x1b, r24	; 27
    13ec:	08 95       	ret

000013ee <_ZN4PinSILh59ELh57ELh58ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    13ee:	d4 9a       	sbi	0x1a, 4	; 26
    13f0:	08 95       	ret

000013f2 <_ZN4PinSILh59ELh57ELh58ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    13f2:	1a ba       	out	0x1a, r1	; 26
    13f4:	08 95       	ret

000013f6 <_ZN4PinSILh59ELh57ELh58ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    13f6:	66 23       	and	r22, r22
    13f8:	41 f0       	breq	.+16     	; 0x140a <_ZN4PinSILh59ELh57ELh58ELh4EE7BoolSetEb+0x14>
			Set();
    13fa:	dc 01       	movw	r26, r24
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    1400:	06 84       	ldd	r0, Z+14	; 0x0e
    1402:	f7 85       	ldd	r31, Z+15	; 0x0f
    1404:	e0 2d       	mov	r30, r0
    1406:	09 95       	icall
    1408:	08 95       	ret
		else
			Clear();
    140a:	dc 01       	movw	r26, r24
    140c:	ed 91       	ld	r30, X+
    140e:	fc 91       	ld	r31, X
    1410:	00 88       	ldd	r0, Z+16	; 0x10
    1412:	f1 89       	ldd	r31, Z+17	; 0x11
    1414:	e0 2d       	mov	r30, r0
    1416:	09 95       	icall
    1418:	08 95       	ret

0000141a <_ZN4PinSILh59ELh57ELh58ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    141a:	89 b3       	in	r24, 0x19	; 25
    }
    141c:	82 95       	swap	r24
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	08 95       	ret

00001422 <_ZN4PinSILh59ELh57ELh58ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    1422:	dc 9a       	sbi	0x1b, 4	; 27
    1424:	08 95       	ret

00001426 <_ZN4PinSILh59ELh57ELh58ELh4EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    1426:	dc 98       	cbi	0x1b, 4	; 27
    1428:	08 95       	ret

0000142a <_ZN4PinSILh59ELh57ELh58ELh4EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    142a:	9b b3       	in	r25, 0x1b	; 27
    142c:	80 e1       	ldi	r24, 0x10	; 16
    142e:	89 27       	eor	r24, r25
    1430:	8b bb       	out	0x1b, r24	; 27
    1432:	08 95       	ret

00001434 <_ZN4PinSILh59ELh57ELh58ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    1434:	d4 9a       	sbi	0x1a, 4	; 26
    1436:	08 95       	ret

00001438 <_ZN4PinSILh59ELh57ELh58ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    1438:	8a b3       	in	r24, 0x1a	; 26
    143a:	1a ba       	out	0x1a, r1	; 26
    143c:	08 95       	ret

0000143e <_ZN4PinSILh59ELh57ELh58ELh3EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    143e:	db 9a       	sbi	0x1b, 3	; 27
    1440:	08 95       	ret

00001442 <_ZN4PinSILh59ELh57ELh58ELh3EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    1442:	db 98       	cbi	0x1b, 3	; 27
    1444:	08 95       	ret

00001446 <_ZN4PinSILh59ELh57ELh58ELh3EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1446:	9b b3       	in	r25, 0x1b	; 27
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	89 27       	eor	r24, r25
    144c:	8b bb       	out	0x1b, r24	; 27
    144e:	08 95       	ret

00001450 <_ZN4PinSILh59ELh57ELh58ELh3EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    1450:	d3 9a       	sbi	0x1a, 3	; 26
    1452:	08 95       	ret

00001454 <_ZN4PinSILh59ELh57ELh58ELh3EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    1454:	1a ba       	out	0x1a, r1	; 26
    1456:	08 95       	ret

00001458 <_ZN4PinSILh59ELh57ELh58ELh3EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1458:	66 23       	and	r22, r22
    145a:	41 f0       	breq	.+16     	; 0x146c <_ZN4PinSILh59ELh57ELh58ELh3EE7BoolSetEb+0x14>
			Set();
    145c:	dc 01       	movw	r26, r24
    145e:	ed 91       	ld	r30, X+
    1460:	fc 91       	ld	r31, X
    1462:	06 84       	ldd	r0, Z+14	; 0x0e
    1464:	f7 85       	ldd	r31, Z+15	; 0x0f
    1466:	e0 2d       	mov	r30, r0
    1468:	09 95       	icall
    146a:	08 95       	ret
		else
			Clear();
    146c:	dc 01       	movw	r26, r24
    146e:	ed 91       	ld	r30, X+
    1470:	fc 91       	ld	r31, X
    1472:	00 88       	ldd	r0, Z+16	; 0x10
    1474:	f1 89       	ldd	r31, Z+17	; 0x11
    1476:	e0 2d       	mov	r30, r0
    1478:	09 95       	icall
    147a:	08 95       	ret

0000147c <_ZN4PinSILh59ELh57ELh58ELh3EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    147c:	89 b3       	in	r24, 0x19	; 25
    }
    147e:	83 fb       	bst	r24, 3
    1480:	88 27       	eor	r24, r24
    1482:	80 f9       	bld	r24, 0
    1484:	08 95       	ret

00001486 <_ZN4PinSILh59ELh57ELh58ELh3EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    1486:	db 9a       	sbi	0x1b, 3	; 27
    1488:	08 95       	ret

0000148a <_ZN4PinSILh59ELh57ELh58ELh3EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    148a:	db 98       	cbi	0x1b, 3	; 27
    148c:	08 95       	ret

0000148e <_ZN4PinSILh59ELh57ELh58ELh3EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    148e:	9b b3       	in	r25, 0x1b	; 27
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	89 27       	eor	r24, r25
    1494:	8b bb       	out	0x1b, r24	; 27
    1496:	08 95       	ret

00001498 <_ZN4PinSILh59ELh57ELh58ELh3EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    1498:	d3 9a       	sbi	0x1a, 3	; 26
    149a:	08 95       	ret

0000149c <_ZN4PinSILh59ELh57ELh58ELh3EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    149c:	8a b3       	in	r24, 0x1a	; 26
    149e:	1a ba       	out	0x1a, r1	; 26
    14a0:	08 95       	ret

000014a2 <_ZN4PinSILh59ELh57ELh58ELh2EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    14a2:	da 9a       	sbi	0x1b, 2	; 27
    14a4:	08 95       	ret

000014a6 <_ZN4PinSILh59ELh57ELh58ELh2EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    14a6:	da 98       	cbi	0x1b, 2	; 27
    14a8:	08 95       	ret

000014aa <_ZN4PinSILh59ELh57ELh58ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    14aa:	9b b3       	in	r25, 0x1b	; 27
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	89 27       	eor	r24, r25
    14b0:	8b bb       	out	0x1b, r24	; 27
    14b2:	08 95       	ret

000014b4 <_ZN4PinSILh59ELh57ELh58ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    14b4:	d2 9a       	sbi	0x1a, 2	; 26
    14b6:	08 95       	ret

000014b8 <_ZN4PinSILh59ELh57ELh58ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    14b8:	1a ba       	out	0x1a, r1	; 26
    14ba:	08 95       	ret

000014bc <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    14bc:	66 23       	and	r22, r22
    14be:	41 f0       	breq	.+16     	; 0x14d0 <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb+0x14>
			Set();
    14c0:	dc 01       	movw	r26, r24
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	06 84       	ldd	r0, Z+14	; 0x0e
    14c8:	f7 85       	ldd	r31, Z+15	; 0x0f
    14ca:	e0 2d       	mov	r30, r0
    14cc:	09 95       	icall
    14ce:	08 95       	ret
		else
			Clear();
    14d0:	dc 01       	movw	r26, r24
    14d2:	ed 91       	ld	r30, X+
    14d4:	fc 91       	ld	r31, X
    14d6:	00 88       	ldd	r0, Z+16	; 0x10
    14d8:	f1 89       	ldd	r31, Z+17	; 0x11
    14da:	e0 2d       	mov	r30, r0
    14dc:	09 95       	icall
    14de:	08 95       	ret

000014e0 <_ZN4PinSILh59ELh57ELh58ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    14e0:	89 b3       	in	r24, 0x19	; 25
    }
    14e2:	82 fb       	bst	r24, 2
    14e4:	88 27       	eor	r24, r24
    14e6:	80 f9       	bld	r24, 0
    14e8:	08 95       	ret

000014ea <_ZN4PinSILh59ELh57ELh58ELh2EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    14ea:	da 98       	cbi	0x1b, 2	; 27
    14ec:	08 95       	ret

000014ee <_ZN4PinSILh59ELh57ELh58ELh2EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    14ee:	8a b3       	in	r24, 0x1a	; 26
    14f0:	1a ba       	out	0x1a, r1	; 26
    14f2:	08 95       	ret

000014f4 <_ZN4PinSILh59ELh57ELh58ELh1EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    14f4:	d9 9a       	sbi	0x1b, 1	; 27
    14f6:	08 95       	ret

000014f8 <_ZN4PinSILh59ELh57ELh58ELh1EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    14f8:	d9 98       	cbi	0x1b, 1	; 27
    14fa:	08 95       	ret

000014fc <_ZN4PinSILh59ELh57ELh58ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    14fc:	9b b3       	in	r25, 0x1b	; 27
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	89 27       	eor	r24, r25
    1502:	8b bb       	out	0x1b, r24	; 27
    1504:	08 95       	ret

00001506 <_ZN4PinSILh59ELh57ELh58ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    1506:	d1 9a       	sbi	0x1a, 1	; 26
    1508:	08 95       	ret

0000150a <_ZN4PinSILh59ELh57ELh58ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    150a:	1a ba       	out	0x1a, r1	; 26
    150c:	08 95       	ret

0000150e <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    150e:	66 23       	and	r22, r22
    1510:	41 f0       	breq	.+16     	; 0x1522 <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb+0x14>
			Set();
    1512:	dc 01       	movw	r26, r24
    1514:	ed 91       	ld	r30, X+
    1516:	fc 91       	ld	r31, X
    1518:	06 84       	ldd	r0, Z+14	; 0x0e
    151a:	f7 85       	ldd	r31, Z+15	; 0x0f
    151c:	e0 2d       	mov	r30, r0
    151e:	09 95       	icall
    1520:	08 95       	ret
		else
			Clear();
    1522:	dc 01       	movw	r26, r24
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	00 88       	ldd	r0, Z+16	; 0x10
    152a:	f1 89       	ldd	r31, Z+17	; 0x11
    152c:	e0 2d       	mov	r30, r0
    152e:	09 95       	icall
    1530:	08 95       	ret

00001532 <_ZN4PinSILh59ELh57ELh58ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    1532:	89 b3       	in	r24, 0x19	; 25
    }
    1534:	86 95       	lsr	r24
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	08 95       	ret

0000153a <_ZN4PinSILh59ELh57ELh58ELh1EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    153a:	9b b3       	in	r25, 0x1b	; 27
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	89 27       	eor	r24, r25
    1540:	8b bb       	out	0x1b, r24	; 27
    1542:	08 95       	ret

00001544 <_ZN4PinSILh59ELh57ELh58ELh1EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    1544:	8a b3       	in	r24, 0x1a	; 26
    1546:	1a ba       	out	0x1a, r1	; 26
    1548:	08 95       	ret

0000154a <_ZN4PinSILh59ELh57ELh58ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    154a:	d8 9a       	sbi	0x1b, 0	; 27
    154c:	08 95       	ret

0000154e <_ZN4PinSILh59ELh57ELh58ELh0EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    154e:	d8 98       	cbi	0x1b, 0	; 27
    1550:	08 95       	ret

00001552 <_ZN4PinSILh59ELh57ELh58ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1552:	9b b3       	in	r25, 0x1b	; 27
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 27       	eor	r24, r25
    1558:	8b bb       	out	0x1b, r24	; 27
    155a:	08 95       	ret

0000155c <_ZN4PinSILh59ELh57ELh58ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    155c:	d0 9a       	sbi	0x1a, 0	; 26
    155e:	08 95       	ret

00001560 <_ZN4PinSILh59ELh57ELh58ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    1560:	1a ba       	out	0x1a, r1	; 26
    1562:	08 95       	ret

00001564 <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1564:	66 23       	and	r22, r22
    1566:	41 f0       	breq	.+16     	; 0x1578 <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb+0x14>
			Set();
    1568:	dc 01       	movw	r26, r24
    156a:	ed 91       	ld	r30, X+
    156c:	fc 91       	ld	r31, X
    156e:	06 84       	ldd	r0, Z+14	; 0x0e
    1570:	f7 85       	ldd	r31, Z+15	; 0x0f
    1572:	e0 2d       	mov	r30, r0
    1574:	09 95       	icall
    1576:	08 95       	ret
		else
			Clear();
    1578:	dc 01       	movw	r26, r24
    157a:	ed 91       	ld	r30, X+
    157c:	fc 91       	ld	r31, X
    157e:	00 88       	ldd	r0, Z+16	; 0x10
    1580:	f1 89       	ldd	r31, Z+17	; 0x11
    1582:	e0 2d       	mov	r30, r0
    1584:	09 95       	icall
    1586:	08 95       	ret

00001588 <_ZN4PinSILh59ELh57ELh58ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    1588:	89 b3       	in	r24, 0x19	; 25
    }
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	08 95       	ret

0000158e <_ZN4PinSILh59ELh57ELh58ELh0EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    158e:	d8 98       	cbi	0x1b, 0	; 27
    1590:	08 95       	ret

00001592 <_ZN4PinSILh59ELh57ELh58ELh0EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    1592:	8a b3       	in	r24, 0x1a	; 26
    1594:	1a ba       	out	0x1a, r1	; 26
    1596:	08 95       	ret

00001598 <_ZN4PinSILh56ELh54ELh55ELh5EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    1598:	c5 9a       	sbi	0x18, 5	; 24
    159a:	08 95       	ret

0000159c <_ZN4PinSILh56ELh54ELh55ELh5EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    159c:	c5 98       	cbi	0x18, 5	; 24
    159e:	08 95       	ret

000015a0 <_ZN4PinSILh56ELh54ELh55ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    15a0:	98 b3       	in	r25, 0x18	; 24
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	89 27       	eor	r24, r25
    15a6:	88 bb       	out	0x18, r24	; 24
    15a8:	08 95       	ret

000015aa <_ZN4PinSILh56ELh54ELh55ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    15aa:	bd 9a       	sbi	0x17, 5	; 23
    15ac:	08 95       	ret

000015ae <_ZN4PinSILh56ELh54ELh55ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    15ae:	17 ba       	out	0x17, r1	; 23
    15b0:	08 95       	ret

000015b2 <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    15b2:	66 23       	and	r22, r22
    15b4:	41 f0       	breq	.+16     	; 0x15c6 <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb+0x14>
			Set();
    15b6:	dc 01       	movw	r26, r24
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	06 84       	ldd	r0, Z+14	; 0x0e
    15be:	f7 85       	ldd	r31, Z+15	; 0x0f
    15c0:	e0 2d       	mov	r30, r0
    15c2:	09 95       	icall
    15c4:	08 95       	ret
		else
			Clear();
    15c6:	dc 01       	movw	r26, r24
    15c8:	ed 91       	ld	r30, X+
    15ca:	fc 91       	ld	r31, X
    15cc:	00 88       	ldd	r0, Z+16	; 0x10
    15ce:	f1 89       	ldd	r31, Z+17	; 0x11
    15d0:	e0 2d       	mov	r30, r0
    15d2:	09 95       	icall
    15d4:	08 95       	ret

000015d6 <_ZN4PinSILh56ELh54ELh55ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    15d6:	86 b3       	in	r24, 0x16	; 22
    }
    15d8:	85 fb       	bst	r24, 5
    15da:	88 27       	eor	r24, r24
    15dc:	80 f9       	bld	r24, 0
    15de:	08 95       	ret

000015e0 <_ZN4PinSILh56ELh54ELh55ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    15e0:	c5 9a       	sbi	0x18, 5	; 24
    15e2:	08 95       	ret

000015e4 <_ZN4PinSILh56ELh54ELh55ELh5EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    15e4:	c5 98       	cbi	0x18, 5	; 24
    15e6:	08 95       	ret

000015e8 <_ZN4PinSILh56ELh54ELh55ELh5EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    15e8:	98 b3       	in	r25, 0x18	; 24
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	89 27       	eor	r24, r25
    15ee:	88 bb       	out	0x18, r24	; 24
    15f0:	08 95       	ret

000015f2 <_ZN4PinSILh56ELh54ELh55ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    15f2:	bd 9a       	sbi	0x17, 5	; 23
    15f4:	08 95       	ret

000015f6 <_ZN4PinSILh56ELh54ELh55ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    15f6:	87 b3       	in	r24, 0x17	; 23
    15f8:	17 ba       	out	0x17, r1	; 23
    15fa:	08 95       	ret

000015fc <_ZN4PinSILh56ELh54ELh55ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    15fc:	c6 9a       	sbi	0x18, 6	; 24
    15fe:	08 95       	ret

00001600 <_ZN4PinSILh56ELh54ELh55ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    1600:	c6 98       	cbi	0x18, 6	; 24
    1602:	08 95       	ret

00001604 <_ZN4PinSILh56ELh54ELh55ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1604:	98 b3       	in	r25, 0x18	; 24
    1606:	80 e4       	ldi	r24, 0x40	; 64
    1608:	89 27       	eor	r24, r25
    160a:	88 bb       	out	0x18, r24	; 24
    160c:	08 95       	ret

0000160e <_ZN4PinSILh56ELh54ELh55ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    160e:	be 9a       	sbi	0x17, 6	; 23
    1610:	08 95       	ret

00001612 <_ZN4PinSILh56ELh54ELh55ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    1612:	17 ba       	out	0x17, r1	; 23
    1614:	08 95       	ret

00001616 <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1616:	66 23       	and	r22, r22
    1618:	41 f0       	breq	.+16     	; 0x162a <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb+0x14>
			Set();
    161a:	dc 01       	movw	r26, r24
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	06 84       	ldd	r0, Z+14	; 0x0e
    1622:	f7 85       	ldd	r31, Z+15	; 0x0f
    1624:	e0 2d       	mov	r30, r0
    1626:	09 95       	icall
    1628:	08 95       	ret
		else
			Clear();
    162a:	dc 01       	movw	r26, r24
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	00 88       	ldd	r0, Z+16	; 0x10
    1632:	f1 89       	ldd	r31, Z+17	; 0x11
    1634:	e0 2d       	mov	r30, r0
    1636:	09 95       	icall
    1638:	08 95       	ret

0000163a <_ZN4PinSILh56ELh54ELh55ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    163a:	86 b3       	in	r24, 0x16	; 22
    }
    163c:	86 fb       	bst	r24, 6
    163e:	88 27       	eor	r24, r24
    1640:	80 f9       	bld	r24, 0
    1642:	08 95       	ret

00001644 <_ZN4PinSILh56ELh54ELh55ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    1644:	c6 9a       	sbi	0x18, 6	; 24
    1646:	08 95       	ret

00001648 <_ZN4PinSILh56ELh54ELh55ELh6EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    1648:	c6 98       	cbi	0x18, 6	; 24
    164a:	08 95       	ret

0000164c <_ZN4PinSILh56ELh54ELh55ELh6EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    164c:	98 b3       	in	r25, 0x18	; 24
    164e:	80 e4       	ldi	r24, 0x40	; 64
    1650:	89 27       	eor	r24, r25
    1652:	88 bb       	out	0x18, r24	; 24
    1654:	08 95       	ret

00001656 <_ZN4PinSILh56ELh54ELh55ELh6EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    1656:	be 9a       	sbi	0x17, 6	; 23
    1658:	08 95       	ret

0000165a <_ZN4PinSILh56ELh54ELh55ELh6EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    165a:	87 b3       	in	r24, 0x17	; 23
    165c:	17 ba       	out	0x17, r1	; 23
    165e:	08 95       	ret

00001660 <_ZN4PinSILh56ELh54ELh55ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    1660:	c7 9a       	sbi	0x18, 7	; 24
    1662:	08 95       	ret

00001664 <_ZN4PinSILh56ELh54ELh55ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    1664:	c7 98       	cbi	0x18, 7	; 24
    1666:	08 95       	ret

00001668 <_ZN4PinSILh56ELh54ELh55ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1668:	88 b3       	in	r24, 0x18	; 24
    166a:	80 58       	subi	r24, 0x80	; 128
    166c:	88 bb       	out	0x18, r24	; 24
    166e:	08 95       	ret

00001670 <_ZN4PinSILh56ELh54ELh55ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    1670:	bf 9a       	sbi	0x17, 7	; 23
    1672:	08 95       	ret

00001674 <_ZN4PinSILh56ELh54ELh55ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    1674:	17 ba       	out	0x17, r1	; 23
    1676:	08 95       	ret

00001678 <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1678:	66 23       	and	r22, r22
    167a:	41 f0       	breq	.+16     	; 0x168c <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb+0x14>
			Set();
    167c:	dc 01       	movw	r26, r24
    167e:	ed 91       	ld	r30, X+
    1680:	fc 91       	ld	r31, X
    1682:	06 84       	ldd	r0, Z+14	; 0x0e
    1684:	f7 85       	ldd	r31, Z+15	; 0x0f
    1686:	e0 2d       	mov	r30, r0
    1688:	09 95       	icall
    168a:	08 95       	ret
		else
			Clear();
    168c:	dc 01       	movw	r26, r24
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	00 88       	ldd	r0, Z+16	; 0x10
    1694:	f1 89       	ldd	r31, Z+17	; 0x11
    1696:	e0 2d       	mov	r30, r0
    1698:	09 95       	icall
    169a:	08 95       	ret

0000169c <_ZN4PinSILh56ELh54ELh55ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	b7 9b       	sbis	0x16, 7	; 22
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    }
    16a2:	08 95       	ret

000016a4 <_ZN4PinSILh56ELh54ELh55ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    16a4:	c7 9a       	sbi	0x18, 7	; 24
    16a6:	08 95       	ret

000016a8 <_ZN4PinSILh56ELh54ELh55ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    16a8:	c7 98       	cbi	0x18, 7	; 24
    16aa:	08 95       	ret

000016ac <_ZN4PinSILh56ELh54ELh55ELh7EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    16ac:	88 b3       	in	r24, 0x18	; 24
    16ae:	80 58       	subi	r24, 0x80	; 128
    16b0:	88 bb       	out	0x18, r24	; 24
    16b2:	08 95       	ret

000016b4 <_ZN4PinSILh56ELh54ELh55ELh7EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    16b4:	bf 9a       	sbi	0x17, 7	; 23
    16b6:	08 95       	ret

000016b8 <_ZN4PinSILh56ELh54ELh55ELh7EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    16b8:	87 b3       	in	r24, 0x17	; 23
    16ba:	17 ba       	out	0x17, r1	; 23
    16bc:	08 95       	ret

000016be <_ZN4PinSILh50ELh48ELh49ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    16be:	97 9a       	sbi	0x12, 7	; 18
    16c0:	08 95       	ret

000016c2 <_ZN4PinSILh50ELh48ELh49ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    16c2:	97 98       	cbi	0x12, 7	; 18
    16c4:	08 95       	ret

000016c6 <_ZN4PinSILh50ELh48ELh49ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    16c6:	82 b3       	in	r24, 0x12	; 18
    16c8:	80 58       	subi	r24, 0x80	; 128
    16ca:	82 bb       	out	0x12, r24	; 18
    16cc:	08 95       	ret

000016ce <_ZN4PinSILh50ELh48ELh49ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    16ce:	8f 9a       	sbi	0x11, 7	; 17
    16d0:	08 95       	ret

000016d2 <_ZN4PinSILh50ELh48ELh49ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    16d2:	11 ba       	out	0x11, r1	; 17
    16d4:	08 95       	ret

000016d6 <_ZN4PinSILh50ELh48ELh49ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    16d6:	66 23       	and	r22, r22
    16d8:	41 f0       	breq	.+16     	; 0x16ea <_ZN4PinSILh50ELh48ELh49ELh7EE7BoolSetEb+0x14>
			Set();
    16da:	dc 01       	movw	r26, r24
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	06 84       	ldd	r0, Z+14	; 0x0e
    16e2:	f7 85       	ldd	r31, Z+15	; 0x0f
    16e4:	e0 2d       	mov	r30, r0
    16e6:	09 95       	icall
    16e8:	08 95       	ret
		else
			Clear();
    16ea:	dc 01       	movw	r26, r24
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	00 88       	ldd	r0, Z+16	; 0x10
    16f2:	f1 89       	ldd	r31, Z+17	; 0x11
    16f4:	e0 2d       	mov	r30, r0
    16f6:	09 95       	icall
    16f8:	08 95       	ret

000016fa <_ZN4PinSILh50ELh48ELh49ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	87 9b       	sbis	0x10, 7	; 16
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    }
    1700:	08 95       	ret

00001702 <_ZN4PinSILh50ELh48ELh49ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    1702:	97 9a       	sbi	0x12, 7	; 18
    1704:	08 95       	ret

00001706 <_ZN4PinSILh50ELh48ELh49ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    1706:	97 98       	cbi	0x12, 7	; 18
    1708:	08 95       	ret

0000170a <_ZN4PinSILh50ELh48ELh49ELh7EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    170a:	82 b3       	in	r24, 0x12	; 18
    170c:	80 58       	subi	r24, 0x80	; 128
    170e:	82 bb       	out	0x12, r24	; 18
    1710:	08 95       	ret

00001712 <_ZN4PinSILh50ELh48ELh49ELh7EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    1712:	8f 9a       	sbi	0x11, 7	; 17
    1714:	08 95       	ret

00001716 <_ZN4PinSILh50ELh48ELh49ELh7EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    1716:	81 b3       	in	r24, 0x11	; 17
    1718:	11 ba       	out	0x11, r1	; 17
    171a:	08 95       	ret

0000171c <_ZN4PinSILh50ELh48ELh49ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
    {
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    171c:	96 9a       	sbi	0x12, 6	; 18
    171e:	08 95       	ret

00001720 <_ZN4PinSILh50ELh48ELh49ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
    1720:	96 98       	cbi	0x12, 6	; 18
    1722:	08 95       	ret

00001724 <_ZN4PinSILh50ELh48ELh49ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
    1724:	92 b3       	in	r25, 0x12	; 18
    1726:	80 e4       	ldi	r24, 0x40	; 64
    1728:	89 27       	eor	r24, r25
    172a:	82 bb       	out	0x12, r24	; 18
    172c:	08 95       	ret

0000172e <_ZN4PinSILh50ELh48ELh49ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
    172e:	8e 9a       	sbi	0x11, 6	; 17
    1730:	08 95       	ret

00001732 <_ZN4PinSILh50ELh48ELh49ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= !(1 << NOPin);
    1732:	11 ba       	out	0x11, r1	; 17
    1734:	08 95       	ret

00001736 <_ZN4PinSILh50ELh48ELh49ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
    1736:	66 23       	and	r22, r22
    1738:	41 f0       	breq	.+16     	; 0x174a <_ZN4PinSILh50ELh48ELh49ELh6EE7BoolSetEb+0x14>
			Set();
    173a:	dc 01       	movw	r26, r24
    173c:	ed 91       	ld	r30, X+
    173e:	fc 91       	ld	r31, X
    1740:	06 84       	ldd	r0, Z+14	; 0x0e
    1742:	f7 85       	ldd	r31, Z+15	; 0x0f
    1744:	e0 2d       	mov	r30, r0
    1746:	09 95       	icall
    1748:	08 95       	ret
		else
			Clear();
    174a:	dc 01       	movw	r26, r24
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    1750:	00 88       	ldd	r0, Z+16	; 0x10
    1752:	f1 89       	ldd	r31, Z+17	; 0x11
    1754:	e0 2d       	mov	r30, r0
    1756:	09 95       	icall
    1758:	08 95       	ret

0000175a <_ZN4PinSILh50ELh48ELh49ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    175a:	80 b3       	in	r24, 0x10	; 16
    }
    175c:	86 fb       	bst	r24, 6
    175e:	88 27       	eor	r24, r24
    1760:	80 f9       	bld	r24, 0
    1762:	08 95       	ret

00001764 <_ZN4PinSILh50ELh48ELh49ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    1764:	96 9a       	sbi	0x12, 6	; 18
    1766:	08 95       	ret

00001768 <_ZN4PinSILh50ELh48ELh49ELh6EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    1768:	96 98       	cbi	0x12, 6	; 18
    176a:	08 95       	ret

0000176c <_ZN4PinSILh50ELh48ELh49ELh6EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    176c:	92 b3       	in	r25, 0x12	; 18
    176e:	80 e4       	ldi	r24, 0x40	; 64
    1770:	89 27       	eor	r24, r25
    1772:	82 bb       	out	0x12, r24	; 18
    1774:	08 95       	ret

00001776 <_ZN4PinSILh50ELh48ELh49ELh6EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    1776:	8e 9a       	sbi	0x11, 6	; 17
    1778:	08 95       	ret

0000177a <_ZN4PinSILh50ELh48ELh49ELh6EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= !(1 << NOPin);
    177a:	81 b3       	in	r24, 0x11	; 17
    177c:	11 ba       	out	0x11, r1	; 17
    177e:	08 95       	ret

00001780 <_ZN4PinSILh56ELh54ELh55ELh4EED0Ev>:
    1780:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    1784:	08 95       	ret

00001786 <_ZN4PinSILh59ELh57ELh58ELh5EED0Ev>:
    1786:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    178a:	08 95       	ret

0000178c <_ZN4PinSILh59ELh57ELh58ELh4EED0Ev>:
    178c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    1790:	08 95       	ret

00001792 <_ZN4PinSILh59ELh57ELh58ELh3EED0Ev>:
    1792:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    1796:	08 95       	ret

00001798 <_ZN4PinSILh59ELh57ELh58ELh2EED0Ev>:
    1798:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    179c:	08 95       	ret

0000179e <_ZN4PinSILh59ELh57ELh58ELh1EED0Ev>:
    179e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17a2:	08 95       	ret

000017a4 <_ZN4PinSILh59ELh57ELh58ELh0EED0Ev>:
    17a4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17a8:	08 95       	ret

000017aa <_ZN4PinSILh56ELh54ELh55ELh5EED0Ev>:
    17aa:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17ae:	08 95       	ret

000017b0 <_ZN4PinSILh56ELh54ELh55ELh6EED0Ev>:
    17b0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17b4:	08 95       	ret

000017b6 <_ZN4PinSILh56ELh54ELh55ELh7EED0Ev>:
    17b6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17ba:	08 95       	ret

000017bc <_ZN4PinSILh50ELh48ELh49ELh7EED0Ev>:
    17bc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17c0:	08 95       	ret

000017c2 <_ZN4PinSILh50ELh48ELh49ELh6EED0Ev>:
    17c2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <free>
    17c6:	08 95       	ret

000017c8 <__tablejump2__>:
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	05 90       	lpm	r0, Z+
    17ce:	f4 91       	lpm	r31, Z
    17d0:	e0 2d       	mov	r30, r0
    17d2:	09 94       	ijmp

000017d4 <malloc>:
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	91 05       	cpc	r25, r1
    17dc:	10 f4       	brcc	.+4      	; 0x17e2 <malloc+0xe>
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	e0 91 76 02 	lds	r30, 0x0276
    17e6:	f0 91 77 02 	lds	r31, 0x0277
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	c0 e0       	ldi	r28, 0x00	; 0
    17f0:	d0 e0       	ldi	r29, 0x00	; 0
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	11 f1       	breq	.+68     	; 0x183a <malloc+0x66>
    17f6:	40 81       	ld	r20, Z
    17f8:	51 81       	ldd	r21, Z+1	; 0x01
    17fa:	48 17       	cp	r20, r24
    17fc:	59 07       	cpc	r21, r25
    17fe:	c0 f0       	brcs	.+48     	; 0x1830 <malloc+0x5c>
    1800:	48 17       	cp	r20, r24
    1802:	59 07       	cpc	r21, r25
    1804:	61 f4       	brne	.+24     	; 0x181e <malloc+0x4a>
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	20 97       	sbiw	r28, 0x00	; 0
    180c:	19 f0       	breq	.+6      	; 0x1814 <malloc+0x40>
    180e:	9b 83       	std	Y+3, r25	; 0x03
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	2b c0       	rjmp	.+86     	; 0x186a <malloc+0x96>
    1814:	90 93 77 02 	sts	0x0277, r25
    1818:	80 93 76 02 	sts	0x0276, r24
    181c:	26 c0       	rjmp	.+76     	; 0x186a <malloc+0x96>
    181e:	21 15       	cp	r18, r1
    1820:	31 05       	cpc	r19, r1
    1822:	19 f0       	breq	.+6      	; 0x182a <malloc+0x56>
    1824:	42 17       	cp	r20, r18
    1826:	53 07       	cpc	r21, r19
    1828:	18 f4       	brcc	.+6      	; 0x1830 <malloc+0x5c>
    182a:	9a 01       	movw	r18, r20
    182c:	be 01       	movw	r22, r28
    182e:	df 01       	movw	r26, r30
    1830:	ef 01       	movw	r28, r30
    1832:	02 80       	ldd	r0, Z+2	; 0x02
    1834:	f3 81       	ldd	r31, Z+3	; 0x03
    1836:	e0 2d       	mov	r30, r0
    1838:	dc cf       	rjmp	.-72     	; 0x17f2 <malloc+0x1e>
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	09 f1       	breq	.+66     	; 0x1882 <malloc+0xae>
    1840:	28 1b       	sub	r18, r24
    1842:	39 0b       	sbc	r19, r25
    1844:	24 30       	cpi	r18, 0x04	; 4
    1846:	31 05       	cpc	r19, r1
    1848:	90 f4       	brcc	.+36     	; 0x186e <malloc+0x9a>
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	8d 91       	ld	r24, X+
    184e:	9c 91       	ld	r25, X
    1850:	13 97       	sbiw	r26, 0x03	; 3
    1852:	61 15       	cp	r22, r1
    1854:	71 05       	cpc	r23, r1
    1856:	21 f0       	breq	.+8      	; 0x1860 <malloc+0x8c>
    1858:	fb 01       	movw	r30, r22
    185a:	93 83       	std	Z+3, r25	; 0x03
    185c:	82 83       	std	Z+2, r24	; 0x02
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <malloc+0x94>
    1860:	90 93 77 02 	sts	0x0277, r25
    1864:	80 93 76 02 	sts	0x0276, r24
    1868:	fd 01       	movw	r30, r26
    186a:	32 96       	adiw	r30, 0x02	; 2
    186c:	44 c0       	rjmp	.+136    	; 0x18f6 <malloc+0x122>
    186e:	fd 01       	movw	r30, r26
    1870:	e2 0f       	add	r30, r18
    1872:	f3 1f       	adc	r31, r19
    1874:	81 93       	st	Z+, r24
    1876:	91 93       	st	Z+, r25
    1878:	22 50       	subi	r18, 0x02	; 2
    187a:	31 09       	sbc	r19, r1
    187c:	2d 93       	st	X+, r18
    187e:	3c 93       	st	X, r19
    1880:	3a c0       	rjmp	.+116    	; 0x18f6 <malloc+0x122>
    1882:	20 91 74 02 	lds	r18, 0x0274
    1886:	30 91 75 02 	lds	r19, 0x0275
    188a:	23 2b       	or	r18, r19
    188c:	41 f4       	brne	.+16     	; 0x189e <malloc+0xca>
    188e:	20 91 7a 00 	lds	r18, 0x007A
    1892:	30 91 7b 00 	lds	r19, 0x007B
    1896:	30 93 75 02 	sts	0x0275, r19
    189a:	20 93 74 02 	sts	0x0274, r18
    189e:	20 91 78 00 	lds	r18, 0x0078
    18a2:	30 91 79 00 	lds	r19, 0x0079
    18a6:	21 15       	cp	r18, r1
    18a8:	31 05       	cpc	r19, r1
    18aa:	41 f4       	brne	.+16     	; 0x18bc <malloc+0xe8>
    18ac:	2d b7       	in	r18, 0x3d	; 61
    18ae:	3e b7       	in	r19, 0x3e	; 62
    18b0:	40 91 7c 00 	lds	r20, 0x007C
    18b4:	50 91 7d 00 	lds	r21, 0x007D
    18b8:	24 1b       	sub	r18, r20
    18ba:	35 0b       	sbc	r19, r21
    18bc:	e0 91 74 02 	lds	r30, 0x0274
    18c0:	f0 91 75 02 	lds	r31, 0x0275
    18c4:	e2 17       	cp	r30, r18
    18c6:	f3 07       	cpc	r31, r19
    18c8:	a0 f4       	brcc	.+40     	; 0x18f2 <malloc+0x11e>
    18ca:	2e 1b       	sub	r18, r30
    18cc:	3f 0b       	sbc	r19, r31
    18ce:	28 17       	cp	r18, r24
    18d0:	39 07       	cpc	r19, r25
    18d2:	78 f0       	brcs	.+30     	; 0x18f2 <malloc+0x11e>
    18d4:	ac 01       	movw	r20, r24
    18d6:	4e 5f       	subi	r20, 0xFE	; 254
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	24 17       	cp	r18, r20
    18dc:	35 07       	cpc	r19, r21
    18de:	48 f0       	brcs	.+18     	; 0x18f2 <malloc+0x11e>
    18e0:	4e 0f       	add	r20, r30
    18e2:	5f 1f       	adc	r21, r31
    18e4:	50 93 75 02 	sts	0x0275, r21
    18e8:	40 93 74 02 	sts	0x0274, r20
    18ec:	81 93       	st	Z+, r24
    18ee:	91 93       	st	Z+, r25
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <malloc+0x122>
    18f2:	e0 e0       	ldi	r30, 0x00	; 0
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	cf 01       	movw	r24, r30
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <free>:
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	09 f4       	brne	.+2      	; 0x190c <free+0xe>
    190a:	8c c0       	rjmp	.+280    	; 0x1a24 <free+0x126>
    190c:	fc 01       	movw	r30, r24
    190e:	32 97       	sbiw	r30, 0x02	; 2
    1910:	13 82       	std	Z+3, r1	; 0x03
    1912:	12 82       	std	Z+2, r1	; 0x02
    1914:	00 91 76 02 	lds	r16, 0x0276
    1918:	10 91 77 02 	lds	r17, 0x0277
    191c:	01 15       	cp	r16, r1
    191e:	11 05       	cpc	r17, r1
    1920:	81 f4       	brne	.+32     	; 0x1942 <free+0x44>
    1922:	20 81       	ld	r18, Z
    1924:	31 81       	ldd	r19, Z+1	; 0x01
    1926:	82 0f       	add	r24, r18
    1928:	93 1f       	adc	r25, r19
    192a:	20 91 74 02 	lds	r18, 0x0274
    192e:	30 91 75 02 	lds	r19, 0x0275
    1932:	28 17       	cp	r18, r24
    1934:	39 07       	cpc	r19, r25
    1936:	79 f5       	brne	.+94     	; 0x1996 <free+0x98>
    1938:	f0 93 75 02 	sts	0x0275, r31
    193c:	e0 93 74 02 	sts	0x0274, r30
    1940:	71 c0       	rjmp	.+226    	; 0x1a24 <free+0x126>
    1942:	d8 01       	movw	r26, r16
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	ae 17       	cp	r26, r30
    194a:	bf 07       	cpc	r27, r31
    194c:	50 f4       	brcc	.+20     	; 0x1962 <free+0x64>
    194e:	12 96       	adiw	r26, 0x02	; 2
    1950:	2d 91       	ld	r18, X+
    1952:	3c 91       	ld	r19, X
    1954:	13 97       	sbiw	r26, 0x03	; 3
    1956:	ad 01       	movw	r20, r26
    1958:	21 15       	cp	r18, r1
    195a:	31 05       	cpc	r19, r1
    195c:	09 f1       	breq	.+66     	; 0x19a0 <free+0xa2>
    195e:	d9 01       	movw	r26, r18
    1960:	f3 cf       	rjmp	.-26     	; 0x1948 <free+0x4a>
    1962:	9d 01       	movw	r18, r26
    1964:	da 01       	movw	r26, r20
    1966:	33 83       	std	Z+3, r19	; 0x03
    1968:	22 83       	std	Z+2, r18	; 0x02
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	86 0f       	add	r24, r22
    1970:	97 1f       	adc	r25, r23
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	69 f4       	brne	.+26     	; 0x1992 <free+0x94>
    1978:	ec 01       	movw	r28, r24
    197a:	28 81       	ld	r18, Y
    197c:	39 81       	ldd	r19, Y+1	; 0x01
    197e:	26 0f       	add	r18, r22
    1980:	37 1f       	adc	r19, r23
    1982:	2e 5f       	subi	r18, 0xFE	; 254
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	31 83       	std	Z+1, r19	; 0x01
    1988:	20 83       	st	Z, r18
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	45 2b       	or	r20, r21
    1994:	29 f4       	brne	.+10     	; 0x19a0 <free+0xa2>
    1996:	f0 93 77 02 	sts	0x0277, r31
    199a:	e0 93 76 02 	sts	0x0276, r30
    199e:	42 c0       	rjmp	.+132    	; 0x1a24 <free+0x126>
    19a0:	13 96       	adiw	r26, 0x03	; 3
    19a2:	fc 93       	st	X, r31
    19a4:	ee 93       	st	-X, r30
    19a6:	12 97       	sbiw	r26, 0x02	; 2
    19a8:	ed 01       	movw	r28, r26
    19aa:	49 91       	ld	r20, Y+
    19ac:	59 91       	ld	r21, Y+
    19ae:	9e 01       	movw	r18, r28
    19b0:	24 0f       	add	r18, r20
    19b2:	35 1f       	adc	r19, r21
    19b4:	e2 17       	cp	r30, r18
    19b6:	f3 07       	cpc	r31, r19
    19b8:	71 f4       	brne	.+28     	; 0x19d6 <free+0xd8>
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	84 0f       	add	r24, r20
    19c0:	95 1f       	adc	r25, r21
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	9c 93       	st	X, r25
    19c8:	8e 93       	st	-X, r24
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	13 96       	adiw	r26, 0x03	; 3
    19d0:	9c 93       	st	X, r25
    19d2:	8e 93       	st	-X, r24
    19d4:	12 97       	sbiw	r26, 0x02	; 2
    19d6:	e0 e0       	ldi	r30, 0x00	; 0
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	d8 01       	movw	r26, r16
    19dc:	12 96       	adiw	r26, 0x02	; 2
    19de:	8d 91       	ld	r24, X+
    19e0:	9c 91       	ld	r25, X
    19e2:	13 97       	sbiw	r26, 0x03	; 3
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	19 f0       	breq	.+6      	; 0x19ee <free+0xf0>
    19e8:	f8 01       	movw	r30, r16
    19ea:	8c 01       	movw	r16, r24
    19ec:	f6 cf       	rjmp	.-20     	; 0x19da <free+0xdc>
    19ee:	8d 91       	ld	r24, X+
    19f0:	9c 91       	ld	r25, X
    19f2:	98 01       	movw	r18, r16
    19f4:	2e 5f       	subi	r18, 0xFE	; 254
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	82 0f       	add	r24, r18
    19fa:	93 1f       	adc	r25, r19
    19fc:	20 91 74 02 	lds	r18, 0x0274
    1a00:	30 91 75 02 	lds	r19, 0x0275
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	69 f4       	brne	.+26     	; 0x1a24 <free+0x126>
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <free+0x11a>
    1a0e:	10 92 77 02 	sts	0x0277, r1
    1a12:	10 92 76 02 	sts	0x0276, r1
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <free+0x11e>
    1a18:	13 82       	std	Z+3, r1	; 0x03
    1a1a:	12 82       	std	Z+2, r1	; 0x02
    1a1c:	10 93 75 02 	sts	0x0275, r17
    1a20:	00 93 74 02 	sts	0x0274, r16
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <eeprom_read_block>:
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22

00001a32 <eeprom_read_blraw>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	e1 99       	sbic	0x1c, 1	; 28
    1a36:	fe cf       	rjmp	.-4      	; 0x1a34 <eeprom_read_blraw+0x2>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <eeprom_read_blraw+0x14>
    1a3a:	ff bb       	out	0x1f, r31	; 31
    1a3c:	ee bb       	out	0x1e, r30	; 30
    1a3e:	e0 9a       	sbi	0x1c, 0	; 28
    1a40:	31 96       	adiw	r30, 0x01	; 1
    1a42:	0d b2       	in	r0, 0x1d	; 29
    1a44:	0d 92       	st	X+, r0
    1a46:	41 50       	subi	r20, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	b8 f7       	brcc	.-18     	; 0x1a3a <eeprom_read_blraw+0x8>
    1a4c:	08 95       	ret

00001a4e <eeprom_read_byte>:
    1a4e:	e1 99       	sbic	0x1c, 1	; 28
    1a50:	fe cf       	rjmp	.-4      	; 0x1a4e <eeprom_read_byte>
    1a52:	9f bb       	out	0x1f, r25	; 31
    1a54:	8e bb       	out	0x1e, r24	; 30
    1a56:	e0 9a       	sbi	0x1c, 0	; 28
    1a58:	99 27       	eor	r25, r25
    1a5a:	8d b3       	in	r24, 0x1d	; 29
    1a5c:	08 95       	ret

00001a5e <__do_global_dtors>:
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	cb e2       	ldi	r28, 0x2B	; 43
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <__do_global_dtors+0x10>
    1a66:	fe 01       	movw	r30, r28
    1a68:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__tablejump2__>
    1a6c:	21 96       	adiw	r28, 0x01	; 1
    1a6e:	cc 32       	cpi	r28, 0x2C	; 44
    1a70:	d1 07       	cpc	r29, r17
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__do_global_dtors+0x8>
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
