
MotorServoController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004b4  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800066  00800066  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f3  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000444  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a0  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e9a  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021b  00000000  00000000  00009632  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000984d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000062d  00000000  00000000  000098bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_19>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	1c 01       	movw	r2, r24

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e4 eb       	ldi	r30, 0xB4	; 180
  6a:	f4 e0       	ldi	r31, 0x04	; 4
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a6 36       	cpi	r26, 0x66	; 102
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a6 e6       	ldi	r26, 0x66	; 102
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ae 37       	cpi	r26, 0x7E	; 126
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 25 01 	call	0x24a	; 0x24a <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  a2:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z26LedBlinkPerDelayVariableMsv>:
volatile static int16_t ledCounter = 0;
volatile static int16_t DelayMs = 100;


void LedBlinkPerDelayVariableMs(){
++ledCounter;
  aa:	80 91 78 00 	lds	r24, 0x0078
  ae:	90 91 79 00 	lds	r25, 0x0079
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 79 00 	sts	0x0079, r25
  b8:	80 93 78 00 	sts	0x0078, r24
	if (ledCounter > 5)
  bc:	80 91 78 00 	lds	r24, 0x0078
  c0:	90 91 79 00 	lds	r25, 0x0079
  c4:	06 97       	sbiw	r24, 0x06	; 6
  c6:	44 f0       	brlt	.+16     	; 0xd8 <_Z26LedBlinkPerDelayVariableMsv+0x2e>
	{
		ledCounter = 0;
  c8:	10 92 79 00 	sts	0x0079, r1
  cc:	10 92 78 00 	sts	0x0078, r1
		    PORTB &= ~(1<<1);
	    }

	    void static Toggle()
	    {
		    PORTB ^= (1<<1);
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	89 27       	eor	r24, r25
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	08 95       	ret

000000da <_Znwj>:
#include "util/delay.h"
#include "Async.h"

void * operator new(size_t size)
{
	return malloc(size);
  da:	0c 94 2b 01 	jmp	0x256	; 0x256 <malloc>

000000de <_ZdlPv>:
}

void operator delete(void * ptr)
{
	free(ptr);
  de:	0c 94 c0 01 	jmp	0x380	; 0x380 <free>

000000e2 <__vector_19>:
}
using namespace CodeEasyAvr; 

Async::TaskManager taskmanager;

ISR(TIMER0_COMP_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	}
}

void Invoke()
{
	if (actions[currentTask] != nullptr)
 104:	80 91 77 00 	lds	r24, 0x0077
 108:	e8 2f       	mov	r30, r24
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e9 59       	subi	r30, 0x99	; 153
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	01 90       	ld	r0, Z+
 116:	f0 81       	ld	r31, Z
 118:	e0 2d       	mov	r30, r0
 11a:	30 97       	sbiw	r30, 0x00	; 0
 11c:	19 f0       	breq	.+6      	; 0x124 <__vector_19+0x42>
	{
		(actions[currentTask])();
 11e:	09 95       	icall
 120:	80 91 77 00 	lds	r24, 0x0077
			}
		}

void GetNext()
{
	++currentTask;
 124:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentTask >= NumberOfActions)
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	a0 f0       	brcs	.+40     	; 0x152 <__vector_19+0x70>
	{
		currentTask = 0;
 12a:	10 92 77 00 	sts	0x0077, r1
taskmanager.Invoke();
	TCNT0 = 0;
 12e:	12 be       	out	0x32, r1	; 50
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti
			}
		}

void GetNext()
{
	++currentTask;
 152:	80 93 77 00 	sts	0x0077, r24
 156:	eb cf       	rjmp	.-42     	; 0x12e <__vector_19+0x4c>

00000158 <_ZN5Async10StartAsyncEv>:
	static void ResetPrescaler(){
	SET(SFIOR,(1<<PSR10));
	}

	static void SetPrescaler(Prescalers prescaler){
		CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
 158:	83 b7       	in	r24, 0x33	; 51
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,(uint8_t)prescaler);
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	84 60       	ori	r24, 0x04	; 4
 162:	83 bf       	out	0x33, r24	; 51
	};

	class Timer0{
	public:
			void static SetCompareValue(uint8_t compareRegisterValue){
			OCR0 = compareRegisterValue;
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	8c bf       	out	0x3c, r24	; 60
	static void SetPrescaler(Prescalers prescaler){
		CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
		SET(TCCR0,(uint8_t)prescaler);
	}
	static void WaveFormMode(WaveForms waveForms){
		CLEAR(TCCR0,(1<<WGM01)||(1<<WGM00));
 168:	83 b7       	in	r24, 0x33	; 51
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,(uint8_t)waveForms);
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	81 60       	ori	r24, 0x01	; 1
 172:	83 bf       	out	0x33, r24	; 51
			CompareAndOverFlowInterrupts = (OverFlowInterrupt||OverFlowInterrupt),
			AllBitsSet = CompareAndOverFlowInterrupts
			};

			volatile void static SetInterrupts(InterruptMask interrupt){
			CLEAR(TIMSK,(TOIE0,OCIE0));
 174:	89 b7       	in	r24, 0x39	; 57
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	89 bf       	out	0x39, r24	; 57
			TIMSK |= interrupt;
 17a:	89 b7       	in	r24, 0x39	; 57
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	89 bf       	out	0x39, r24	; 57
	Timer0::WaveFormMode(Timer0::WaveForms::CTC);
		
	Timer0::SetInterrupts(CodeEasyAvr::Timer0::CompareMatchInterrupt);


		sei();
 180:	78 94       	sei

	TCNT0 = 0;
 182:	12 be       	out	0x32, r1	; 50
 184:	08 95       	ret

00000186 <main>:
		    PORTB |= 1 << 0;
	    }

	    void static Clear()
	    {
		    PORTB &= ~(1<<0);
 186:	c0 98       	cbi	0x18, 0	; 24
		    return ((PINB >> 0) & 1);
	    }

	    void static AsOutput()
	    {
		    DDRB |= (1<<0);
 188:	b8 9a       	sbi	0x17, 0	; 23
		    return ((PINB >> 1) & 1);
	    }

	    void static AsOutput()
	    {
		    DDRB |= (1<<1);
 18a:	b9 9a       	sbi	0x17, 1	; 23
{
	uint8_t firstFreeIndicator = 0;

	for (; firstFreeIndicator < NumberOfActions; ++firstFreeIndicator)
	{
		if (actions[firstFreeIndicator] == nullptr)
 18c:	80 91 67 00 	lds	r24, 0x0067
 190:	90 91 68 00 	lds	r25, 0x0068
 194:	89 2b       	or	r24, r25
 196:	09 f4       	brne	.+2      	; 0x19a <main+0x14>
 198:	4c c0       	rjmp	.+152    	; 0x232 <main+0xac>
 19a:	80 91 69 00 	lds	r24, 0x0069
 19e:	90 91 6a 00 	lds	r25, 0x006A
 1a2:	89 2b       	or	r24, r25
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <main+0x22>
 1a6:	42 c0       	rjmp	.+132    	; 0x22c <main+0xa6>
 1a8:	80 91 6b 00 	lds	r24, 0x006B
 1ac:	90 91 6c 00 	lds	r25, 0x006C
 1b0:	89 2b       	or	r24, r25
 1b2:	c9 f1       	breq	.+114    	; 0x226 <main+0xa0>
 1b4:	80 91 6d 00 	lds	r24, 0x006D
 1b8:	90 91 6e 00 	lds	r25, 0x006E
 1bc:	89 2b       	or	r24, r25
 1be:	81 f1       	breq	.+96     	; 0x220 <main+0x9a>
 1c0:	80 91 6f 00 	lds	r24, 0x006F
 1c4:	90 91 70 00 	lds	r25, 0x0070
 1c8:	89 2b       	or	r24, r25
 1ca:	39 f1       	breq	.+78     	; 0x21a <main+0x94>
 1cc:	80 91 71 00 	lds	r24, 0x0071
 1d0:	90 91 72 00 	lds	r25, 0x0072
 1d4:	89 2b       	or	r24, r25
 1d6:	f1 f0       	breq	.+60     	; 0x214 <main+0x8e>
 1d8:	80 91 73 00 	lds	r24, 0x0073
 1dc:	90 91 74 00 	lds	r25, 0x0074
 1e0:	89 2b       	or	r24, r25
 1e2:	a9 f0       	breq	.+42     	; 0x20e <main+0x88>
 1e4:	80 91 75 00 	lds	r24, 0x0075
 1e8:	90 91 76 00 	lds	r25, 0x0076
 1ec:	89 2b       	or	r24, r25
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <main+0x70>

	Task task;
	task.currentMethod = &LedBlinkPerDelayVariableMs;
	taskmanager.Register(task);

	Async::StartAsync();
 1f0:	0e 94 ac 00 	call	0x158	; 0x158 <_ZN5Async10StartAsyncEv>




	while(1);
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x6e>
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	90 e0       	ldi	r25, 0x00	; 0



void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	actions[positionIndicator] = (task.currentMethod);
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	fc 01       	movw	r30, r24
 200:	e9 59       	subi	r30, 0x99	; 153
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	85 e5       	ldi	r24, 0x55	; 85
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
 20c:	f1 cf       	rjmp	.-30     	; 0x1f0 <main+0x6a>
{
	uint8_t firstFreeIndicator = 0;

	for (; firstFreeIndicator < NumberOfActions; ++firstFreeIndicator)
	{
		if (actions[firstFreeIndicator] == nullptr)
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	f3 cf       	rjmp	.-26     	; 0x1fa <main+0x74>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	f0 cf       	rjmp	.-32     	; 0x1fa <main+0x74>
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ed cf       	rjmp	.-38     	; 0x1fa <main+0x74>
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ea cf       	rjmp	.-44     	; 0x1fa <main+0x74>
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	e7 cf       	rjmp	.-50     	; 0x1fa <main+0x74>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	e4 cf       	rjmp	.-56     	; 0x1fa <main+0x74>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	e1 cf       	rjmp	.-62     	; 0x1fa <main+0x74>

00000238 <_GLOBAL__sub_I__Znwj>:
	public:
		Action actions[NumberOfActions];
		uint8_t currentTask;
		TaskManager()
		{
			currentTask = 0;
 238:	e7 e6       	ldi	r30, 0x67	; 103
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	10 8a       	std	Z+16, r1	; 0x10
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	df 01       	movw	r26, r30
 242:	1d 92       	st	X+, r1
 244:	8a 95       	dec	r24
 246:	e9 f7       	brne	.-6      	; 0x242 <_GLOBAL__sub_I__Znwj+0xa>
 248:	08 95       	ret

0000024a <__tablejump2__>:
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	05 90       	lpm	r0, Z+
 250:	f4 91       	lpm	r31, Z
 252:	e0 2d       	mov	r30, r0
 254:	09 94       	ijmp

00000256 <malloc>:
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	10 f4       	brcc	.+4      	; 0x264 <malloc+0xe>
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	e0 91 7c 00 	lds	r30, 0x007C
 268:	f0 91 7d 00 	lds	r31, 0x007D
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	30 97       	sbiw	r30, 0x00	; 0
 276:	11 f1       	breq	.+68     	; 0x2bc <malloc+0x66>
 278:	40 81       	ld	r20, Z
 27a:	51 81       	ldd	r21, Z+1	; 0x01
 27c:	48 17       	cp	r20, r24
 27e:	59 07       	cpc	r21, r25
 280:	c0 f0       	brcs	.+48     	; 0x2b2 <malloc+0x5c>
 282:	48 17       	cp	r20, r24
 284:	59 07       	cpc	r21, r25
 286:	61 f4       	brne	.+24     	; 0x2a0 <malloc+0x4a>
 288:	82 81       	ldd	r24, Z+2	; 0x02
 28a:	93 81       	ldd	r25, Z+3	; 0x03
 28c:	20 97       	sbiw	r28, 0x00	; 0
 28e:	19 f0       	breq	.+6      	; 0x296 <malloc+0x40>
 290:	9b 83       	std	Y+3, r25	; 0x03
 292:	8a 83       	std	Y+2, r24	; 0x02
 294:	2b c0       	rjmp	.+86     	; 0x2ec <malloc+0x96>
 296:	90 93 7d 00 	sts	0x007D, r25
 29a:	80 93 7c 00 	sts	0x007C, r24
 29e:	26 c0       	rjmp	.+76     	; 0x2ec <malloc+0x96>
 2a0:	21 15       	cp	r18, r1
 2a2:	31 05       	cpc	r19, r1
 2a4:	19 f0       	breq	.+6      	; 0x2ac <malloc+0x56>
 2a6:	42 17       	cp	r20, r18
 2a8:	53 07       	cpc	r21, r19
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <malloc+0x5c>
 2ac:	9a 01       	movw	r18, r20
 2ae:	be 01       	movw	r22, r28
 2b0:	df 01       	movw	r26, r30
 2b2:	ef 01       	movw	r28, r30
 2b4:	02 80       	ldd	r0, Z+2	; 0x02
 2b6:	f3 81       	ldd	r31, Z+3	; 0x03
 2b8:	e0 2d       	mov	r30, r0
 2ba:	dc cf       	rjmp	.-72     	; 0x274 <malloc+0x1e>
 2bc:	21 15       	cp	r18, r1
 2be:	31 05       	cpc	r19, r1
 2c0:	09 f1       	breq	.+66     	; 0x304 <malloc+0xae>
 2c2:	28 1b       	sub	r18, r24
 2c4:	39 0b       	sbc	r19, r25
 2c6:	24 30       	cpi	r18, 0x04	; 4
 2c8:	31 05       	cpc	r19, r1
 2ca:	90 f4       	brcc	.+36     	; 0x2f0 <malloc+0x9a>
 2cc:	12 96       	adiw	r26, 0x02	; 2
 2ce:	8d 91       	ld	r24, X+
 2d0:	9c 91       	ld	r25, X
 2d2:	13 97       	sbiw	r26, 0x03	; 3
 2d4:	61 15       	cp	r22, r1
 2d6:	71 05       	cpc	r23, r1
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <malloc+0x8c>
 2da:	fb 01       	movw	r30, r22
 2dc:	93 83       	std	Z+3, r25	; 0x03
 2de:	82 83       	std	Z+2, r24	; 0x02
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <malloc+0x94>
 2e2:	90 93 7d 00 	sts	0x007D, r25
 2e6:	80 93 7c 00 	sts	0x007C, r24
 2ea:	fd 01       	movw	r30, r26
 2ec:	32 96       	adiw	r30, 0x02	; 2
 2ee:	44 c0       	rjmp	.+136    	; 0x378 <malloc+0x122>
 2f0:	fd 01       	movw	r30, r26
 2f2:	e2 0f       	add	r30, r18
 2f4:	f3 1f       	adc	r31, r19
 2f6:	81 93       	st	Z+, r24
 2f8:	91 93       	st	Z+, r25
 2fa:	22 50       	subi	r18, 0x02	; 2
 2fc:	31 09       	sbc	r19, r1
 2fe:	2d 93       	st	X+, r18
 300:	3c 93       	st	X, r19
 302:	3a c0       	rjmp	.+116    	; 0x378 <malloc+0x122>
 304:	20 91 7a 00 	lds	r18, 0x007A
 308:	30 91 7b 00 	lds	r19, 0x007B
 30c:	23 2b       	or	r18, r19
 30e:	41 f4       	brne	.+16     	; 0x320 <malloc+0xca>
 310:	20 91 62 00 	lds	r18, 0x0062
 314:	30 91 63 00 	lds	r19, 0x0063
 318:	30 93 7b 00 	sts	0x007B, r19
 31c:	20 93 7a 00 	sts	0x007A, r18
 320:	20 91 60 00 	lds	r18, 0x0060
 324:	30 91 61 00 	lds	r19, 0x0061
 328:	21 15       	cp	r18, r1
 32a:	31 05       	cpc	r19, r1
 32c:	41 f4       	brne	.+16     	; 0x33e <malloc+0xe8>
 32e:	2d b7       	in	r18, 0x3d	; 61
 330:	3e b7       	in	r19, 0x3e	; 62
 332:	40 91 64 00 	lds	r20, 0x0064
 336:	50 91 65 00 	lds	r21, 0x0065
 33a:	24 1b       	sub	r18, r20
 33c:	35 0b       	sbc	r19, r21
 33e:	e0 91 7a 00 	lds	r30, 0x007A
 342:	f0 91 7b 00 	lds	r31, 0x007B
 346:	e2 17       	cp	r30, r18
 348:	f3 07       	cpc	r31, r19
 34a:	a0 f4       	brcc	.+40     	; 0x374 <malloc+0x11e>
 34c:	2e 1b       	sub	r18, r30
 34e:	3f 0b       	sbc	r19, r31
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	78 f0       	brcs	.+30     	; 0x374 <malloc+0x11e>
 356:	ac 01       	movw	r20, r24
 358:	4e 5f       	subi	r20, 0xFE	; 254
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	24 17       	cp	r18, r20
 35e:	35 07       	cpc	r19, r21
 360:	48 f0       	brcs	.+18     	; 0x374 <malloc+0x11e>
 362:	4e 0f       	add	r20, r30
 364:	5f 1f       	adc	r21, r31
 366:	50 93 7b 00 	sts	0x007B, r21
 36a:	40 93 7a 00 	sts	0x007A, r20
 36e:	81 93       	st	Z+, r24
 370:	91 93       	st	Z+, r25
 372:	02 c0       	rjmp	.+4      	; 0x378 <malloc+0x122>
 374:	e0 e0       	ldi	r30, 0x00	; 0
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	cf 01       	movw	r24, r30
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <free>:
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	09 f4       	brne	.+2      	; 0x38e <free+0xe>
 38c:	8c c0       	rjmp	.+280    	; 0x4a6 <__stack+0x47>
 38e:	fc 01       	movw	r30, r24
 390:	32 97       	sbiw	r30, 0x02	; 2
 392:	13 82       	std	Z+3, r1	; 0x03
 394:	12 82       	std	Z+2, r1	; 0x02
 396:	00 91 7c 00 	lds	r16, 0x007C
 39a:	10 91 7d 00 	lds	r17, 0x007D
 39e:	01 15       	cp	r16, r1
 3a0:	11 05       	cpc	r17, r1
 3a2:	81 f4       	brne	.+32     	; 0x3c4 <free+0x44>
 3a4:	20 81       	ld	r18, Z
 3a6:	31 81       	ldd	r19, Z+1	; 0x01
 3a8:	82 0f       	add	r24, r18
 3aa:	93 1f       	adc	r25, r19
 3ac:	20 91 7a 00 	lds	r18, 0x007A
 3b0:	30 91 7b 00 	lds	r19, 0x007B
 3b4:	28 17       	cp	r18, r24
 3b6:	39 07       	cpc	r19, r25
 3b8:	79 f5       	brne	.+94     	; 0x418 <free+0x98>
 3ba:	f0 93 7b 00 	sts	0x007B, r31
 3be:	e0 93 7a 00 	sts	0x007A, r30
 3c2:	71 c0       	rjmp	.+226    	; 0x4a6 <__stack+0x47>
 3c4:	d8 01       	movw	r26, r16
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	ae 17       	cp	r26, r30
 3cc:	bf 07       	cpc	r27, r31
 3ce:	50 f4       	brcc	.+20     	; 0x3e4 <free+0x64>
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	2d 91       	ld	r18, X+
 3d4:	3c 91       	ld	r19, X
 3d6:	13 97       	sbiw	r26, 0x03	; 3
 3d8:	ad 01       	movw	r20, r26
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	09 f1       	breq	.+66     	; 0x422 <free+0xa2>
 3e0:	d9 01       	movw	r26, r18
 3e2:	f3 cf       	rjmp	.-26     	; 0x3ca <free+0x4a>
 3e4:	9d 01       	movw	r18, r26
 3e6:	da 01       	movw	r26, r20
 3e8:	33 83       	std	Z+3, r19	; 0x03
 3ea:	22 83       	std	Z+2, r18	; 0x02
 3ec:	60 81       	ld	r22, Z
 3ee:	71 81       	ldd	r23, Z+1	; 0x01
 3f0:	86 0f       	add	r24, r22
 3f2:	97 1f       	adc	r25, r23
 3f4:	82 17       	cp	r24, r18
 3f6:	93 07       	cpc	r25, r19
 3f8:	69 f4       	brne	.+26     	; 0x414 <free+0x94>
 3fa:	ec 01       	movw	r28, r24
 3fc:	28 81       	ld	r18, Y
 3fe:	39 81       	ldd	r19, Y+1	; 0x01
 400:	26 0f       	add	r18, r22
 402:	37 1f       	adc	r19, r23
 404:	2e 5f       	subi	r18, 0xFE	; 254
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	31 83       	std	Z+1, r19	; 0x01
 40a:	20 83       	st	Z, r18
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	9b 81       	ldd	r25, Y+3	; 0x03
 410:	93 83       	std	Z+3, r25	; 0x03
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	45 2b       	or	r20, r21
 416:	29 f4       	brne	.+10     	; 0x422 <free+0xa2>
 418:	f0 93 7d 00 	sts	0x007D, r31
 41c:	e0 93 7c 00 	sts	0x007C, r30
 420:	42 c0       	rjmp	.+132    	; 0x4a6 <__stack+0x47>
 422:	13 96       	adiw	r26, 0x03	; 3
 424:	fc 93       	st	X, r31
 426:	ee 93       	st	-X, r30
 428:	12 97       	sbiw	r26, 0x02	; 2
 42a:	ed 01       	movw	r28, r26
 42c:	49 91       	ld	r20, Y+
 42e:	59 91       	ld	r21, Y+
 430:	9e 01       	movw	r18, r28
 432:	24 0f       	add	r18, r20
 434:	35 1f       	adc	r19, r21
 436:	e2 17       	cp	r30, r18
 438:	f3 07       	cpc	r31, r19
 43a:	71 f4       	brne	.+28     	; 0x458 <free+0xd8>
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	84 0f       	add	r24, r20
 442:	95 1f       	adc	r25, r21
 444:	02 96       	adiw	r24, 0x02	; 2
 446:	11 96       	adiw	r26, 0x01	; 1
 448:	9c 93       	st	X, r25
 44a:	8e 93       	st	-X, r24
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	93 81       	ldd	r25, Z+3	; 0x03
 450:	13 96       	adiw	r26, 0x03	; 3
 452:	9c 93       	st	X, r25
 454:	8e 93       	st	-X, r24
 456:	12 97       	sbiw	r26, 0x02	; 2
 458:	e0 e0       	ldi	r30, 0x00	; 0
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	d8 01       	movw	r26, r16
 45e:	12 96       	adiw	r26, 0x02	; 2
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	13 97       	sbiw	r26, 0x03	; 3
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	19 f0       	breq	.+6      	; 0x470 <__stack+0x11>
 46a:	f8 01       	movw	r30, r16
 46c:	8c 01       	movw	r16, r24
 46e:	f6 cf       	rjmp	.-20     	; 0x45c <free+0xdc>
 470:	8d 91       	ld	r24, X+
 472:	9c 91       	ld	r25, X
 474:	98 01       	movw	r18, r16
 476:	2e 5f       	subi	r18, 0xFE	; 254
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	20 91 7a 00 	lds	r18, 0x007A
 482:	30 91 7b 00 	lds	r19, 0x007B
 486:	28 17       	cp	r18, r24
 488:	39 07       	cpc	r19, r25
 48a:	69 f4       	brne	.+26     	; 0x4a6 <__stack+0x47>
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
 490:	10 92 7d 00 	sts	0x007D, r1
 494:	10 92 7c 00 	sts	0x007C, r1
 498:	02 c0       	rjmp	.+4      	; 0x49e <__stack+0x3f>
 49a:	13 82       	std	Z+3, r1	; 0x03
 49c:	12 82       	std	Z+2, r1	; 0x02
 49e:	10 93 7b 00 	sts	0x007B, r17
 4a2:	00 93 7a 00 	sts	0x007A, r16
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
