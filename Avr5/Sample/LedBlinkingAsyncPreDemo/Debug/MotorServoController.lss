
MotorServoController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000007ce  00000862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800066  00800066  00000868  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001248  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043d  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d5  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008322  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  0000a77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000acd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000302  00000000  00000000  0000ae1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_19>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	a1 02       	muls	r26, r17

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a6 e6       	ldi	r26, 0x66	; 102
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	ac 38       	cpi	r26, 0x8C	; 140
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ee ec       	ldi	r30, 0xCE	; 206
  7a:	f7 e0       	ldi	r31, 0x07	; 7
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a6 36       	cpi	r26, 0x66	; 102
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 b2 02 	call	0x564	; 0x564 <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
  a2:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z4TestP4Task>:
	}
}

void Test(Task * task){

		if (ButtonPressTime > 220)
  aa:	20 91 72 00 	lds	r18, 0x0072
  ae:	30 91 73 00 	lds	r19, 0x0073
  b2:	2d 3d       	cpi	r18, 0xDD	; 221
  b4:	31 05       	cpc	r19, r1
  b6:	a8 f4       	brcc	.+42     	; 0xe2 <_Z4TestP4Task+0x38>
		{
			BlinkFlag = !BlinkFlag;
			ButtonPressTime = 0;
		}
		else if (ButtonPressTime > 15)
  b8:	20 91 72 00 	lds	r18, 0x0072
  bc:	30 91 73 00 	lds	r19, 0x0073
  c0:	20 31       	cpi	r18, 0x10	; 16
  c2:	31 05       	cpc	r19, r1
  c4:	40 f0       	brcs	.+16     	; 0xd6 <_Z4TestP4Task+0x2c>
                (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
            }

            volatile void Toggle()
            {
                *(uint8_t volatile*)PortAddress ^= (1 << NOPin);
  c6:	38 b3       	in	r19, 0x18	; 24
  c8:	24 e0       	ldi	r18, 0x04	; 4
  ca:	23 27       	eor	r18, r19
  cc:	28 bb       	out	0x18, r18	; 24
		{
			GreenLed.Toggle();
			ButtonPressTime = 0;
  ce:	10 92 73 00 	sts	0x0073, r1
  d2:	10 92 72 00 	sts	0x0072, r1
		}


task->currentMethod = KeyboardHandler;
  d6:	20 ea       	ldi	r18, 0xA0	; 160
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	33 83       	std	Z+3, r19	; 0x03
  de:	22 83       	std	Z+2, r18	; 0x02
  e0:	08 95       	ret

void Test(Task * task){

		if (ButtonPressTime > 220)
		{
			BlinkFlag = !BlinkFlag;
  e2:	30 91 74 00 	lds	r19, 0x0074
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	23 27       	eor	r18, r19
  ea:	20 93 74 00 	sts	0x0074, r18
			ButtonPressTime = 0;
  ee:	10 92 73 00 	sts	0x0073, r1
  f2:	10 92 72 00 	sts	0x0072, r1
			GreenLed.Toggle();
			ButtonPressTime = 0;
		}


task->currentMethod = KeyboardHandler;
  f6:	20 ea       	ldi	r18, 0xA0	; 160
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	33 83       	std	Z+3, r19	; 0x03
  fe:	22 83       	std	Z+2, r18	; 0x02
 100:	08 95       	ret

00000102 <_Z26LedBlinkPerDelayVariableMsP4Task>:
	}
};*/

void LedBlinkPerDelayVariableMs(Task * task)
{
	if (BlinkFlag)
 102:	80 91 74 00 	lds	r24, 0x0074
 106:	88 23       	and	r24, r24
 108:	c9 f0       	breq	.+50     	; 0x13c <_Z26LedBlinkPerDelayVariableMsP4Task+0x3a>
	{
		if (ledCounter > 700)
 10a:	80 91 75 00 	lds	r24, 0x0075
 10e:	90 91 76 00 	lds	r25, 0x0076
 112:	8d 3b       	cpi	r24, 0xBD	; 189
 114:	92 40       	sbci	r25, 0x02	; 2
 116:	44 f0       	brlt	.+16     	; 0x128 <_Z26LedBlinkPerDelayVariableMsP4Task+0x26>
		{
			ledCounter = 0;
 118:	10 92 76 00 	sts	0x0076, r1
 11c:	10 92 75 00 	sts	0x0075, r1
 120:	98 b3       	in	r25, 0x18	; 24
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	89 27       	eor	r24, r25
 126:	88 bb       	out	0x18, r24	; 24
			YellowLed.Toggle();
		}
		++ledCounter;
 128:	80 91 75 00 	lds	r24, 0x0075
 12c:	90 91 76 00 	lds	r25, 0x0076
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 76 00 	sts	0x0076, r25
 136:	80 93 75 00 	sts	0x0075, r24
 13a:	08 95       	ret
				}
			}

            volatile void Set()
            {
                (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
 13c:	c1 9a       	sbi	0x18, 1	; 24
 13e:	08 95       	ret

00000140 <_Z15KeyboardHandlerP4Task>:
void Test(Task * task);

void KeyboardHandler(Task * task)
{

task->currentMethod = Test;
 140:	25 e5       	ldi	r18, 0x55	; 85
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	33 83       	std	Z+3, r19	; 0x03
 148:	22 83       	std	Z+2, r18	; 0x02
                *(uint8_t volatile*)PortAddress ^= (1 << NOPin);
            }

            volatile bool Check()
            {
                return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
 14a:	87 99       	sbic	0x10, 7	; 16
 14c:	09 c0       	rjmp	.+18     	; 0x160 <_Z15KeyboardHandlerP4Task+0x20>
if (!Button.Check()) //Atmega has only internal pull ups - so button must be setted (1), and button must ground it. If pin == 0 then is pressed
	{
		++ButtonPressTime;
 14e:	80 91 72 00 	lds	r24, 0x0072
 152:	90 91 73 00 	lds	r25, 0x0073
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 73 00 	sts	0x0073, r25
 15c:	80 93 72 00 	sts	0x0072, r24
 160:	08 95       	ret

00000162 <_Znwj>:

#ifndef __CPPHELPERS_H__
#define __CPPHELPERS_H__
void * operator new(size_t size)
{
	return malloc(size);
 162:	0c 94 b8 02 	jmp	0x570	; 0x570 <malloc>

00000166 <_ZdlPv>:
}

void operator delete(void * ptr)
{
	free(ptr);
 166:	0c 94 4d 03 	jmp	0x69a	; 0x69a <free>

0000016a <__vector_19>:
		#include "MainAsyncTaskManager.cpp"
	#endif
	static TaskManager Taskmanager;

	ISR(TIMER0_COMP_vect)
	{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	}
}

void Invoke()
{
	if (tasks[currentTaskNumber] != nullptr)
 18c:	90 91 87 00 	lds	r25, 0x0087
 190:	e9 2f       	mov	r30, r25
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e9 58       	subi	r30, 0x89	; 137
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a0 81       	ld	r26, Z
 19e:	b1 81       	ldd	r27, Z+1	; 0x01
 1a0:	10 97       	sbiw	r26, 0x00	; 0
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <__vector_19+0x4a>
	{
		tasks[currentTaskNumber]->currentMethod(tasks[currentTaskNumber]);
 1a4:	12 96       	adiw	r26, 0x02	; 2
 1a6:	ed 91       	ld	r30, X+
 1a8:	fc 91       	ld	r31, X
 1aa:	13 97       	sbiw	r26, 0x03	; 3
 1ac:	cd 01       	movw	r24, r26
 1ae:	09 95       	icall
 1b0:	90 91 87 00 	lds	r25, 0x0087
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
 1b4:	9f 5f       	subi	r25, 0xFF	; 255
	if (currentTaskNumber >= NumberOfTasks)
 1b6:	98 30       	cpi	r25, 0x08	; 8
 1b8:	98 f0       	brcs	.+38     	; 0x1e0 <__vector_19+0x76>
	{
		currentTaskNumber = 0;
 1ba:	10 92 87 00 	sts	0x0087, r1
		Taskmanager.Invoke();
	}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
 1e0:	90 93 87 00 	sts	0x0087, r25
 1e4:	ec cf       	rjmp	.-40     	; 0x1be <__vector_19+0x54>

000001e6 <_Z13RegisterTasksv>:

Task taskName;
Task keyboardTask;
void RegisterTasks()
{
	taskName.currentMethod = LedBlinkPerDelayVariableMs;
 1e6:	81 e8       	ldi	r24, 0x81	; 129
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 6d 00 	sts	0x006D, r25
 1ee:	80 93 6c 00 	sts	0x006C, r24
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
 1f2:	80 91 77 00 	lds	r24, 0x0077
 1f6:	90 91 78 00 	lds	r25, 0x0078
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	09 f4       	brne	.+2      	; 0x200 <_Z13RegisterTasksv+0x1a>
 1fe:	7e c0       	rjmp	.+252    	; 0x2fc <_Z13RegisterTasksv+0x116>
 200:	20 91 79 00 	lds	r18, 0x0079
 204:	30 91 7a 00 	lds	r19, 0x007A
 208:	23 2b       	or	r18, r19
 20a:	09 f4       	brne	.+2      	; 0x20e <_Z13RegisterTasksv+0x28>
 20c:	8b c0       	rjmp	.+278    	; 0x324 <_Z13RegisterTasksv+0x13e>
 20e:	20 91 7b 00 	lds	r18, 0x007B
 212:	30 91 7c 00 	lds	r19, 0x007C
 216:	23 2b       	or	r18, r19
 218:	09 f4       	brne	.+2      	; 0x21c <_Z13RegisterTasksv+0x36>
 21a:	8d c0       	rjmp	.+282    	; 0x336 <_Z13RegisterTasksv+0x150>
 21c:	20 91 7d 00 	lds	r18, 0x007D
 220:	30 91 7e 00 	lds	r19, 0x007E
 224:	23 2b       	or	r18, r19
 226:	09 f4       	brne	.+2      	; 0x22a <_Z13RegisterTasksv+0x44>
 228:	89 c0       	rjmp	.+274    	; 0x33c <_Z13RegisterTasksv+0x156>
 22a:	20 91 7f 00 	lds	r18, 0x007F
 22e:	30 91 80 00 	lds	r19, 0x0080
 232:	23 2b       	or	r18, r19
 234:	09 f4       	brne	.+2      	; 0x238 <_Z13RegisterTasksv+0x52>
 236:	8b c0       	rjmp	.+278    	; 0x34e <_Z13RegisterTasksv+0x168>
 238:	20 91 81 00 	lds	r18, 0x0081
 23c:	30 91 82 00 	lds	r19, 0x0082
 240:	23 2b       	or	r18, r19
 242:	09 f4       	brne	.+2      	; 0x246 <_Z13RegisterTasksv+0x60>
 244:	87 c0       	rjmp	.+270    	; 0x354 <_Z13RegisterTasksv+0x16e>
 246:	20 91 83 00 	lds	r18, 0x0083
 24a:	30 91 84 00 	lds	r19, 0x0084
 24e:	23 2b       	or	r18, r19
 250:	09 f4       	brne	.+2      	; 0x254 <_Z13RegisterTasksv+0x6e>
 252:	89 c0       	rjmp	.+274    	; 0x366 <_Z13RegisterTasksv+0x180>
 254:	20 91 85 00 	lds	r18, 0x0085
 258:	30 91 86 00 	lds	r19, 0x0086
 25c:	23 2b       	or	r18, r19
 25e:	09 f4       	brne	.+2      	; 0x262 <_Z13RegisterTasksv+0x7c>
 260:	85 c0       	rjmp	.+266    	; 0x36c <_Z13RegisterTasksv+0x186>
	Taskmanager.Register(taskName);
	
	keyboardTask.currentMethod = KeyboardHandler;
 262:	20 ea       	ldi	r18, 0xA0	; 160
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	30 93 69 00 	sts	0x0069, r19
 26a:	20 93 68 00 	sts	0x0068, r18
 26e:	89 2b       	or	r24, r25
 270:	09 f4       	brne	.+2      	; 0x274 <_Z13RegisterTasksv+0x8e>
 272:	41 c0       	rjmp	.+130    	; 0x2f6 <_Z13RegisterTasksv+0x110>
 274:	80 91 79 00 	lds	r24, 0x0079
 278:	90 91 7a 00 	lds	r25, 0x007A
 27c:	89 2b       	or	r24, r25
 27e:	09 f4       	brne	.+2      	; 0x282 <_Z13RegisterTasksv+0x9c>
 280:	54 c0       	rjmp	.+168    	; 0x32a <_Z13RegisterTasksv+0x144>
 282:	80 91 7b 00 	lds	r24, 0x007B
 286:	90 91 7c 00 	lds	r25, 0x007C
 28a:	89 2b       	or	r24, r25
 28c:	09 f4       	brne	.+2      	; 0x290 <_Z13RegisterTasksv+0xaa>
 28e:	50 c0       	rjmp	.+160    	; 0x330 <_Z13RegisterTasksv+0x14a>
 290:	80 91 7d 00 	lds	r24, 0x007D
 294:	90 91 7e 00 	lds	r25, 0x007E
 298:	89 2b       	or	r24, r25
 29a:	09 f4       	brne	.+2      	; 0x29e <_Z13RegisterTasksv+0xb8>
 29c:	52 c0       	rjmp	.+164    	; 0x342 <_Z13RegisterTasksv+0x15c>
 29e:	80 91 7f 00 	lds	r24, 0x007F
 2a2:	90 91 80 00 	lds	r25, 0x0080
 2a6:	89 2b       	or	r24, r25
 2a8:	09 f4       	brne	.+2      	; 0x2ac <_Z13RegisterTasksv+0xc6>
 2aa:	4e c0       	rjmp	.+156    	; 0x348 <_Z13RegisterTasksv+0x162>
 2ac:	80 91 81 00 	lds	r24, 0x0081
 2b0:	90 91 82 00 	lds	r25, 0x0082
 2b4:	89 2b       	or	r24, r25
 2b6:	09 f4       	brne	.+2      	; 0x2ba <_Z13RegisterTasksv+0xd4>
 2b8:	50 c0       	rjmp	.+160    	; 0x35a <_Z13RegisterTasksv+0x174>
 2ba:	80 91 83 00 	lds	r24, 0x0083
 2be:	90 91 84 00 	lds	r25, 0x0084
 2c2:	89 2b       	or	r24, r25
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <_Z13RegisterTasksv+0xe2>
 2c6:	4c c0       	rjmp	.+152    	; 0x360 <_Z13RegisterTasksv+0x17a>
 2c8:	80 91 85 00 	lds	r24, 0x0085
 2cc:	90 91 86 00 	lds	r25, 0x0086
 2d0:	89 2b       	or	r24, r25
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <_Z13RegisterTasksv+0xf0>
 2d4:	08 95       	ret
 2d6:	87 e0       	ldi	r24, 0x07	; 7
 2d8:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
 2da:	fc 01       	movw	r30, r24
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	e9 58       	subi	r30, 0x89	; 137
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	26 e6       	ldi	r18, 0x66	; 102
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	31 83       	std	Z+1, r19	; 0x01
 2ea:	20 83       	st	Z, r18
	task.AlocateNumber = positionIndicator;
 2ec:	90 93 67 00 	sts	0x0067, r25
 2f0:	80 93 66 00 	sts	0x0066, r24
 2f4:	08 95       	ret
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	ef cf       	rjmp	.-34     	; 0x2da <_Z13RegisterTasksv+0xf4>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
 300:	fc 01       	movw	r30, r24
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	e9 58       	subi	r30, 0x89	; 137
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	2a e6       	ldi	r18, 0x6A	; 106
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	31 83       	std	Z+1, r19	; 0x01
 310:	20 83       	st	Z, r18
	task.AlocateNumber = positionIndicator;
 312:	90 93 6b 00 	sts	0x006B, r25
 316:	80 93 6a 00 	sts	0x006A, r24
 31a:	80 91 77 00 	lds	r24, 0x0077
 31e:	90 91 78 00 	lds	r25, 0x0078
 322:	9f cf       	rjmp	.-194    	; 0x262 <_Z13RegisterTasksv+0x7c>
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	eb cf       	rjmp	.-42     	; 0x300 <_Z13RegisterTasksv+0x11a>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	d5 cf       	rjmp	.-86     	; 0x2da <_Z13RegisterTasksv+0xf4>
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	d2 cf       	rjmp	.-92     	; 0x2da <_Z13RegisterTasksv+0xf4>
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	e2 cf       	rjmp	.-60     	; 0x300 <_Z13RegisterTasksv+0x11a>
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	df cf       	rjmp	.-66     	; 0x300 <_Z13RegisterTasksv+0x11a>
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	c9 cf       	rjmp	.-110    	; 0x2da <_Z13RegisterTasksv+0xf4>
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	c6 cf       	rjmp	.-116    	; 0x2da <_Z13RegisterTasksv+0xf4>
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	d6 cf       	rjmp	.-84     	; 0x300 <_Z13RegisterTasksv+0x11a>
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	d3 cf       	rjmp	.-90     	; 0x300 <_Z13RegisterTasksv+0x11a>
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	bd cf       	rjmp	.-134    	; 0x2da <_Z13RegisterTasksv+0xf4>
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	ba cf       	rjmp	.-140    	; 0x2da <_Z13RegisterTasksv+0xf4>
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ca cf       	rjmp	.-108    	; 0x300 <_Z13RegisterTasksv+0x11a>
 36c:	87 e0       	ldi	r24, 0x07	; 7
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	c7 cf       	rjmp	.-114    	; 0x300 <_Z13RegisterTasksv+0x11a>

00000372 <_Z17InitializeProgramv>:
                *(uint8_t volatile *)DdrAddress |= (1 << NOPin);
            }

            volatile void AsInput()
            {
                *(uint8_t volatile*)DdrAddress &= !(1 << NOPin);
 372:	81 b3       	in	r24, 0x11	; 17
 374:	11 ba       	out	0x11, r1	; 17
				}
			}

            volatile void Set()
            {
                (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
 376:	97 9a       	sbi	0x12, 7	; 18
                *(uint8_t*)PortAddress ^= (1 << NOPin);
            }

            void FastAsOutput()
            {
                *(uint8_t*)DdrAddress |= (1 << NOPin);
 378:	87 b3       	in	r24, 0x17	; 23
 37a:	87 60       	ori	r24, 0x07	; 7
 37c:	87 bb       	out	0x17, r24	; 23
        {
            public:
	 #ifdef __FAST__PIN__OPERATIONS__ENABLE
	 void FastSet()
            {
                (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
 37e:	88 b3       	in	r24, 0x18	; 24
 380:	87 60       	ori	r24, 0x07	; 7
 382:	88 bb       	out	0x18, r24	; 24

Task taskName;
Task keyboardTask;
void RegisterTasks()
{
	taskName.currentMethod = LedBlinkPerDelayVariableMs;
 384:	81 e8       	ldi	r24, 0x81	; 129
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 6d 00 	sts	0x006D, r25
 38c:	80 93 6c 00 	sts	0x006C, r24
 390:	80 91 77 00 	lds	r24, 0x0077
 394:	90 91 78 00 	lds	r25, 0x0078
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	09 f4       	brne	.+2      	; 0x39e <_Z17InitializeProgramv+0x2c>
 39c:	81 c0       	rjmp	.+258    	; 0x4a0 <__stack+0x41>
 39e:	20 91 79 00 	lds	r18, 0x0079
 3a2:	30 91 7a 00 	lds	r19, 0x007A
 3a6:	23 2b       	or	r18, r19
 3a8:	09 f4       	brne	.+2      	; 0x3ac <_Z17InitializeProgramv+0x3a>
 3aa:	a1 c0       	rjmp	.+322    	; 0x4ee <__stack+0x8f>
 3ac:	20 91 7b 00 	lds	r18, 0x007B
 3b0:	30 91 7c 00 	lds	r19, 0x007C
 3b4:	23 2b       	or	r18, r19
 3b6:	09 f4       	brne	.+2      	; 0x3ba <_Z17InitializeProgramv+0x48>
 3b8:	a0 c0       	rjmp	.+320    	; 0x4fa <__stack+0x9b>
 3ba:	20 91 7d 00 	lds	r18, 0x007D
 3be:	30 91 7e 00 	lds	r19, 0x007E
 3c2:	23 2b       	or	r18, r19
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <_Z17InitializeProgramv+0x56>
 3c6:	9c c0       	rjmp	.+312    	; 0x500 <__stack+0xa1>
 3c8:	20 91 7f 00 	lds	r18, 0x007F
 3cc:	30 91 80 00 	lds	r19, 0x0080
 3d0:	23 2b       	or	r18, r19
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <_Z17InitializeProgramv+0x64>
 3d4:	9b c0       	rjmp	.+310    	; 0x50c <__stack+0xad>
 3d6:	20 91 81 00 	lds	r18, 0x0081
 3da:	30 91 82 00 	lds	r19, 0x0082
 3de:	23 2b       	or	r18, r19
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <_Z17InitializeProgramv+0x72>
 3e2:	9d c0       	rjmp	.+314    	; 0x51e <__stack+0xbf>
 3e4:	20 91 83 00 	lds	r18, 0x0083
 3e8:	30 91 84 00 	lds	r19, 0x0084
 3ec:	23 2b       	or	r18, r19
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <_Z17InitializeProgramv+0x80>
 3f0:	9c c0       	rjmp	.+312    	; 0x52a <__stack+0xcb>
 3f2:	20 91 85 00 	lds	r18, 0x0085
 3f6:	30 91 86 00 	lds	r19, 0x0086
 3fa:	23 2b       	or	r18, r19
 3fc:	09 f4       	brne	.+2      	; 0x400 <_Z17InitializeProgramv+0x8e>
 3fe:	9b c0       	rjmp	.+310    	; 0x536 <__stack+0xd7>
	Taskmanager.Register(taskName);
	
	keyboardTask.currentMethod = KeyboardHandler;
 400:	20 ea       	ldi	r18, 0xA0	; 160
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	30 93 69 00 	sts	0x0069, r19
 408:	20 93 68 00 	sts	0x0068, r18
 40c:	89 2b       	or	r24, r25
 40e:	09 f4       	brne	.+2      	; 0x412 <_Z17InitializeProgramv+0xa0>
 410:	5b c0       	rjmp	.+182    	; 0x4c8 <__stack+0x69>
 412:	80 91 79 00 	lds	r24, 0x0079
 416:	90 91 7a 00 	lds	r25, 0x007A
 41a:	89 2b       	or	r24, r25
 41c:	09 f4       	brne	.+2      	; 0x420 <_Z17InitializeProgramv+0xae>
 41e:	64 c0       	rjmp	.+200    	; 0x4e8 <__stack+0x89>
 420:	80 91 7b 00 	lds	r24, 0x007B
 424:	90 91 7c 00 	lds	r25, 0x007C
 428:	89 2b       	or	r24, r25
 42a:	09 f4       	brne	.+2      	; 0x42e <_Z17InitializeProgramv+0xbc>
 42c:	63 c0       	rjmp	.+198    	; 0x4f4 <__stack+0x95>
 42e:	80 91 7d 00 	lds	r24, 0x007D
 432:	90 91 7e 00 	lds	r25, 0x007E
 436:	89 2b       	or	r24, r25
 438:	09 f4       	brne	.+2      	; 0x43c <_Z17InitializeProgramv+0xca>
 43a:	65 c0       	rjmp	.+202    	; 0x506 <__stack+0xa7>
 43c:	80 91 7f 00 	lds	r24, 0x007F
 440:	90 91 80 00 	lds	r25, 0x0080
 444:	89 2b       	or	r24, r25
 446:	09 f4       	brne	.+2      	; 0x44a <_Z17InitializeProgramv+0xd8>
 448:	64 c0       	rjmp	.+200    	; 0x512 <__stack+0xb3>
 44a:	80 91 81 00 	lds	r24, 0x0081
 44e:	90 91 82 00 	lds	r25, 0x0082
 452:	89 2b       	or	r24, r25
 454:	09 f4       	brne	.+2      	; 0x458 <_Z17InitializeProgramv+0xe6>
 456:	60 c0       	rjmp	.+192    	; 0x518 <__stack+0xb9>
 458:	80 91 83 00 	lds	r24, 0x0083
 45c:	90 91 84 00 	lds	r25, 0x0084
 460:	89 2b       	or	r24, r25
 462:	09 f4       	brne	.+2      	; 0x466 <__stack+0x7>
 464:	5f c0       	rjmp	.+190    	; 0x524 <__stack+0xc5>
 466:	80 91 85 00 	lds	r24, 0x0085
 46a:	90 91 86 00 	lds	r25, 0x0086
 46e:	89 2b       	or	r24, r25
 470:	09 f4       	brne	.+2      	; 0x474 <__stack+0x15>
 472:	5e c0       	rjmp	.+188    	; 0x530 <__stack+0xd1>
	class Timer0
	{
	public:
		void static SetCompareValue(uint8_t compareRegisterValue)
		{
			OCR0 = compareRegisterValue;
 474:	87 e0       	ldi	r24, 0x07	; 7
 476:	8c bf       	out	0x3c, r24	; 60
			SET(TCCR0,(uint8_t)prescaler);
		}

		static void WaveFormMode(WaveForms waveForms)
		{
			CLEAR(TCCR0,(1<<WGM01)||(1<<WGM00));
 478:	83 b7       	in	r24, 0x33	; 51
 47a:	8e 7f       	andi	r24, 0xFE	; 254
 47c:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)waveForms);
 47e:	83 b7       	in	r24, 0x33	; 51
 480:	88 60       	ori	r24, 0x08	; 8
 482:	83 bf       	out	0x33, r24	; 51
			AllBitsSet = CompareAndOverFlowInterrupts
		};

		volatile void static SetInterrupts(InterruptMask interrupt)
		{
			CLEAR(TIMSK,(TOIE0,OCIE0));
 484:	89 b7       	in	r24, 0x39	; 57
 486:	8e 7f       	andi	r24, 0xFE	; 254
 488:	89 bf       	out	0x39, r24	; 57
			TIMSK |= interrupt;
 48a:	89 b7       	in	r24, 0x39	; 57
 48c:	82 60       	ori	r24, 0x02	; 2
 48e:	89 bf       	out	0x39, r24	; 57
			SET(SFIOR,(1<<PSR10));
		}

		static void SetPrescaler(Prescalers prescaler)
		{
			CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
 490:	83 b7       	in	r24, 0x33	; 51
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)prescaler);
 496:	83 b7       	in	r24, 0x33	; 51
 498:	84 60       	ori	r24, 0x04	; 4
 49a:	83 bf       	out	0x33, r24	; 51
{  //2000 instructions per task - 1ms task resolution CAREFULL: Exit mail will erase interrupt SREG
	Timer0::SetCompareValue(7); // Why 7? When we get 16mhz, divide it 8 (8 tasks), we get 2mhz, divide it 8*256 its 2048 - 1 ms -
	Timer0::WaveFormMode(Timer0::WaveForms::CTC);
	Timer0::SetInterrupts(CodeEasyAvr::Timer0::CompareMatchInterrupt);
	Timer0::SetPrescaler(Timer0::Prescalers::Prescaler_256);
	sei();
 49c:	78 94       	sei
 49e:	08 95       	ret
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
 4a4:	fc 01       	movw	r30, r24
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	e9 58       	subi	r30, 0x89	; 137
 4ac:	ff 4f       	sbci	r31, 0xFF	; 255
 4ae:	2a e6       	ldi	r18, 0x6A	; 106
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	31 83       	std	Z+1, r19	; 0x01
 4b4:	20 83       	st	Z, r18
	task.AlocateNumber = positionIndicator;
 4b6:	90 93 6b 00 	sts	0x006B, r25
 4ba:	80 93 6a 00 	sts	0x006A, r24
 4be:	80 91 77 00 	lds	r24, 0x0077
 4c2:	90 91 78 00 	lds	r25, 0x0078
 4c6:	9c cf       	rjmp	.-200    	; 0x400 <_Z17InitializeProgramv+0x8e>
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
 4cc:	fc 01       	movw	r30, r24
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	e9 58       	subi	r30, 0x89	; 137
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	26 e6       	ldi	r18, 0x66	; 102
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	31 83       	std	Z+1, r19	; 0x01
 4dc:	20 83       	st	Z, r18
	task.AlocateNumber = positionIndicator;
 4de:	90 93 67 00 	sts	0x0067, r25
 4e2:	80 93 66 00 	sts	0x0066, r24
 4e6:	c6 cf       	rjmp	.-116    	; 0x474 <__stack+0x15>
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	ef cf       	rjmp	.-34     	; 0x4cc <__stack+0x6d>
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	d8 cf       	rjmp	.-80     	; 0x4a4 <__stack+0x45>
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	e9 cf       	rjmp	.-46     	; 0x4cc <__stack+0x6d>
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	d2 cf       	rjmp	.-92     	; 0x4a4 <__stack+0x45>
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	cf cf       	rjmp	.-98     	; 0x4a4 <__stack+0x45>
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	e0 cf       	rjmp	.-64     	; 0x4cc <__stack+0x6d>
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	c9 cf       	rjmp	.-110    	; 0x4a4 <__stack+0x45>
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	da cf       	rjmp	.-76     	; 0x4cc <__stack+0x6d>
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	d7 cf       	rjmp	.-82     	; 0x4cc <__stack+0x6d>
 51e:	85 e0       	ldi	r24, 0x05	; 5
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	c0 cf       	rjmp	.-128    	; 0x4a4 <__stack+0x45>
 524:	86 e0       	ldi	r24, 0x06	; 6
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	d1 cf       	rjmp	.-94     	; 0x4cc <__stack+0x6d>
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	ba cf       	rjmp	.-140    	; 0x4a4 <__stack+0x45>
 530:	87 e0       	ldi	r24, 0x07	; 7
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	cb cf       	rjmp	.-106    	; 0x4cc <__stack+0x6d>
 536:	87 e0       	ldi	r24, 0x07	; 7
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	b4 cf       	rjmp	.-152    	; 0x4a4 <__stack+0x45>

0000053c <main>:
	EnableAsync();
}

int main()
{
	InitializeProgram();
 53c:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17InitializeProgramv>
	YellowLed.FastSet();
	RegisterTasks();
	EnableAsync();
}

int main()
 540:	ff cf       	rjmp	.-2      	; 0x540 <main+0x4>

00000542 <_GLOBAL__sub_I__Znwj>:
	Task* tasks[NumberOfTasks];
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
 542:	e7 e7       	ldi	r30, 0x77	; 119
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	10 8a       	std	Z+16, r1	; 0x10
 548:	80 e1       	ldi	r24, 0x10	; 16
 54a:	df 01       	movw	r26, r30
 54c:	1d 92       	st	X+, r1
 54e:	8a 95       	dec	r24
 550:	e9 f7       	brne	.-6      	; 0x54c <_GLOBAL__sub_I__Znwj+0xa>

class Task;

typedef void(*Action)(Task*);

class Task
 552:	10 92 6d 00 	sts	0x006D, r1
 556:	10 92 6c 00 	sts	0x006C, r1
 55a:	10 92 69 00 	sts	0x0069, r1
 55e:	10 92 68 00 	sts	0x0068, r1
 562:	08 95       	ret

00000564 <__tablejump2__>:
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	05 90       	lpm	r0, Z+
 56a:	f4 91       	lpm	r31, Z
 56c:	e0 2d       	mov	r30, r0
 56e:	09 94       	ijmp

00000570 <malloc>:
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	91 05       	cpc	r25, r1
 578:	10 f4       	brcc	.+4      	; 0x57e <malloc+0xe>
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	e0 91 8a 00 	lds	r30, 0x008A
 582:	f0 91 8b 00 	lds	r31, 0x008B
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
 58e:	30 97       	sbiw	r30, 0x00	; 0
 590:	11 f1       	breq	.+68     	; 0x5d6 <malloc+0x66>
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	48 17       	cp	r20, r24
 598:	59 07       	cpc	r21, r25
 59a:	c0 f0       	brcs	.+48     	; 0x5cc <malloc+0x5c>
 59c:	48 17       	cp	r20, r24
 59e:	59 07       	cpc	r21, r25
 5a0:	61 f4       	brne	.+24     	; 0x5ba <malloc+0x4a>
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	20 97       	sbiw	r28, 0x00	; 0
 5a8:	19 f0       	breq	.+6      	; 0x5b0 <malloc+0x40>
 5aa:	9b 83       	std	Y+3, r25	; 0x03
 5ac:	8a 83       	std	Y+2, r24	; 0x02
 5ae:	2b c0       	rjmp	.+86     	; 0x606 <malloc+0x96>
 5b0:	90 93 8b 00 	sts	0x008B, r25
 5b4:	80 93 8a 00 	sts	0x008A, r24
 5b8:	26 c0       	rjmp	.+76     	; 0x606 <malloc+0x96>
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	19 f0       	breq	.+6      	; 0x5c6 <malloc+0x56>
 5c0:	42 17       	cp	r20, r18
 5c2:	53 07       	cpc	r21, r19
 5c4:	18 f4       	brcc	.+6      	; 0x5cc <malloc+0x5c>
 5c6:	9a 01       	movw	r18, r20
 5c8:	be 01       	movw	r22, r28
 5ca:	df 01       	movw	r26, r30
 5cc:	ef 01       	movw	r28, r30
 5ce:	02 80       	ldd	r0, Z+2	; 0x02
 5d0:	f3 81       	ldd	r31, Z+3	; 0x03
 5d2:	e0 2d       	mov	r30, r0
 5d4:	dc cf       	rjmp	.-72     	; 0x58e <malloc+0x1e>
 5d6:	21 15       	cp	r18, r1
 5d8:	31 05       	cpc	r19, r1
 5da:	09 f1       	breq	.+66     	; 0x61e <malloc+0xae>
 5dc:	28 1b       	sub	r18, r24
 5de:	39 0b       	sbc	r19, r25
 5e0:	24 30       	cpi	r18, 0x04	; 4
 5e2:	31 05       	cpc	r19, r1
 5e4:	90 f4       	brcc	.+36     	; 0x60a <malloc+0x9a>
 5e6:	12 96       	adiw	r26, 0x02	; 2
 5e8:	8d 91       	ld	r24, X+
 5ea:	9c 91       	ld	r25, X
 5ec:	13 97       	sbiw	r26, 0x03	; 3
 5ee:	61 15       	cp	r22, r1
 5f0:	71 05       	cpc	r23, r1
 5f2:	21 f0       	breq	.+8      	; 0x5fc <malloc+0x8c>
 5f4:	fb 01       	movw	r30, r22
 5f6:	93 83       	std	Z+3, r25	; 0x03
 5f8:	82 83       	std	Z+2, r24	; 0x02
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <malloc+0x94>
 5fc:	90 93 8b 00 	sts	0x008B, r25
 600:	80 93 8a 00 	sts	0x008A, r24
 604:	fd 01       	movw	r30, r26
 606:	32 96       	adiw	r30, 0x02	; 2
 608:	44 c0       	rjmp	.+136    	; 0x692 <malloc+0x122>
 60a:	fd 01       	movw	r30, r26
 60c:	e2 0f       	add	r30, r18
 60e:	f3 1f       	adc	r31, r19
 610:	81 93       	st	Z+, r24
 612:	91 93       	st	Z+, r25
 614:	22 50       	subi	r18, 0x02	; 2
 616:	31 09       	sbc	r19, r1
 618:	2d 93       	st	X+, r18
 61a:	3c 93       	st	X, r19
 61c:	3a c0       	rjmp	.+116    	; 0x692 <malloc+0x122>
 61e:	20 91 88 00 	lds	r18, 0x0088
 622:	30 91 89 00 	lds	r19, 0x0089
 626:	23 2b       	or	r18, r19
 628:	41 f4       	brne	.+16     	; 0x63a <malloc+0xca>
 62a:	20 91 62 00 	lds	r18, 0x0062
 62e:	30 91 63 00 	lds	r19, 0x0063
 632:	30 93 89 00 	sts	0x0089, r19
 636:	20 93 88 00 	sts	0x0088, r18
 63a:	20 91 60 00 	lds	r18, 0x0060
 63e:	30 91 61 00 	lds	r19, 0x0061
 642:	21 15       	cp	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	41 f4       	brne	.+16     	; 0x658 <malloc+0xe8>
 648:	2d b7       	in	r18, 0x3d	; 61
 64a:	3e b7       	in	r19, 0x3e	; 62
 64c:	40 91 64 00 	lds	r20, 0x0064
 650:	50 91 65 00 	lds	r21, 0x0065
 654:	24 1b       	sub	r18, r20
 656:	35 0b       	sbc	r19, r21
 658:	e0 91 88 00 	lds	r30, 0x0088
 65c:	f0 91 89 00 	lds	r31, 0x0089
 660:	e2 17       	cp	r30, r18
 662:	f3 07       	cpc	r31, r19
 664:	a0 f4       	brcc	.+40     	; 0x68e <malloc+0x11e>
 666:	2e 1b       	sub	r18, r30
 668:	3f 0b       	sbc	r19, r31
 66a:	28 17       	cp	r18, r24
 66c:	39 07       	cpc	r19, r25
 66e:	78 f0       	brcs	.+30     	; 0x68e <malloc+0x11e>
 670:	ac 01       	movw	r20, r24
 672:	4e 5f       	subi	r20, 0xFE	; 254
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	24 17       	cp	r18, r20
 678:	35 07       	cpc	r19, r21
 67a:	48 f0       	brcs	.+18     	; 0x68e <malloc+0x11e>
 67c:	4e 0f       	add	r20, r30
 67e:	5f 1f       	adc	r21, r31
 680:	50 93 89 00 	sts	0x0089, r21
 684:	40 93 88 00 	sts	0x0088, r20
 688:	81 93       	st	Z+, r24
 68a:	91 93       	st	Z+, r25
 68c:	02 c0       	rjmp	.+4      	; 0x692 <malloc+0x122>
 68e:	e0 e0       	ldi	r30, 0x00	; 0
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	cf 01       	movw	r24, r30
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <free>:
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <free+0xe>
 6a6:	8c c0       	rjmp	.+280    	; 0x7c0 <free+0x126>
 6a8:	fc 01       	movw	r30, r24
 6aa:	32 97       	sbiw	r30, 0x02	; 2
 6ac:	13 82       	std	Z+3, r1	; 0x03
 6ae:	12 82       	std	Z+2, r1	; 0x02
 6b0:	00 91 8a 00 	lds	r16, 0x008A
 6b4:	10 91 8b 00 	lds	r17, 0x008B
 6b8:	01 15       	cp	r16, r1
 6ba:	11 05       	cpc	r17, r1
 6bc:	81 f4       	brne	.+32     	; 0x6de <free+0x44>
 6be:	20 81       	ld	r18, Z
 6c0:	31 81       	ldd	r19, Z+1	; 0x01
 6c2:	82 0f       	add	r24, r18
 6c4:	93 1f       	adc	r25, r19
 6c6:	20 91 88 00 	lds	r18, 0x0088
 6ca:	30 91 89 00 	lds	r19, 0x0089
 6ce:	28 17       	cp	r18, r24
 6d0:	39 07       	cpc	r19, r25
 6d2:	79 f5       	brne	.+94     	; 0x732 <free+0x98>
 6d4:	f0 93 89 00 	sts	0x0089, r31
 6d8:	e0 93 88 00 	sts	0x0088, r30
 6dc:	71 c0       	rjmp	.+226    	; 0x7c0 <free+0x126>
 6de:	d8 01       	movw	r26, r16
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	ae 17       	cp	r26, r30
 6e6:	bf 07       	cpc	r27, r31
 6e8:	50 f4       	brcc	.+20     	; 0x6fe <free+0x64>
 6ea:	12 96       	adiw	r26, 0x02	; 2
 6ec:	2d 91       	ld	r18, X+
 6ee:	3c 91       	ld	r19, X
 6f0:	13 97       	sbiw	r26, 0x03	; 3
 6f2:	ad 01       	movw	r20, r26
 6f4:	21 15       	cp	r18, r1
 6f6:	31 05       	cpc	r19, r1
 6f8:	09 f1       	breq	.+66     	; 0x73c <free+0xa2>
 6fa:	d9 01       	movw	r26, r18
 6fc:	f3 cf       	rjmp	.-26     	; 0x6e4 <free+0x4a>
 6fe:	9d 01       	movw	r18, r26
 700:	da 01       	movw	r26, r20
 702:	33 83       	std	Z+3, r19	; 0x03
 704:	22 83       	std	Z+2, r18	; 0x02
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	86 0f       	add	r24, r22
 70c:	97 1f       	adc	r25, r23
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	69 f4       	brne	.+26     	; 0x72e <free+0x94>
 714:	ec 01       	movw	r28, r24
 716:	28 81       	ld	r18, Y
 718:	39 81       	ldd	r19, Y+1	; 0x01
 71a:	26 0f       	add	r18, r22
 71c:	37 1f       	adc	r19, r23
 71e:	2e 5f       	subi	r18, 0xFE	; 254
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	31 83       	std	Z+1, r19	; 0x01
 724:	20 83       	st	Z, r18
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	9b 81       	ldd	r25, Y+3	; 0x03
 72a:	93 83       	std	Z+3, r25	; 0x03
 72c:	82 83       	std	Z+2, r24	; 0x02
 72e:	45 2b       	or	r20, r21
 730:	29 f4       	brne	.+10     	; 0x73c <free+0xa2>
 732:	f0 93 8b 00 	sts	0x008B, r31
 736:	e0 93 8a 00 	sts	0x008A, r30
 73a:	42 c0       	rjmp	.+132    	; 0x7c0 <free+0x126>
 73c:	13 96       	adiw	r26, 0x03	; 3
 73e:	fc 93       	st	X, r31
 740:	ee 93       	st	-X, r30
 742:	12 97       	sbiw	r26, 0x02	; 2
 744:	ed 01       	movw	r28, r26
 746:	49 91       	ld	r20, Y+
 748:	59 91       	ld	r21, Y+
 74a:	9e 01       	movw	r18, r28
 74c:	24 0f       	add	r18, r20
 74e:	35 1f       	adc	r19, r21
 750:	e2 17       	cp	r30, r18
 752:	f3 07       	cpc	r31, r19
 754:	71 f4       	brne	.+28     	; 0x772 <free+0xd8>
 756:	80 81       	ld	r24, Z
 758:	91 81       	ldd	r25, Z+1	; 0x01
 75a:	84 0f       	add	r24, r20
 75c:	95 1f       	adc	r25, r21
 75e:	02 96       	adiw	r24, 0x02	; 2
 760:	11 96       	adiw	r26, 0x01	; 1
 762:	9c 93       	st	X, r25
 764:	8e 93       	st	-X, r24
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	93 81       	ldd	r25, Z+3	; 0x03
 76a:	13 96       	adiw	r26, 0x03	; 3
 76c:	9c 93       	st	X, r25
 76e:	8e 93       	st	-X, r24
 770:	12 97       	sbiw	r26, 0x02	; 2
 772:	e0 e0       	ldi	r30, 0x00	; 0
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	d8 01       	movw	r26, r16
 778:	12 96       	adiw	r26, 0x02	; 2
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	13 97       	sbiw	r26, 0x03	; 3
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	19 f0       	breq	.+6      	; 0x78a <free+0xf0>
 784:	f8 01       	movw	r30, r16
 786:	8c 01       	movw	r16, r24
 788:	f6 cf       	rjmp	.-20     	; 0x776 <free+0xdc>
 78a:	8d 91       	ld	r24, X+
 78c:	9c 91       	ld	r25, X
 78e:	98 01       	movw	r18, r16
 790:	2e 5f       	subi	r18, 0xFE	; 254
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	82 0f       	add	r24, r18
 796:	93 1f       	adc	r25, r19
 798:	20 91 88 00 	lds	r18, 0x0088
 79c:	30 91 89 00 	lds	r19, 0x0089
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	69 f4       	brne	.+26     	; 0x7c0 <free+0x126>
 7a6:	30 97       	sbiw	r30, 0x00	; 0
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <free+0x11a>
 7aa:	10 92 8b 00 	sts	0x008B, r1
 7ae:	10 92 8a 00 	sts	0x008A, r1
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <free+0x11e>
 7b4:	13 82       	std	Z+3, r1	; 0x03
 7b6:	12 82       	std	Z+2, r1	; 0x02
 7b8:	10 93 89 00 	sts	0x0089, r17
 7bc:	00 93 88 00 	sts	0x0088, r16
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <_exit>:
 7ca:	f8 94       	cli

000007cc <__stop_program>:
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <__stop_program>
