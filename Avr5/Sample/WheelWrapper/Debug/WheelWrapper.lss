
WheelWrapper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ae  00800060  00001482  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080030e  0080030e  000017c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000950  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008936  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e0  00000000  00000000  0000aab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001903  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013f8  00000000  00000000  0000c99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bbd5  00000000  00000000  0000dd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001905  00000000  00000000  00019969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000940  00000000  00000000  0001b26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004c4  00000000  00000000  0001bbae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_19>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	17 03       	mulsu	r17, r23

00000056 <__ctors_end>:
      56:	51 03       	mulsu	r21, r17

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	13 e0       	ldi	r17, 0x03	; 3
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e2 e8       	ldi	r30, 0x82	; 130
      6c:	f4 e1       	ldi	r31, 0x14	; 20
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ae 30       	cpi	r26, 0x0E	; 14
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	23 e0       	ldi	r18, 0x03	; 3
      7c:	ae e0       	ldi	r26, 0x0E	; 14
      7e:	b3 e0       	ldi	r27, 0x03	; 3
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a3 34       	cpi	r26, 0x43	; 67
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	cb e2       	ldi	r28, 0x2B	; 43
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	21 97       	sbiw	r28, 0x01	; 1
      94:	fe 01       	movw	r30, r28
      96:	0e 94 01 09 	call	0x1202	; 0x1202 <__tablejump2__>
      9a:	ca 32       	cpi	r28, 0x2A	; 42
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 12 03 	call	0x624	; 0x624 <main>
      a4:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Znwj>:
*/
#ifndef __CPPHELPERS_H__
#define __CPPHELPERS_H__
void * operator new(size_t size)
{
	return malloc(size);
      ac:	0e 94 07 09 	call	0x120e	; 0x120e <malloc>
}
      b0:	08 95       	ret

000000b2 <_ZdlPv>:

void operator delete(void * ptr)
{
	free(ptr);
      b2:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
      b6:	08 95       	ret

000000b8 <__vector_19>:
		#include "MainAsyncTaskManager.cpp"
	#endif
	static TaskManager Taskmanager;

	ISR(TIMER0_COMP_vect)
	{
      b8:	1f 92       	push	r1
      ba:	0f 92       	push	r0
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	0f 92       	push	r0
      c0:	11 24       	eor	r1, r1
      c2:	2f 93       	push	r18
      c4:	3f 93       	push	r19
      c6:	4f 93       	push	r20
      c8:	5f 93       	push	r21
      ca:	6f 93       	push	r22
      cc:	7f 93       	push	r23
      ce:	8f 93       	push	r24
      d0:	9f 93       	push	r25
      d2:	af 93       	push	r26
      d4:	bf 93       	push	r27
      d6:	ef 93       	push	r30
      d8:	ff 93       	push	r31
	}
}

void Invoke()
{
	if (tasks[currentTaskNumber] != nullptr)
      da:	e0 91 3e 03 	lds	r30, 0x033E
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	ee 0f       	add	r30, r30
      e2:	ff 1f       	adc	r31, r31
      e4:	e2 5d       	subi	r30, 0xD2	; 210
      e6:	fc 4f       	sbci	r31, 0xFC	; 252
      e8:	80 81       	ld	r24, Z
      ea:	91 81       	ldd	r25, Z+1	; 0x01
      ec:	00 97       	sbiw	r24, 0x00	; 0
      ee:	31 f0       	breq	.+12     	; 0xfc <__vector_19+0x44>
	{
		tasks[currentTaskNumber]->currentMethod(tasks[currentTaskNumber]);
      f0:	dc 01       	movw	r26, r24
      f2:	12 96       	adiw	r26, 0x02	; 2
      f4:	ed 91       	ld	r30, X+
      f6:	fc 91       	ld	r31, X
      f8:	13 97       	sbiw	r26, 0x03	; 3
      fa:	09 95       	icall
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
      fc:	80 91 3e 03 	lds	r24, 0x033E
     100:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentTaskNumber >= NumberOfTasks)
     102:	88 30       	cpi	r24, 0x08	; 8
     104:	18 f4       	brcc	.+6      	; 0x10c <__vector_19+0x54>
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
     106:	80 93 3e 03 	sts	0x033E, r24
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__vector_19+0x58>
	if (currentTaskNumber >= NumberOfTasks)
	{
		currentTaskNumber = 0;
     10c:	10 92 3e 03 	sts	0x033E, r1
		Taskmanager.Invoke();
	}
     110:	ff 91       	pop	r31
     112:	ef 91       	pop	r30
     114:	bf 91       	pop	r27
     116:	af 91       	pop	r26
     118:	9f 91       	pop	r25
     11a:	8f 91       	pop	r24
     11c:	7f 91       	pop	r23
     11e:	6f 91       	pop	r22
     120:	5f 91       	pop	r21
     122:	4f 91       	pop	r20
     124:	3f 91       	pop	r19
     126:	2f 91       	pop	r18
     128:	0f 90       	pop	r0
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	0f 90       	pop	r0
     12e:	1f 90       	pop	r1
     130:	18 95       	reti

00000132 <_Z18NextCalibrateStagev>:
#include "TaskManager/TaskManager.hpp"
#include "Variables.h"

void NextCalibrateStage()
{
	switch (calibrateStage)
     132:	80 91 0e 03 	lds	r24, 0x030E
     136:	90 91 0f 03 	lds	r25, 0x030F
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	91 05       	cpc	r25, r1
     13e:	b9 f0       	breq	.+46     	; 0x16e <_Z18NextCalibrateStagev+0x3c>
     140:	1c f4       	brge	.+6      	; 0x148 <_Z18NextCalibrateStagev+0x16>
     142:	89 2b       	or	r24, r25
     144:	39 f0       	breq	.+14     	; 0x154 <_Z18NextCalibrateStagev+0x22>
     146:	08 95       	ret
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	91 05       	cpc	r25, r1
     14c:	f1 f0       	breq	.+60     	; 0x18a <_Z18NextCalibrateStagev+0x58>
     14e:	03 97       	sbiw	r24, 0x03	; 3
     150:	69 f1       	breq	.+90     	; 0x1ac <_Z18NextCalibrateStagev+0x7a>
     152:	08 95       	ret
	{
		case CalibrateStage::No:
			calibrateStage = CalibrateStage::Left;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 0f 03 	sts	0x030F, r25
     15c:	80 93 0e 03 	sts	0x030E, r24
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     160:	ae 98       	cbi	0x15, 6	; 21
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     162:	af 9a       	sbi	0x15, 7	; 21

			GreenLed.Clear();
			RedLed.Set();
			
			ICR1 = 0b1111111111;
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	93 e0       	ldi	r25, 0x03	; 3
     168:	97 bd       	out	0x27, r25	; 39
     16a:	86 bd       	out	0x26, r24	; 38
		break;
     16c:	08 95       	ret
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     16e:	af 98       	cbi	0x15, 7	; 21
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     170:	ae 9a       	sbi	0x15, 6	; 21
		CalculatedPosition = (uint16_t)(((Spin<<8) |(AngleValue)) - (ErrorValue));
	}

	void SetZeroPosition()
	{
		Spin = 0;
     172:	ec e1       	ldi	r30, 0x1C	; 28
     174:	f3 e0       	ldi	r31, 0x03	; 3
     176:	14 82       	std	Z+4, r1	; 0x04
		ErrorValue = AngleValue;
     178:	82 81       	ldd	r24, Z+2	; 0x02
     17a:	85 83       	std	Z+5, r24	; 0x05
			
			RedLed.Clear();
			GreenLed.Set();
			
			AS5048AChip.SetZeroPosition();
			calibrateStage = CalibrateStage::Right;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 0f 03 	sts	0x030F, r25
     184:	80 93 0e 03 	sts	0x030E, r24
		break;
     188:	08 95       	ret
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     18a:	af 98       	cbi	0x15, 7	; 21
     18c:	ae 98       	cbi	0x15, 6	; 21

		case CalibrateStage::Right:
			RedLed.Clear();
			GreenLed.Clear();
			calibrateStage = CalibrateStage::Calibrated;
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 0f 03 	sts	0x030F, r25
     196:	80 93 0e 03 	sts	0x030E, r24
			RotateLimit = (AS5048AChip.CalculatedPosition);
     19a:	80 91 1c 03 	lds	r24, 0x031C
     19e:	90 91 1d 03 	lds	r25, 0x031D
     1a2:	90 93 2d 03 	sts	0x032D, r25
     1a6:	80 93 2c 03 	sts	0x032C, r24
		break;
     1aa:	08 95       	ret
		case CalibrateStage::Calibrated:
			calibrateStage = CalibrateStage::No;
     1ac:	10 92 0f 03 	sts	0x030F, r1
     1b0:	10 92 0e 03 	sts	0x030E, r1
     1b4:	08 95       	ret

000001b6 <_Z36ShiftRegisterToMjoyButtonsTranslatorv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     1b6:	85 b3       	in	r24, 0x15	; 21
     1b8:	8f 63       	ori	r24, 0x3F	; 63
     1ba:	85 bb       	out	0x15, r24	; 21
	MjoyButton1.FastSet();
	MjoyButton2.FastSet();
	MjoyButton3.FastSet();
	MjoyButton4.FastSet();
	MjoyButton5.FastSet();
	if ((wheelButtons.lastData) & (1<<8)) {calibrateStage = CalibrateStage::Left; NextCalibrateStage();}
     1bc:	80 91 1a 03 	lds	r24, 0x031A
     1c0:	90 91 1b 03 	lds	r25, 0x031B
     1c4:	90 ff       	sbrs	r25, 0
     1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <_Z36ShiftRegisterToMjoyButtonsTranslatorv+0x22>
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 0f 03 	sts	0x030F, r25
     1d0:	80 93 0e 03 	sts	0x030E, r24
     1d4:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
	if ((wheelButtons.lastData) & (1<<7)) {calibrateStage = CalibrateStage::Right; NextCalibrateStage();}
     1d8:	80 91 1a 03 	lds	r24, 0x031A
     1dc:	90 91 1b 03 	lds	r25, 0x031B
     1e0:	87 ff       	sbrs	r24, 7
     1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <_Z36ShiftRegisterToMjoyButtonsTranslatorv+0x3e>
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	90 93 0f 03 	sts	0x030F, r25
     1ec:	80 93 0e 03 	sts	0x030E, r24
     1f0:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
	if ((wheelButtons.lastData) & (1<<11)) {MjoyButton0.Clear();}
     1f4:	80 91 1a 03 	lds	r24, 0x031A
     1f8:	90 91 1b 03 	lds	r25, 0x031B
     1fc:	93 fd       	sbrc	r25, 3
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     1fe:	a8 98       	cbi	0x15, 0	; 21
	if ((wheelButtons.lastData) & (1<<15)) {MjoyButton1.Clear();}
     200:	80 91 1a 03 	lds	r24, 0x031A
     204:	90 91 1b 03 	lds	r25, 0x031B
     208:	99 23       	and	r25, r25
     20a:	0c f4       	brge	.+2      	; 0x20e <_Z36ShiftRegisterToMjoyButtonsTranslatorv+0x58>
     20c:	a9 98       	cbi	0x15, 1	; 21
	if ((wheelButtons.lastData) & (1<<14)) {MjoyButton2.Clear();}
     20e:	80 91 1a 03 	lds	r24, 0x031A
     212:	90 91 1b 03 	lds	r25, 0x031B
     216:	96 fd       	sbrc	r25, 6
     218:	aa 98       	cbi	0x15, 2	; 21
	if ((wheelButtons.lastData) & (1<<13)) {MjoyButton3.Clear();}
     21a:	80 91 1a 03 	lds	r24, 0x031A
     21e:	90 91 1b 03 	lds	r25, 0x031B
     222:	95 fd       	sbrc	r25, 5
     224:	ab 98       	cbi	0x15, 3	; 21
	if ((wheelButtons.lastData) & (1<<9)) {MjoyButton4.Clear();}
     226:	80 91 1a 03 	lds	r24, 0x031A
     22a:	90 91 1b 03 	lds	r25, 0x031B
     22e:	91 fd       	sbrc	r25, 1
     230:	ac 98       	cbi	0x15, 4	; 21
	if ((wheelButtons.lastData) & (1<<5)) {MjoyButton5.Clear();}
     232:	80 91 1a 03 	lds	r24, 0x031A
     236:	90 91 1b 03 	lds	r25, 0x031B
     23a:	85 fd       	sbrc	r24, 5
     23c:	ad 98       	cbi	0x15, 5	; 21
     23e:	08 95       	ret

00000240 <_Z12KeyboardTaskP4Task>:
}

void KeyboardTask(Task * task)
{
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
		_RegisterPL->Clear();
	}

	uint8_t ReadData()
	{
		_RegisterPL->Set();
     248:	c4 e1       	ldi	r28, 0x14	; 20
     24a:	d3 e0       	ldi	r29, 0x03	; 3
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	9b 81       	ldd	r25, Y+3	; 0x03
     250:	dc 01       	movw	r26, r24
     252:	ed 91       	ld	r30, X+
     254:	fc 91       	ld	r31, X
     256:	06 84       	ldd	r0, Z+14	; 0x0e
     258:	f7 85       	ldd	r31, Z+15	; 0x0f
     25a:	e0 2d       	mov	r30, r0
     25c:	09 95       	icall
		_RegisterPL->Clear();
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	dc 01       	movw	r26, r24
     264:	ed 91       	ld	r30, X+
     266:	fc 91       	ld	r31, X
     268:	00 88       	ldd	r0, Z+16	; 0x10
     26a:	f1 89       	ldd	r31, Z+17	; 0x11
     26c:	e0 2d       	mov	r30, r0
     26e:	09 95       	icall
		lastData = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	9f 83       	std	Y+7, r25	; 0x07
     276:	8e 83       	std	Y+6, r24	; 0x06
     278:	07 e1       	ldi	r16, 0x17	; 23
     27a:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 22;i >=0;i--)
		{
			_RegisterClk->Clear();
     27c:	88 81       	ld	r24, Y
     27e:	99 81       	ldd	r25, Y+1	; 0x01
     280:	dc 01       	movw	r26, r24
     282:	ed 91       	ld	r30, X+
     284:	fc 91       	ld	r31, X
     286:	00 88       	ldd	r0, Z+16	; 0x10
     288:	f1 89       	ldd	r31, Z+17	; 0x11
     28a:	e0 2d       	mov	r30, r0
     28c:	09 95       	icall
			lastData <<= 1;
     28e:	8e 81       	ldd	r24, Y+6	; 0x06
     290:	9f 81       	ldd	r25, Y+7	; 0x07
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	9f 83       	std	Y+7, r25	; 0x07
     298:	8e 83       	std	Y+6, r24	; 0x06
			if (!_RegisterQ7->Check())
     29a:	8c 81       	ldd	r24, Y+4	; 0x04
     29c:	9d 81       	ldd	r25, Y+5	; 0x05
     29e:	dc 01       	movw	r26, r24
     2a0:	ed 91       	ld	r30, X+
     2a2:	fc 91       	ld	r31, X
     2a4:	04 84       	ldd	r0, Z+12	; 0x0c
     2a6:	f5 85       	ldd	r31, Z+13	; 0x0d
     2a8:	e0 2d       	mov	r30, r0
     2aa:	09 95       	icall
     2ac:	81 11       	cpse	r24, r1
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <_Z12KeyboardTaskP4Task+0x7a>
			{
				lastData++;
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	9f 81       	ldd	r25, Y+7	; 0x07
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	9f 83       	std	Y+7, r25	; 0x07
     2b8:	8e 83       	std	Y+6, r24	; 0x06
			}
			_RegisterClk->Set();
     2ba:	88 81       	ld	r24, Y
     2bc:	99 81       	ldd	r25, Y+1	; 0x01
     2be:	dc 01       	movw	r26, r24
     2c0:	ed 91       	ld	r30, X+
     2c2:	fc 91       	ld	r31, X
     2c4:	06 84       	ldd	r0, Z+14	; 0x0e
     2c6:	f7 85       	ldd	r31, Z+15	; 0x0f
     2c8:	e0 2d       	mov	r30, r0
     2ca:	09 95       	icall
     2cc:	01 50       	subi	r16, 0x01	; 1
     2ce:	11 09       	sbc	r17, r1
	uint8_t ReadData()
	{
		_RegisterPL->Set();
		_RegisterPL->Clear();
		lastData = 1;
		for (int i = 22;i >=0;i--)
     2d0:	a9 f6       	brne	.-86     	; 0x27c <_Z12KeyboardTaskP4Task+0x3c>
			{
				lastData++;
			}
			_RegisterClk->Set();
		}
		return lastData;
     2d2:	80 91 1a 03 	lds	r24, 0x031A
     2d6:	90 91 1b 03 	lds	r25, 0x031B
	wheelButtons.ReadData();
	ShiftRegisterToMjoyButtonsTranslator();
     2da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z36ShiftRegisterToMjoyButtonsTranslatorv>
}
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <_Z13RegisterTasksv>:

void RegisterTasks()
{
	keyboardTask.currentMethod = KeyboardTask;
     2e8:	80 e2       	ldi	r24, 0x20	; 32
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	90 93 13 03 	sts	0x0313, r25
     2f0:	80 93 12 03 	sts	0x0312, r24
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
     2f4:	80 91 2e 03 	lds	r24, 0x032E
     2f8:	90 91 2f 03 	lds	r25, 0x032F
     2fc:	89 2b       	or	r24, r25
     2fe:	61 f0       	breq	.+24     	; 0x318 <_Z13RegisterTasksv+0x30>
     300:	e0 e3       	ldi	r30, 0x30	; 48
     302:	f3 e0       	ldi	r31, 0x03	; 3
     304:	4e e3       	ldi	r20, 0x3E	; 62
     306:	53 e0       	ldi	r21, 0x03	; 3
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	bc 01       	movw	r22, r24
     30e:	21 91       	ld	r18, Z+
     310:	31 91       	ld	r19, Z+
     312:	23 2b       	or	r18, r19
     314:	79 f4       	brne	.+30     	; 0x334 <_Z13RegisterTasksv+0x4c>
     316:	02 c0       	rjmp	.+4      	; 0x31c <_Z13RegisterTasksv+0x34>
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
     31c:	fb 01       	movw	r30, r22
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	e2 5d       	subi	r30, 0xD2	; 210
     324:	fc 4f       	sbci	r31, 0xFC	; 252
     326:	a0 e1       	ldi	r26, 0x10	; 16
     328:	b3 e0       	ldi	r27, 0x03	; 3
     32a:	b1 83       	std	Z+1, r27	; 0x01
     32c:	a0 83       	st	Z, r26
	task.AlocateNumber = positionIndicator;
     32e:	6d 93       	st	X+, r22
     330:	7c 93       	st	X, r23
     332:	08 95       	ret
     334:	01 96       	adiw	r24, 0x01	; 1

void Register(Task& task)
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
     336:	e4 17       	cp	r30, r20
     338:	f5 07       	cpc	r31, r21
     33a:	41 f7       	brne	.-48     	; 0x30c <_Z13RegisterTasksv+0x24>
     33c:	08 95       	ret

0000033e <_Z13PWMInitializev>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     33e:	8d 9a       	sbi	0x11, 5	; 17
			FastPWM_OVR1A = 15
		};

		void static WaveFormMode(const WaveFormModes waveFormsModes)
		{
			CLEAR(TCCR1B,(1<<WGM12)|(1<<WGM13));
     340:	8e b5       	in	r24, 0x2e	; 46
     342:	87 7e       	andi	r24, 0xE7	; 231
     344:	8e bd       	out	0x2e, r24	; 46
			CLEAR(TCCR1A,(1<<WGM10)|(1<<WGM11));
     346:	8f b5       	in	r24, 0x2f	; 47
     348:	8c 7f       	andi	r24, 0xFC	; 252
     34a:	8f bd       	out	0x2f, r24	; 47
			switch (waveFormsModes)
			{
				case WaveFormModes::PhaseCorrect_ICR1:
				SET(TCCR1A,1<<WGM11);
     34c:	8f b5       	in	r24, 0x2f	; 47
     34e:	82 60       	ori	r24, 0x02	; 2
     350:	8f bd       	out	0x2f, r24	; 47
				SET(TCCR1B,1<<WGM13);
     352:	8e b5       	in	r24, 0x2e	; 46
     354:	80 61       	ori	r24, 0x10	; 16
     356:	8e bd       	out	0x2e, r24	; 46
		void static PWMPhaseCorrectCompareOutputMode(PWMPhaseCorrectCompareOutputModes modes)
		{
			switch (modes)
			{
				case PWMPhaseCorrectCompareOutputModes::ClearUpCountingSetDownCounting:
				SET(TCCR1A,(1<<COM1A1));
     358:	8f b5       	in	r24, 0x2f	; 47
     35a:	80 68       	ori	r24, 0x80	; 128
     35c:	8f bd       	out	0x2f, r24	; 47
			Prescaler_1 = (1<<CS10),
		};
		
		void static SetPrescaler(Prescaler prescaler)
		{
			CLEAR(TCCR1B,(1<<CS10)|(1<<CS11)|(1<<CS12));
     35e:	8e b5       	in	r24, 0x2e	; 46
     360:	88 7f       	andi	r24, 0xF8	; 248
     362:	8e bd       	out	0x2e, r24	; 46
			SET(TCCR1B,(uint8_t)prescaler);
     364:	8e b5       	in	r24, 0x2e	; 46
     366:	81 60       	ori	r24, 0x01	; 1
     368:	8e bd       	out	0x2e, r24	; 46

	Timer1::WaveFormMode(Timer1::WaveFormModes::PhaseCorrect_ICR1);
	Timer1::PWMPhaseCorrectCompareOutputMode(Timer1::PWMPhaseCorrectCompareOutputModes::ClearUpCountingSetDownCounting);
	Timer1::SetPrescaler(Timer1::Prescaler::Prescaler_1);

	ICR1 = 0xffff;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	9f ef       	ldi	r25, 0xFF	; 255
     36e:	97 bd       	out	0x27, r25	; 39
     370:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;
     372:	1b bc       	out	0x2b, r1	; 43
     374:	1a bc       	out	0x2a, r1	; 42
     376:	08 95       	ret

00000378 <_Z10ComputePWMv>:
}

void ComputePWM()
{
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
	}

	void Enable()
	{
		_ChipSelect->Clear();
     390:	cc e1       	ldi	r28, 0x1C	; 28
     392:	d3 e0       	ldi	r29, 0x03	; 3
     394:	88 85       	ldd	r24, Y+8	; 0x08
     396:	99 85       	ldd	r25, Y+9	; 0x09
     398:	dc 01       	movw	r26, r24
     39a:	ed 91       	ld	r30, X+
     39c:	fc 91       	ld	r31, X
     39e:	00 88       	ldd	r0, Z+16	; 0x10
     3a0:	f1 89       	ldd	r31, Z+17	; 0x11
     3a2:	e0 2d       	mov	r30, r0
     3a4:	09 95       	icall
	}

	void ReadData()
	{
		Enable();
		lastAngleValue = AngleValue;
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	8b 83       	std	Y+3, r24	; 0x03
		SPDR = 0xff;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     3ae:	77 9b       	sbis	0x0e, 7	; 14
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <_Z10ComputePWMv+0x36>
		AngleValue = (SPDR&0b00011111)<<3 ;//First  byte
     3b2:	8f b1       	in	r24, 0x0f	; 15
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	80 93 1e 03 	sts	0x031E, r24
		SPDR = 0xff;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     3ca:	77 9b       	sbis	0x0e, 7	; 14
     3cc:	fe cf       	rjmp	.-4      	; 0x3ca <_Z10ComputePWMv+0x52>
		AngleValue |= (SPDR)>>5;//Second Byte
     3ce:	8f b1       	in	r24, 0x0f	; 15
     3d0:	cc e1       	ldi	r28, 0x1C	; 28
     3d2:	d3 e0       	ldi	r29, 0x03	; 3
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	95 95       	asr	r25
     3d8:	87 95       	ror	r24
     3da:	95 95       	asr	r25
     3dc:	87 95       	ror	r24
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	2a 81       	ldd	r18, Y+2	; 0x02
     3ec:	82 2b       	or	r24, r18
     3ee:	8a 83       	std	Y+2, r24	; 0x02
	{
		_ChipSelect->Clear();
	}
	void Disable()
	{
		_ChipSelect->Set();
     3f0:	88 85       	ldd	r24, Y+8	; 0x08
     3f2:	99 85       	ldd	r25, Y+9	; 0x09
     3f4:	dc 01       	movw	r26, r24
     3f6:	ed 91       	ld	r30, X+
     3f8:	fc 91       	ld	r31, X
     3fa:	06 84       	ldd	r0, Z+14	; 0x0e
     3fc:	f7 85       	ldd	r31, Z+15	; 0x0f
     3fe:	e0 2d       	mov	r30, r0
     400:	09 95       	icall
	}

	void ComputePosition()
	{
		ReadData();
		if (lastAngleValue > 192 && AngleValue <63 ) ++Spin;
     402:	8b 81       	ldd	r24, Y+3	; 0x03
     404:	81 3c       	cpi	r24, 0xC1	; 193
     406:	38 f0       	brcs	.+14     	; 0x416 <_Z10ComputePWMv+0x9e>
     408:	90 91 1e 03 	lds	r25, 0x031E
     40c:	9f 33       	cpi	r25, 0x3F	; 63
     40e:	18 f4       	brcc	.+6      	; 0x416 <_Z10ComputePWMv+0x9e>
     410:	9c 81       	ldd	r25, Y+4	; 0x04
     412:	9f 5f       	subi	r25, 0xFF	; 255
     414:	9c 83       	std	Y+4, r25	; 0x04
		if (AngleValue > 192 && lastAngleValue<63 )	--Spin;
     416:	60 91 1e 03 	lds	r22, 0x031E
     41a:	61 3c       	cpi	r22, 0xC1	; 193
     41c:	38 f0       	brcs	.+14     	; 0x42c <_Z10ComputePWMv+0xb4>
     41e:	8f 33       	cpi	r24, 0x3F	; 63
     420:	28 f4       	brcc	.+10     	; 0x42c <_Z10ComputePWMv+0xb4>
     422:	ec e1       	ldi	r30, 0x1C	; 28
     424:	f3 e0       	ldi	r31, 0x03	; 3
     426:	84 81       	ldd	r24, Z+4	; 0x04
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	84 83       	std	Z+4, r24	; 0x04

		CalculatedPosition = (uint16_t)(((Spin<<8) |(AngleValue)) - (ErrorValue));
     42c:	ec e1       	ldi	r30, 0x1C	; 28
     42e:	f3 e0       	ldi	r31, 0x03	; 3
     430:	84 81       	ldd	r24, Z+4	; 0x04
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	78 2b       	or	r23, r24
     436:	85 81       	ldd	r24, Z+5	; 0x05
     438:	eb 01       	movw	r28, r22
     43a:	c8 1b       	sub	r28, r24
     43c:	d1 09       	sbc	r29, r1
     43e:	d1 83       	std	Z+1, r29	; 0x01
     440:	c0 83       	st	Z, r28
	AS5048AChip.ComputePosition();
	if ( (AS5048AChip.CalculatedPosition) <= RotateLimit)
     442:	80 91 2c 03 	lds	r24, 0x032C
     446:	90 91 2d 03 	lds	r25, 0x032D
     44a:	8c 17       	cp	r24, r28
     44c:	9d 07       	cpc	r25, r29
     44e:	40 f1       	brcs	.+80     	; 0x4a0 <__stack+0x41>
	{
		OCR1A = (ICR1*((float)AS5048AChip.CalculatedPosition/RotateLimit));
     450:	66 b5       	in	r22, 0x26	; 38
     452:	77 b5       	in	r23, 0x27	; 39
     454:	00 91 2c 03 	lds	r16, 0x032C
     458:	10 91 2d 03 	lds	r17, 0x032D
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 06 08 	call	0x100c	; 0x100c <__floatunsisf>
     464:	6b 01       	movw	r12, r22
     466:	7c 01       	movw	r14, r24
     468:	be 01       	movw	r22, r28
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 06 08 	call	0x100c	; 0x100c <__floatunsisf>
     472:	4b 01       	movw	r8, r22
     474:	5c 01       	movw	r10, r24
     476:	b8 01       	movw	r22, r16
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 06 08 	call	0x100c	; 0x100c <__floatunsisf>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c5 01       	movw	r24, r10
     486:	b4 01       	movw	r22, r8
     488:	0e 94 65 07 	call	0xeca	; 0xeca <__divsf3>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c7 01       	movw	r24, r14
     492:	b6 01       	movw	r22, r12
     494:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
     498:	0e 94 d7 07 	call	0xfae	; 0xfae <__fixunssfsi>
     49c:	7b bd       	out	0x2b, r23	; 43
     49e:	6a bd       	out	0x2a, r22	; 42
	}
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	08 95       	ret

000004ba <_Z15InitializePortsv>:


void InitializePorts()
{
	PORTD= PORTC = PORTB= DDRB = DDRD =  DDRC = DDRA = 0xff;
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	8a bb       	out	0x1a, r24	; 26
     4be:	84 bb       	out	0x14, r24	; 20
     4c0:	81 bb       	out	0x11, r24	; 17
     4c2:	87 bb       	out	0x17, r24	; 23
     4c4:	88 bb       	out	0x18, r24	; 24
     4c6:	85 bb       	out	0x15, r24	; 21
     4c8:	82 bb       	out	0x12, r24	; 18
     4ca:	a7 9a       	sbi	0x14, 7	; 20
     4cc:	a6 9a       	sbi	0x14, 6	; 20
     4ce:	08 95       	ret

000004d0 <_Z17InitializeProgramv>:
	RedLed.AsOutput();
	GreenLed.AsOutput();
}

void InitializeProgram()
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
	InitializePorts();
     4d4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z15InitializePortsv>
		_Clk = &Clk;
	}

	void Initalize()
	{
		_ChipSelect->AsOutput();
     4d8:	cc e1       	ldi	r28, 0x1C	; 28
     4da:	d3 e0       	ldi	r29, 0x03	; 3
     4dc:	88 85       	ldd	r24, Y+8	; 0x08
     4de:	99 85       	ldd	r25, Y+9	; 0x09
     4e0:	dc 01       	movw	r26, r24
     4e2:	ed 91       	ld	r30, X+
     4e4:	fc 91       	ld	r31, X
     4e6:	04 88       	ldd	r0, Z+20	; 0x14
     4e8:	f5 89       	ldd	r31, Z+21	; 0x15
     4ea:	e0 2d       	mov	r30, r0
     4ec:	09 95       	icall
		_Miso->AsInput();
     4ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     4f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     4f2:	dc 01       	movw	r26, r24
     4f4:	ed 91       	ld	r30, X+
     4f6:	fc 91       	ld	r31, X
     4f8:	06 88       	ldd	r0, Z+22	; 0x16
     4fa:	f7 89       	ldd	r31, Z+23	; 0x17
     4fc:	e0 2d       	mov	r30, r0
     4fe:	09 95       	icall
		_Mosi->AsOutput();
     500:	8e 81       	ldd	r24, Y+6	; 0x06
     502:	9f 81       	ldd	r25, Y+7	; 0x07
     504:	dc 01       	movw	r26, r24
     506:	ed 91       	ld	r30, X+
     508:	fc 91       	ld	r31, X
     50a:	04 88       	ldd	r0, Z+20	; 0x14
     50c:	f5 89       	ldd	r31, Z+21	; 0x15
     50e:	e0 2d       	mov	r30, r0
     510:	09 95       	icall
		_Clk->AsOutput();
     512:	8a 85       	ldd	r24, Y+10	; 0x0a
     514:	9b 85       	ldd	r25, Y+11	; 0x0b
     516:	dc 01       	movw	r26, r24
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	04 88       	ldd	r0, Z+20	; 0x14
     51e:	f5 89       	ldd	r31, Z+21	; 0x15
     520:	e0 2d       	mov	r30, r0
     522:	09 95       	icall
		_SS->AsOutput();
     524:	8e 85       	ldd	r24, Y+14	; 0x0e
     526:	9f 85       	ldd	r25, Y+15	; 0x0f
     528:	dc 01       	movw	r26, r24
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	04 88       	ldd	r0, Z+20	; 0x14
     530:	f5 89       	ldd	r31, Z+21	; 0x15
     532:	e0 2d       	mov	r30, r0
     534:	09 95       	icall
	{
		_ChipSelect->Clear();
	}
	void Disable()
	{
		_ChipSelect->Set();
     536:	88 85       	ldd	r24, Y+8	; 0x08
     538:	99 85       	ldd	r25, Y+9	; 0x09
     53a:	dc 01       	movw	r26, r24
     53c:	ed 91       	ld	r30, X+
     53e:	fc 91       	ld	r31, X
     540:	06 84       	ldd	r0, Z+14	; 0x0e
     542:	f7 85       	ldd	r31, Z+15	; 0x0f
     544:	e0 2d       	mov	r30, r0
     546:	09 95       	icall
	class SPI
	{
	public:
		void static InitializeAsMaster()
		{
			SPCR = 0;
     548:	1d b8       	out	0x0d, r1	; 13
			SPIEnable();
		}

		void static AsMaster()
		{
			SET(SPCR,(1<<MSTR));
     54a:	6c 9a       	sbi	0x0d, 4	; 13
			CLEAR(SPCR,(1<<SPIE));
		}

		void static SPIEnable()
		{
			SET(SPCR,(1<<SPE));
     54c:	6e 9a       	sbi	0x0d, 6	; 13
			SET(SPCR,(uint8_t)prescaler);
		}

		void static SetDoubleSpeed()
		{
			SET(SPSR,SPI2X);
     54e:	8e b1       	in	r24, 0x0e	; 14
     550:	8e b9       	out	0x0e, r24	; 14
		ErrorValue = AngleValue;
	}

	void Enable()
	{
		_ChipSelect->Clear();
     552:	88 85       	ldd	r24, Y+8	; 0x08
     554:	99 85       	ldd	r25, Y+9	; 0x09
     556:	dc 01       	movw	r26, r24
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	00 88       	ldd	r0, Z+16	; 0x10
     55e:	f1 89       	ldd	r31, Z+17	; 0x11
     560:	e0 2d       	mov	r30, r0
     562:	09 95       	icall
		Disable();
		SPI::InitializeAsMaster();
		SPI::SetDoubleSpeed();
		Enable();
		
		SPDR = 0xff;
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     568:	77 9b       	sbis	0x0e, 7	; 14
     56a:	fe cf       	rjmp	.-4      	; 0x568 <_Z17InitializeProgramv+0x98>
		SPDR = 0xff;
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     570:	77 9b       	sbis	0x0e, 7	; 14
     572:	fe cf       	rjmp	.-4      	; 0x570 <_Z17InitializeProgramv+0xa0>
	{
		_ChipSelect->Clear();
	}
	void Disable()
	{
		_ChipSelect->Set();
     574:	cc e1       	ldi	r28, 0x1C	; 28
     576:	d3 e0       	ldi	r29, 0x03	; 3
     578:	88 85       	ldd	r24, Y+8	; 0x08
     57a:	99 85       	ldd	r25, Y+9	; 0x09
     57c:	dc 01       	movw	r26, r24
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	06 84       	ldd	r0, Z+14	; 0x0e
     584:	f7 85       	ldd	r31, Z+15	; 0x0f
     586:	e0 2d       	mov	r30, r0
     588:	09 95       	icall
     58a:	88 85       	ldd	r24, Y+8	; 0x08
     58c:	99 85       	ldd	r25, Y+9	; 0x09
     58e:	dc 01       	movw	r26, r24
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	06 84       	ldd	r0, Z+14	; 0x0e
     596:	f7 85       	ldd	r31, Z+15	; 0x0f
     598:	e0 2d       	mov	r30, r0
     59a:	09 95       	icall
	AS5048AChip.Initalize();
	AS5048AChip.Disable();
	#ifdef DebugMode__
	debugDisplay.Enable();
	#endif
	RegisterTasks();
     59c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z13RegisterTasksv>
	class Timer0
	{
	public:
		void static SetCompareValue(uint8_t compareRegisterValue)
		{
			OCR0 = compareRegisterValue;
     5a0:	87 e0       	ldi	r24, 0x07	; 7
     5a2:	8c bf       	out	0x3c, r24	; 60
			SET(TCCR0,(uint8_t)prescaler);
		}

		static void WaveFormMode(WaveForms waveForms)
		{
			CLEAR(TCCR0,(1<<WGM01)||(1<<WGM00));
     5a4:	83 b7       	in	r24, 0x33	; 51
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)waveForms);
     5aa:	83 b7       	in	r24, 0x33	; 51
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	83 bf       	out	0x33, r24	; 51
			AllBitsSet = CompareAndOverFlowInterrupts
		};

		volatile void static SetInterrupts(InterruptMask interrupt)
		{
			CLEAR(TIMSK,(TOIE0,OCIE0));
     5b0:	89 b7       	in	r24, 0x39	; 57
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	89 bf       	out	0x39, r24	; 57
			TIMSK |= interrupt;
     5b6:	89 b7       	in	r24, 0x39	; 57
     5b8:	82 60       	ori	r24, 0x02	; 2
     5ba:	89 bf       	out	0x39, r24	; 57
			SET(SFIOR,(1<<PSR10));
		}

		static void SetPrescaler(Prescalers prescaler)
		{
			CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
     5bc:	83 b7       	in	r24, 0x33	; 51
     5be:	88 7f       	andi	r24, 0xF8	; 248
     5c0:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)prescaler);
     5c2:	83 b7       	in	r24, 0x33	; 51
     5c4:	84 60       	ori	r24, 0x04	; 4
     5c6:	83 bf       	out	0x33, r24	; 51
{
	Timer0::SetCompareValue(7); 
	Timer0::WaveFormMode(Timer0::WaveForms::CTC);
	Timer0::SetInterrupts(CodeEasyAvr::Timer0::CompareMatchInterrupt);
	Timer0::SetPrescaler(Timer0::Prescalers::Prescaler_256);
	sei();
     5c8:	78 94       	sei
	#ifdef DebugMode__
	debugDisplay.Enable();
	#endif
	RegisterTasks();
	EnableAsync();
	PWMInitialize();
     5ca:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z13PWMInitializev>
		_RegisterQ7 = &Q;
	}

	void Initialize()
	{
		_RegisterClk->AsOutput();
     5ce:	c4 e1       	ldi	r28, 0x14	; 20
     5d0:	d3 e0       	ldi	r29, 0x03	; 3
     5d2:	88 81       	ld	r24, Y
     5d4:	99 81       	ldd	r25, Y+1	; 0x01
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	04 88       	ldd	r0, Z+20	; 0x14
     5de:	f5 89       	ldd	r31, Z+21	; 0x15
     5e0:	e0 2d       	mov	r30, r0
     5e2:	09 95       	icall
		_RegisterPL->AsOutput();
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	9b 81       	ldd	r25, Y+3	; 0x03
     5e8:	dc 01       	movw	r26, r24
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	04 88       	ldd	r0, Z+20	; 0x14
     5f0:	f5 89       	ldd	r31, Z+21	; 0x15
     5f2:	e0 2d       	mov	r30, r0
     5f4:	09 95       	icall
		_RegisterQ7->AsInput();
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	9d 81       	ldd	r25, Y+5	; 0x05
     5fa:	dc 01       	movw	r26, r24
     5fc:	ed 91       	ld	r30, X+
     5fe:	fc 91       	ld	r31, X
     600:	06 88       	ldd	r0, Z+22	; 0x16
     602:	f7 89       	ldd	r31, Z+23	; 0x17
     604:	e0 2d       	mov	r30, r0
     606:	09 95       	icall
		_RegisterPL->Clear();
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	9b 81       	ldd	r25, Y+3	; 0x03
     60c:	dc 01       	movw	r26, r24
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	00 88       	ldd	r0, Z+16	; 0x10
     614:	f1 89       	ldd	r31, Z+17	; 0x11
     616:	e0 2d       	mov	r30, r0
     618:	09 95       	icall
	wheelButtons.Initialize();
	NextCalibrateStage();
     61a:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <main>:
}
#endif

int main()
{
	InitializeProgram();
     624:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z17InitializeProgramv>
	while("forever")
	{
		ComputePWM();
     628:	0e 94 bc 01 	call	0x378	; 0x378 <_Z10ComputePWMv>
	debugDisplay.ChangeActiveLine(7);
	debugDisplay.PrintDataBin(OCR1A);
}
#endif

int main()
     62c:	fd cf       	rjmp	.-6      	; 0x628 <main+0x4>

0000062e <_GLOBAL__sub_I__Znwj>:
	Task* tasks[NumberOfTasks];
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
     62e:	10 92 3e 03 	sts	0x033E, r1
     632:	ee e2       	ldi	r30, 0x2E	; 46
     634:	f3 e0       	ldi	r31, 0x03	; 3
     636:	8e e3       	ldi	r24, 0x3E	; 62
     638:	93 e0       	ldi	r25, 0x03	; 3
	for (size_t i = 0; i < NumberOfTasks; i++)
	{
		tasks[i] = nullptr;
     63a:	11 92       	st	Z+, r1
     63c:	11 92       	st	Z+, r1
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
	for (size_t i = 0; i < NumberOfTasks; i++)
     63e:	e8 17       	cp	r30, r24
     640:	f9 07       	cpc	r31, r25
     642:	d9 f7       	brne	.-10     	; 0x63a <_GLOBAL__sub_I__Znwj+0xc>
	PinSBase * _Clk;
	PinSBase * _Miso;
	PinSBase * _SS;
public:
	AS5048A(PinSBase& Mosi, PinSBase &SS, PinSBase& Clk, PinSBase &Miso,PinSBase& ChipSelect)
	{
     644:	ec e1       	ldi	r30, 0x1C	; 28
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	11 82       	std	Z+1, r1	; 0x01
     64a:	10 82       	st	Z, r1
     64c:	12 82       	std	Z+2, r1	; 0x02
     64e:	13 82       	std	Z+3, r1	; 0x03
     650:	14 82       	std	Z+4, r1	; 0x04
     652:	15 82       	std	Z+5, r1	; 0x05
		_Miso = &Miso;
     654:	84 e7       	ldi	r24, 0x74	; 116
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	95 87       	std	Z+13, r25	; 0x0d
     65a:	84 87       	std	Z+12, r24	; 0x0c
		_Mosi = &Mosi;
     65c:	86 e7       	ldi	r24, 0x76	; 118
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	97 83       	std	Z+7, r25	; 0x07
     662:	86 83       	std	Z+6, r24	; 0x06
		_ChipSelect = &ChipSelect;
     664:	8a e7       	ldi	r24, 0x7A	; 122
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	91 87       	std	Z+9, r25	; 0x09
     66a:	80 87       	std	Z+8, r24	; 0x08
		_SS = &SS;
     66c:	88 e7       	ldi	r24, 0x78	; 120
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	97 87       	std	Z+15, r25	; 0x0f
     672:	86 87       	std	Z+14, r24	; 0x0e
		_Clk = &Clk;
     674:	82 e7       	ldi	r24, 0x72	; 114
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	93 87       	std	Z+11, r25	; 0x0b
     67a:	82 87       	std	Z+10, r24	; 0x0a
	PinSBase *_RegisterClk,*_RegisterPL,*_RegisterQ7;
	public:
	volatile uint16_t lastData;
	ShiftRegisterButtons(PinSBase &Clk, PinSBase &PL, PinSBase &Q)
	{
		_RegisterClk = &Clk;
     67c:	e4 e1       	ldi	r30, 0x14	; 20
     67e:	f3 e0       	ldi	r31, 0x03	; 3
     680:	82 e8       	ldi	r24, 0x82	; 130
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	80 83       	st	Z, r24
		_RegisterPL = &PL;
     688:	84 e8       	ldi	r24, 0x84	; 132
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	93 83       	std	Z+3, r25	; 0x03
     68e:	82 83       	std	Z+2, r24	; 0x02
		_RegisterQ7 = &Q;
     690:	86 e8       	ldi	r24, 0x86	; 134
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	95 83       	std	Z+5, r25	; 0x05
     696:	84 83       	std	Z+4, r24	; 0x04

class Task;

typedef void(*Func)(Task*);

class Task
     698:	10 92 13 03 	sts	0x0313, r1
     69c:	10 92 12 03 	sts	0x0312, r1
     6a0:	08 95       	ret

000006a2 <_GLOBAL__sub_D__Znwj>:
		debugDisplay.Enable();
		Debug();
		debugDisplay.Disable();
		#endif
	}
}
     6a2:	08 95       	ret

000006a4 <_ZN4PinSILh53ELh51ELh52ELh6EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     6a4:	ae 98       	cbi	0x15, 6	; 21
     6a6:	08 95       	ret

000006a8 <_ZN4PinSILh53ELh51ELh52ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     6a8:	af 9a       	sbi	0x15, 7	; 21
     6aa:	08 95       	ret

000006ac <_ZN4PinSILh53ELh51ELh52ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     6ac:	af 98       	cbi	0x15, 7	; 21
     6ae:	08 95       	ret

000006b0 <_ZN4PinSILh53ELh51ELh52ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     6b0:	ae 9a       	sbi	0x15, 6	; 21
     6b2:	08 95       	ret

000006b4 <_ZN4PinSILh53ELh51ELh52ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     6b4:	a8 9a       	sbi	0x15, 0	; 21
     6b6:	08 95       	ret

000006b8 <_ZN4PinSILh53ELh51ELh52ELh1EE7FastSetEv>:
     6b8:	a9 9a       	sbi	0x15, 1	; 21
     6ba:	08 95       	ret

000006bc <_ZN4PinSILh53ELh51ELh52ELh2EE7FastSetEv>:
     6bc:	aa 9a       	sbi	0x15, 2	; 21
     6be:	08 95       	ret

000006c0 <_ZN4PinSILh53ELh51ELh52ELh3EE7FastSetEv>:
     6c0:	ab 9a       	sbi	0x15, 3	; 21
     6c2:	08 95       	ret

000006c4 <_ZN4PinSILh53ELh51ELh52ELh4EE7FastSetEv>:
     6c4:	ac 9a       	sbi	0x15, 4	; 21
     6c6:	08 95       	ret

000006c8 <_ZN4PinSILh53ELh51ELh52ELh5EE7FastSetEv>:
     6c8:	ad 9a       	sbi	0x15, 5	; 21
     6ca:	08 95       	ret

000006cc <_ZN4PinSILh53ELh51ELh52ELh0EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     6cc:	a8 98       	cbi	0x15, 0	; 21
     6ce:	08 95       	ret

000006d0 <_ZN4PinSILh53ELh51ELh52ELh1EE5ClearEv>:
     6d0:	a9 98       	cbi	0x15, 1	; 21
     6d2:	08 95       	ret

000006d4 <_ZN4PinSILh53ELh51ELh52ELh2EE5ClearEv>:
     6d4:	aa 98       	cbi	0x15, 2	; 21
     6d6:	08 95       	ret

000006d8 <_ZN4PinSILh53ELh51ELh52ELh3EE5ClearEv>:
     6d8:	ab 98       	cbi	0x15, 3	; 21
     6da:	08 95       	ret

000006dc <_ZN4PinSILh53ELh51ELh52ELh4EE5ClearEv>:
     6dc:	ac 98       	cbi	0x15, 4	; 21
     6de:	08 95       	ret

000006e0 <_ZN4PinSILh53ELh51ELh52ELh5EE5ClearEv>:
     6e0:	ad 98       	cbi	0x15, 5	; 21
     6e2:	08 95       	ret

000006e4 <_ZN4PinSILh50ELh48ELh49ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     6e4:	8d 9a       	sbi	0x11, 5	; 17
     6e6:	08 95       	ret

000006e8 <_ZN4PinSILh53ELh51ELh52ELh7EE8AsOutputEv>:
     6e8:	a7 9a       	sbi	0x14, 7	; 20
     6ea:	08 95       	ret

000006ec <_ZN4PinSILh53ELh51ELh52ELh6EE8AsOutputEv>:
     6ec:	a6 9a       	sbi	0x14, 6	; 20
     6ee:	08 95       	ret

000006f0 <_ZN4PinSILh50ELh48ELh49ELh5EED1Ev>:
	virtual void AsInput(){}
	virtual ~PinSBase(){}
};

 template<const volatile uint8_t PortAddress,const volatile uint8_t PinAddress,const volatile uint8_t DdrAddress,const volatile uint8_t NOPin>
 class PinS : public PinSBase
     6f0:	08 95       	ret

000006f2 <_ZN4PinSILh53ELh51ELh52ELh0EED1Ev>:
     6f2:	08 95       	ret

000006f4 <_ZN4PinSILh53ELh51ELh52ELh1EED1Ev>:
     6f4:	08 95       	ret

000006f6 <_ZN4PinSILh53ELh51ELh52ELh2EED1Ev>:
     6f6:	08 95       	ret

000006f8 <_ZN4PinSILh53ELh51ELh52ELh3EED1Ev>:
     6f8:	08 95       	ret

000006fa <_ZN4PinSILh53ELh51ELh52ELh4EED1Ev>:
     6fa:	08 95       	ret

000006fc <_ZN4PinSILh53ELh51ELh52ELh5EED1Ev>:
     6fc:	08 95       	ret

000006fe <_ZN4PinSILh53ELh51ELh52ELh6EED1Ev>:
     6fe:	08 95       	ret

00000700 <_ZN4PinSILh53ELh51ELh52ELh7EED1Ev>:
     700:	08 95       	ret

00000702 <_ZN4PinSILh56ELh54ELh55ELh7EED1Ev>:
     702:	08 95       	ret

00000704 <_ZN4PinSILh56ELh54ELh55ELh6EED1Ev>:
     704:	08 95       	ret

00000706 <_ZN4PinSILh56ELh54ELh55ELh5EED1Ev>:
     706:	08 95       	ret

00000708 <_ZN4PinSILh56ELh54ELh55ELh4EED1Ev>:
     708:	08 95       	ret

0000070a <_ZN4PinSILh56ELh54ELh55ELh3EED1Ev>:
     70a:	08 95       	ret

0000070c <_ZN4PinSILh56ELh54ELh55ELh2EED1Ev>:
     70c:	08 95       	ret

0000070e <_ZN4PinSILh56ELh54ELh55ELh1EED1Ev>:
     70e:	08 95       	ret

00000710 <_ZN4PinSILh56ELh54ELh55ELh0EED1Ev>:
     710:	08 95       	ret

00000712 <_ZN4PinSILh59ELh57ELh58ELh2EED1Ev>:
     712:	08 95       	ret

00000714 <_ZN4PinSILh59ELh57ELh58ELh1EED1Ev>:
     714:	08 95       	ret

00000716 <_ZN4PinSILh59ELh57ELh58ELh0EED1Ev>:
     716:	08 95       	ret

00000718 <_ZN4PinSILh50ELh48ELh49ELh5EE7FastSetEv>:
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     718:	95 9a       	sbi	0x12, 5	; 18
     71a:	08 95       	ret

0000071c <_ZN4PinSILh50ELh48ELh49ELh5EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     71c:	95 98       	cbi	0x12, 5	; 18
     71e:	08 95       	ret

00000720 <_ZN4PinSILh50ELh48ELh49ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     720:	92 b3       	in	r25, 0x12	; 18
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	89 27       	eor	r24, r25
     726:	82 bb       	out	0x12, r24	; 18
     728:	08 95       	ret

0000072a <_ZN4PinSILh50ELh48ELh49ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     72a:	8d 9a       	sbi	0x11, 5	; 17
     72c:	08 95       	ret

0000072e <_ZN4PinSILh50ELh48ELh49ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     72e:	8d 98       	cbi	0x11, 5	; 17
     730:	08 95       	ret

00000732 <_ZN4PinSILh50ELh48ELh49ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     732:	66 23       	and	r22, r22
     734:	41 f0       	breq	.+16     	; 0x746 <_ZN4PinSILh50ELh48ELh49ELh5EE7BoolSetEb+0x14>
			Set();
     736:	dc 01       	movw	r26, r24
     738:	ed 91       	ld	r30, X+
     73a:	fc 91       	ld	r31, X
     73c:	06 84       	ldd	r0, Z+14	; 0x0e
     73e:	f7 85       	ldd	r31, Z+15	; 0x0f
     740:	e0 2d       	mov	r30, r0
     742:	09 95       	icall
     744:	08 95       	ret
		else
			Clear();
     746:	dc 01       	movw	r26, r24
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	00 88       	ldd	r0, Z+16	; 0x10
     74e:	f1 89       	ldd	r31, Z+17	; 0x11
     750:	e0 2d       	mov	r30, r0
     752:	09 95       	icall
     754:	08 95       	ret

00000756 <_ZN4PinSILh50ELh48ELh49ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     756:	80 b3       	in	r24, 0x10	; 16
    }
     758:	85 fb       	bst	r24, 5
     75a:	88 27       	eor	r24, r24
     75c:	80 f9       	bld	r24, 0
     75e:	08 95       	ret

00000760 <_ZN4PinSILh50ELh48ELh49ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     760:	95 9a       	sbi	0x12, 5	; 18
     762:	08 95       	ret

00000764 <_ZN4PinSILh50ELh48ELh49ELh5EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     764:	95 98       	cbi	0x12, 5	; 18
     766:	08 95       	ret

00000768 <_ZN4PinSILh50ELh48ELh49ELh5EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     768:	92 b3       	in	r25, 0x12	; 18
     76a:	80 e2       	ldi	r24, 0x20	; 32
     76c:	89 27       	eor	r24, r25
     76e:	82 bb       	out	0x12, r24	; 18
     770:	08 95       	ret

00000772 <_ZN4PinSILh50ELh48ELh49ELh5EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     772:	8d 98       	cbi	0x11, 5	; 17
     774:	08 95       	ret

00000776 <_ZN4PinSILh53ELh51ELh52ELh0EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     776:	a8 98       	cbi	0x15, 0	; 21
     778:	08 95       	ret

0000077a <_ZN4PinSILh53ELh51ELh52ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     77a:	95 b3       	in	r25, 0x15	; 21
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	89 27       	eor	r24, r25
     780:	85 bb       	out	0x15, r24	; 21
     782:	08 95       	ret

00000784 <_ZN4PinSILh53ELh51ELh52ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     784:	a0 9a       	sbi	0x14, 0	; 20
     786:	08 95       	ret

00000788 <_ZN4PinSILh53ELh51ELh52ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     788:	a0 98       	cbi	0x14, 0	; 20
     78a:	08 95       	ret

0000078c <_ZN4PinSILh53ELh51ELh52ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     78c:	66 23       	and	r22, r22
     78e:	41 f0       	breq	.+16     	; 0x7a0 <_ZN4PinSILh53ELh51ELh52ELh0EE7BoolSetEb+0x14>
			Set();
     790:	dc 01       	movw	r26, r24
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	06 84       	ldd	r0, Z+14	; 0x0e
     798:	f7 85       	ldd	r31, Z+15	; 0x0f
     79a:	e0 2d       	mov	r30, r0
     79c:	09 95       	icall
     79e:	08 95       	ret
		else
			Clear();
     7a0:	dc 01       	movw	r26, r24
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	00 88       	ldd	r0, Z+16	; 0x10
     7a8:	f1 89       	ldd	r31, Z+17	; 0x11
     7aa:	e0 2d       	mov	r30, r0
     7ac:	09 95       	icall
     7ae:	08 95       	ret

000007b0 <_ZN4PinSILh53ELh51ELh52ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     7b0:	83 b3       	in	r24, 0x13	; 19
    }
     7b2:	81 70       	andi	r24, 0x01	; 1
     7b4:	08 95       	ret

000007b6 <_ZN4PinSILh53ELh51ELh52ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     7b6:	a8 9a       	sbi	0x15, 0	; 21
     7b8:	08 95       	ret

000007ba <_ZN4PinSILh53ELh51ELh52ELh0EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     7ba:	95 b3       	in	r25, 0x15	; 21
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 27       	eor	r24, r25
     7c0:	85 bb       	out	0x15, r24	; 21
     7c2:	08 95       	ret

000007c4 <_ZN4PinSILh53ELh51ELh52ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     7c4:	a0 9a       	sbi	0x14, 0	; 20
     7c6:	08 95       	ret

000007c8 <_ZN4PinSILh53ELh51ELh52ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     7c8:	a0 98       	cbi	0x14, 0	; 20
     7ca:	08 95       	ret

000007cc <_ZN4PinSILh53ELh51ELh52ELh1EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     7cc:	a9 98       	cbi	0x15, 1	; 21
     7ce:	08 95       	ret

000007d0 <_ZN4PinSILh53ELh51ELh52ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     7d0:	95 b3       	in	r25, 0x15	; 21
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	89 27       	eor	r24, r25
     7d6:	85 bb       	out	0x15, r24	; 21
     7d8:	08 95       	ret

000007da <_ZN4PinSILh53ELh51ELh52ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     7da:	a1 9a       	sbi	0x14, 1	; 20
     7dc:	08 95       	ret

000007de <_ZN4PinSILh53ELh51ELh52ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     7de:	a1 98       	cbi	0x14, 1	; 20
     7e0:	08 95       	ret

000007e2 <_ZN4PinSILh53ELh51ELh52ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     7e2:	66 23       	and	r22, r22
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <_ZN4PinSILh53ELh51ELh52ELh1EE7BoolSetEb+0x14>
			Set();
     7e6:	dc 01       	movw	r26, r24
     7e8:	ed 91       	ld	r30, X+
     7ea:	fc 91       	ld	r31, X
     7ec:	06 84       	ldd	r0, Z+14	; 0x0e
     7ee:	f7 85       	ldd	r31, Z+15	; 0x0f
     7f0:	e0 2d       	mov	r30, r0
     7f2:	09 95       	icall
     7f4:	08 95       	ret
		else
			Clear();
     7f6:	dc 01       	movw	r26, r24
     7f8:	ed 91       	ld	r30, X+
     7fa:	fc 91       	ld	r31, X
     7fc:	00 88       	ldd	r0, Z+16	; 0x10
     7fe:	f1 89       	ldd	r31, Z+17	; 0x11
     800:	e0 2d       	mov	r30, r0
     802:	09 95       	icall
     804:	08 95       	ret

00000806 <_ZN4PinSILh53ELh51ELh52ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     806:	83 b3       	in	r24, 0x13	; 19
    }
     808:	86 95       	lsr	r24
     80a:	81 70       	andi	r24, 0x01	; 1
     80c:	08 95       	ret

0000080e <_ZN4PinSILh53ELh51ELh52ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     80e:	a9 9a       	sbi	0x15, 1	; 21
     810:	08 95       	ret

00000812 <_ZN4PinSILh53ELh51ELh52ELh1EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     812:	95 b3       	in	r25, 0x15	; 21
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 27       	eor	r24, r25
     818:	85 bb       	out	0x15, r24	; 21
     81a:	08 95       	ret

0000081c <_ZN4PinSILh53ELh51ELh52ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     81c:	a1 9a       	sbi	0x14, 1	; 20
     81e:	08 95       	ret

00000820 <_ZN4PinSILh53ELh51ELh52ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     820:	a1 98       	cbi	0x14, 1	; 20
     822:	08 95       	ret

00000824 <_ZN4PinSILh53ELh51ELh52ELh2EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     824:	aa 98       	cbi	0x15, 2	; 21
     826:	08 95       	ret

00000828 <_ZN4PinSILh53ELh51ELh52ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     828:	95 b3       	in	r25, 0x15	; 21
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	89 27       	eor	r24, r25
     82e:	85 bb       	out	0x15, r24	; 21
     830:	08 95       	ret

00000832 <_ZN4PinSILh53ELh51ELh52ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     832:	a2 9a       	sbi	0x14, 2	; 20
     834:	08 95       	ret

00000836 <_ZN4PinSILh53ELh51ELh52ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     836:	a2 98       	cbi	0x14, 2	; 20
     838:	08 95       	ret

0000083a <_ZN4PinSILh53ELh51ELh52ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     83a:	66 23       	and	r22, r22
     83c:	41 f0       	breq	.+16     	; 0x84e <_ZN4PinSILh53ELh51ELh52ELh2EE7BoolSetEb+0x14>
			Set();
     83e:	dc 01       	movw	r26, r24
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	06 84       	ldd	r0, Z+14	; 0x0e
     846:	f7 85       	ldd	r31, Z+15	; 0x0f
     848:	e0 2d       	mov	r30, r0
     84a:	09 95       	icall
     84c:	08 95       	ret
		else
			Clear();
     84e:	dc 01       	movw	r26, r24
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	00 88       	ldd	r0, Z+16	; 0x10
     856:	f1 89       	ldd	r31, Z+17	; 0x11
     858:	e0 2d       	mov	r30, r0
     85a:	09 95       	icall
     85c:	08 95       	ret

0000085e <_ZN4PinSILh53ELh51ELh52ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     85e:	83 b3       	in	r24, 0x13	; 19
    }
     860:	82 fb       	bst	r24, 2
     862:	88 27       	eor	r24, r24
     864:	80 f9       	bld	r24, 0
     866:	08 95       	ret

00000868 <_ZN4PinSILh53ELh51ELh52ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     868:	aa 9a       	sbi	0x15, 2	; 21
     86a:	08 95       	ret

0000086c <_ZN4PinSILh53ELh51ELh52ELh2EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     86c:	95 b3       	in	r25, 0x15	; 21
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 27       	eor	r24, r25
     872:	85 bb       	out	0x15, r24	; 21
     874:	08 95       	ret

00000876 <_ZN4PinSILh53ELh51ELh52ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     876:	a2 9a       	sbi	0x14, 2	; 20
     878:	08 95       	ret

0000087a <_ZN4PinSILh53ELh51ELh52ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     87a:	a2 98       	cbi	0x14, 2	; 20
     87c:	08 95       	ret

0000087e <_ZN4PinSILh53ELh51ELh52ELh3EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     87e:	ab 98       	cbi	0x15, 3	; 21
     880:	08 95       	ret

00000882 <_ZN4PinSILh53ELh51ELh52ELh3EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     882:	95 b3       	in	r25, 0x15	; 21
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	89 27       	eor	r24, r25
     888:	85 bb       	out	0x15, r24	; 21
     88a:	08 95       	ret

0000088c <_ZN4PinSILh53ELh51ELh52ELh3EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     88c:	a3 9a       	sbi	0x14, 3	; 20
     88e:	08 95       	ret

00000890 <_ZN4PinSILh53ELh51ELh52ELh3EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     890:	a3 98       	cbi	0x14, 3	; 20
     892:	08 95       	ret

00000894 <_ZN4PinSILh53ELh51ELh52ELh3EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     894:	66 23       	and	r22, r22
     896:	41 f0       	breq	.+16     	; 0x8a8 <_ZN4PinSILh53ELh51ELh52ELh3EE7BoolSetEb+0x14>
			Set();
     898:	dc 01       	movw	r26, r24
     89a:	ed 91       	ld	r30, X+
     89c:	fc 91       	ld	r31, X
     89e:	06 84       	ldd	r0, Z+14	; 0x0e
     8a0:	f7 85       	ldd	r31, Z+15	; 0x0f
     8a2:	e0 2d       	mov	r30, r0
     8a4:	09 95       	icall
     8a6:	08 95       	ret
		else
			Clear();
     8a8:	dc 01       	movw	r26, r24
     8aa:	ed 91       	ld	r30, X+
     8ac:	fc 91       	ld	r31, X
     8ae:	00 88       	ldd	r0, Z+16	; 0x10
     8b0:	f1 89       	ldd	r31, Z+17	; 0x11
     8b2:	e0 2d       	mov	r30, r0
     8b4:	09 95       	icall
     8b6:	08 95       	ret

000008b8 <_ZN4PinSILh53ELh51ELh52ELh3EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     8b8:	83 b3       	in	r24, 0x13	; 19
    }
     8ba:	83 fb       	bst	r24, 3
     8bc:	88 27       	eor	r24, r24
     8be:	80 f9       	bld	r24, 0
     8c0:	08 95       	ret

000008c2 <_ZN4PinSILh53ELh51ELh52ELh3EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     8c2:	ab 9a       	sbi	0x15, 3	; 21
     8c4:	08 95       	ret

000008c6 <_ZN4PinSILh53ELh51ELh52ELh3EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     8c6:	95 b3       	in	r25, 0x15	; 21
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	89 27       	eor	r24, r25
     8cc:	85 bb       	out	0x15, r24	; 21
     8ce:	08 95       	ret

000008d0 <_ZN4PinSILh53ELh51ELh52ELh3EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     8d0:	a3 9a       	sbi	0x14, 3	; 20
     8d2:	08 95       	ret

000008d4 <_ZN4PinSILh53ELh51ELh52ELh3EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     8d4:	a3 98       	cbi	0x14, 3	; 20
     8d6:	08 95       	ret

000008d8 <_ZN4PinSILh53ELh51ELh52ELh4EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     8d8:	ac 98       	cbi	0x15, 4	; 21
     8da:	08 95       	ret

000008dc <_ZN4PinSILh53ELh51ELh52ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     8dc:	95 b3       	in	r25, 0x15	; 21
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	89 27       	eor	r24, r25
     8e2:	85 bb       	out	0x15, r24	; 21
     8e4:	08 95       	ret

000008e6 <_ZN4PinSILh53ELh51ELh52ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     8e6:	a4 9a       	sbi	0x14, 4	; 20
     8e8:	08 95       	ret

000008ea <_ZN4PinSILh53ELh51ELh52ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     8ea:	a4 98       	cbi	0x14, 4	; 20
     8ec:	08 95       	ret

000008ee <_ZN4PinSILh53ELh51ELh52ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     8ee:	66 23       	and	r22, r22
     8f0:	41 f0       	breq	.+16     	; 0x902 <_ZN4PinSILh53ELh51ELh52ELh4EE7BoolSetEb+0x14>
			Set();
     8f2:	dc 01       	movw	r26, r24
     8f4:	ed 91       	ld	r30, X+
     8f6:	fc 91       	ld	r31, X
     8f8:	06 84       	ldd	r0, Z+14	; 0x0e
     8fa:	f7 85       	ldd	r31, Z+15	; 0x0f
     8fc:	e0 2d       	mov	r30, r0
     8fe:	09 95       	icall
     900:	08 95       	ret
		else
			Clear();
     902:	dc 01       	movw	r26, r24
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	00 88       	ldd	r0, Z+16	; 0x10
     90a:	f1 89       	ldd	r31, Z+17	; 0x11
     90c:	e0 2d       	mov	r30, r0
     90e:	09 95       	icall
     910:	08 95       	ret

00000912 <_ZN4PinSILh53ELh51ELh52ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     912:	83 b3       	in	r24, 0x13	; 19
    }
     914:	82 95       	swap	r24
     916:	81 70       	andi	r24, 0x01	; 1
     918:	08 95       	ret

0000091a <_ZN4PinSILh53ELh51ELh52ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     91a:	ac 9a       	sbi	0x15, 4	; 21
     91c:	08 95       	ret

0000091e <_ZN4PinSILh53ELh51ELh52ELh4EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     91e:	95 b3       	in	r25, 0x15	; 21
     920:	80 e1       	ldi	r24, 0x10	; 16
     922:	89 27       	eor	r24, r25
     924:	85 bb       	out	0x15, r24	; 21
     926:	08 95       	ret

00000928 <_ZN4PinSILh53ELh51ELh52ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     928:	a4 9a       	sbi	0x14, 4	; 20
     92a:	08 95       	ret

0000092c <_ZN4PinSILh53ELh51ELh52ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     92c:	a4 98       	cbi	0x14, 4	; 20
     92e:	08 95       	ret

00000930 <_ZN4PinSILh53ELh51ELh52ELh5EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     930:	ad 98       	cbi	0x15, 5	; 21
     932:	08 95       	ret

00000934 <_ZN4PinSILh53ELh51ELh52ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     934:	95 b3       	in	r25, 0x15	; 21
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	89 27       	eor	r24, r25
     93a:	85 bb       	out	0x15, r24	; 21
     93c:	08 95       	ret

0000093e <_ZN4PinSILh53ELh51ELh52ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     93e:	a5 9a       	sbi	0x14, 5	; 20
     940:	08 95       	ret

00000942 <_ZN4PinSILh53ELh51ELh52ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     942:	a5 98       	cbi	0x14, 5	; 20
     944:	08 95       	ret

00000946 <_ZN4PinSILh53ELh51ELh52ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     946:	66 23       	and	r22, r22
     948:	41 f0       	breq	.+16     	; 0x95a <_ZN4PinSILh53ELh51ELh52ELh5EE7BoolSetEb+0x14>
			Set();
     94a:	dc 01       	movw	r26, r24
     94c:	ed 91       	ld	r30, X+
     94e:	fc 91       	ld	r31, X
     950:	06 84       	ldd	r0, Z+14	; 0x0e
     952:	f7 85       	ldd	r31, Z+15	; 0x0f
     954:	e0 2d       	mov	r30, r0
     956:	09 95       	icall
     958:	08 95       	ret
		else
			Clear();
     95a:	dc 01       	movw	r26, r24
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	00 88       	ldd	r0, Z+16	; 0x10
     962:	f1 89       	ldd	r31, Z+17	; 0x11
     964:	e0 2d       	mov	r30, r0
     966:	09 95       	icall
     968:	08 95       	ret

0000096a <_ZN4PinSILh53ELh51ELh52ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     96a:	83 b3       	in	r24, 0x13	; 19
    }
     96c:	85 fb       	bst	r24, 5
     96e:	88 27       	eor	r24, r24
     970:	80 f9       	bld	r24, 0
     972:	08 95       	ret

00000974 <_ZN4PinSILh53ELh51ELh52ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     974:	ad 9a       	sbi	0x15, 5	; 21
     976:	08 95       	ret

00000978 <_ZN4PinSILh53ELh51ELh52ELh5EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     978:	95 b3       	in	r25, 0x15	; 21
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	89 27       	eor	r24, r25
     97e:	85 bb       	out	0x15, r24	; 21
     980:	08 95       	ret

00000982 <_ZN4PinSILh53ELh51ELh52ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     982:	a5 9a       	sbi	0x14, 5	; 20
     984:	08 95       	ret

00000986 <_ZN4PinSILh53ELh51ELh52ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     986:	a5 98       	cbi	0x14, 5	; 20
     988:	08 95       	ret

0000098a <_ZN4PinSILh53ELh51ELh52ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     98a:	ae 9a       	sbi	0x15, 6	; 21
     98c:	08 95       	ret

0000098e <_ZN4PinSILh53ELh51ELh52ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     98e:	ae 98       	cbi	0x15, 6	; 21
     990:	08 95       	ret

00000992 <_ZN4PinSILh53ELh51ELh52ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     992:	95 b3       	in	r25, 0x15	; 21
     994:	80 e4       	ldi	r24, 0x40	; 64
     996:	89 27       	eor	r24, r25
     998:	85 bb       	out	0x15, r24	; 21
     99a:	08 95       	ret

0000099c <_ZN4PinSILh53ELh51ELh52ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     99c:	a6 9a       	sbi	0x14, 6	; 20
     99e:	08 95       	ret

000009a0 <_ZN4PinSILh53ELh51ELh52ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     9a0:	a6 98       	cbi	0x14, 6	; 20
     9a2:	08 95       	ret

000009a4 <_ZN4PinSILh53ELh51ELh52ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     9a4:	66 23       	and	r22, r22
     9a6:	41 f0       	breq	.+16     	; 0x9b8 <_ZN4PinSILh53ELh51ELh52ELh6EE7BoolSetEb+0x14>
			Set();
     9a8:	dc 01       	movw	r26, r24
     9aa:	ed 91       	ld	r30, X+
     9ac:	fc 91       	ld	r31, X
     9ae:	06 84       	ldd	r0, Z+14	; 0x0e
     9b0:	f7 85       	ldd	r31, Z+15	; 0x0f
     9b2:	e0 2d       	mov	r30, r0
     9b4:	09 95       	icall
     9b6:	08 95       	ret
		else
			Clear();
     9b8:	dc 01       	movw	r26, r24
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	00 88       	ldd	r0, Z+16	; 0x10
     9c0:	f1 89       	ldd	r31, Z+17	; 0x11
     9c2:	e0 2d       	mov	r30, r0
     9c4:	09 95       	icall
     9c6:	08 95       	ret

000009c8 <_ZN4PinSILh53ELh51ELh52ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     9c8:	83 b3       	in	r24, 0x13	; 19
    }
     9ca:	86 fb       	bst	r24, 6
     9cc:	88 27       	eor	r24, r24
     9ce:	80 f9       	bld	r24, 0
     9d0:	08 95       	ret

000009d2 <_ZN4PinSILh53ELh51ELh52ELh6EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     9d2:	95 b3       	in	r25, 0x15	; 21
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	89 27       	eor	r24, r25
     9d8:	85 bb       	out	0x15, r24	; 21
     9da:	08 95       	ret

000009dc <_ZN4PinSILh53ELh51ELh52ELh6EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     9dc:	a6 98       	cbi	0x14, 6	; 20
     9de:	08 95       	ret

000009e0 <_ZN4PinSILh53ELh51ELh52ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     9e0:	af 9a       	sbi	0x15, 7	; 21
     9e2:	08 95       	ret

000009e4 <_ZN4PinSILh53ELh51ELh52ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     9e4:	af 98       	cbi	0x15, 7	; 21
     9e6:	08 95       	ret

000009e8 <_ZN4PinSILh53ELh51ELh52ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     9e8:	85 b3       	in	r24, 0x15	; 21
     9ea:	80 58       	subi	r24, 0x80	; 128
     9ec:	85 bb       	out	0x15, r24	; 21
     9ee:	08 95       	ret

000009f0 <_ZN4PinSILh53ELh51ELh52ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     9f0:	a7 9a       	sbi	0x14, 7	; 20
     9f2:	08 95       	ret

000009f4 <_ZN4PinSILh53ELh51ELh52ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     9f4:	a7 98       	cbi	0x14, 7	; 20
     9f6:	08 95       	ret

000009f8 <_ZN4PinSILh53ELh51ELh52ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     9f8:	66 23       	and	r22, r22
     9fa:	41 f0       	breq	.+16     	; 0xa0c <_ZN4PinSILh53ELh51ELh52ELh7EE7BoolSetEb+0x14>
			Set();
     9fc:	dc 01       	movw	r26, r24
     9fe:	ed 91       	ld	r30, X+
     a00:	fc 91       	ld	r31, X
     a02:	06 84       	ldd	r0, Z+14	; 0x0e
     a04:	f7 85       	ldd	r31, Z+15	; 0x0f
     a06:	e0 2d       	mov	r30, r0
     a08:	09 95       	icall
     a0a:	08 95       	ret
		else
			Clear();
     a0c:	dc 01       	movw	r26, r24
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	00 88       	ldd	r0, Z+16	; 0x10
     a14:	f1 89       	ldd	r31, Z+17	; 0x11
     a16:	e0 2d       	mov	r30, r0
     a18:	09 95       	icall
     a1a:	08 95       	ret

00000a1c <_ZN4PinSILh53ELh51ELh52ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	9f 9b       	sbis	0x13, 7	; 19
     a20:	80 e0       	ldi	r24, 0x00	; 0
    }
     a22:	08 95       	ret

00000a24 <_ZN4PinSILh53ELh51ELh52ELh7EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     a24:	85 b3       	in	r24, 0x15	; 21
     a26:	80 58       	subi	r24, 0x80	; 128
     a28:	85 bb       	out	0x15, r24	; 21
     a2a:	08 95       	ret

00000a2c <_ZN4PinSILh53ELh51ELh52ELh7EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     a2c:	a7 98       	cbi	0x14, 7	; 20
     a2e:	08 95       	ret

00000a30 <_ZN4PinSILh56ELh54ELh55ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     a30:	c7 9a       	sbi	0x18, 7	; 24
     a32:	08 95       	ret

00000a34 <_ZN4PinSILh56ELh54ELh55ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     a34:	c7 98       	cbi	0x18, 7	; 24
     a36:	08 95       	ret

00000a38 <_ZN4PinSILh56ELh54ELh55ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     a38:	88 b3       	in	r24, 0x18	; 24
     a3a:	80 58       	subi	r24, 0x80	; 128
     a3c:	88 bb       	out	0x18, r24	; 24
     a3e:	08 95       	ret

00000a40 <_ZN4PinSILh56ELh54ELh55ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     a40:	bf 9a       	sbi	0x17, 7	; 23
     a42:	08 95       	ret

00000a44 <_ZN4PinSILh56ELh54ELh55ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     a44:	bf 98       	cbi	0x17, 7	; 23
     a46:	08 95       	ret

00000a48 <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     a48:	66 23       	and	r22, r22
     a4a:	41 f0       	breq	.+16     	; 0xa5c <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb+0x14>
			Set();
     a4c:	dc 01       	movw	r26, r24
     a4e:	ed 91       	ld	r30, X+
     a50:	fc 91       	ld	r31, X
     a52:	06 84       	ldd	r0, Z+14	; 0x0e
     a54:	f7 85       	ldd	r31, Z+15	; 0x0f
     a56:	e0 2d       	mov	r30, r0
     a58:	09 95       	icall
     a5a:	08 95       	ret
		else
			Clear();
     a5c:	dc 01       	movw	r26, r24
     a5e:	ed 91       	ld	r30, X+
     a60:	fc 91       	ld	r31, X
     a62:	00 88       	ldd	r0, Z+16	; 0x10
     a64:	f1 89       	ldd	r31, Z+17	; 0x11
     a66:	e0 2d       	mov	r30, r0
     a68:	09 95       	icall
     a6a:	08 95       	ret

00000a6c <_ZN4PinSILh56ELh54ELh55ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	b7 9b       	sbis	0x16, 7	; 22
     a70:	80 e0       	ldi	r24, 0x00	; 0
    }
     a72:	08 95       	ret

00000a74 <_ZN4PinSILh56ELh54ELh55ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     a74:	c7 9a       	sbi	0x18, 7	; 24
     a76:	08 95       	ret

00000a78 <_ZN4PinSILh56ELh54ELh55ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     a78:	c7 98       	cbi	0x18, 7	; 24
     a7a:	08 95       	ret

00000a7c <_ZN4PinSILh56ELh54ELh55ELh7EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     a7c:	88 b3       	in	r24, 0x18	; 24
     a7e:	80 58       	subi	r24, 0x80	; 128
     a80:	88 bb       	out	0x18, r24	; 24
     a82:	08 95       	ret

00000a84 <_ZN4PinSILh56ELh54ELh55ELh7EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     a84:	bf 9a       	sbi	0x17, 7	; 23
     a86:	08 95       	ret

00000a88 <_ZN4PinSILh56ELh54ELh55ELh7EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     a88:	bf 98       	cbi	0x17, 7	; 23
     a8a:	08 95       	ret

00000a8c <_ZN4PinSILh56ELh54ELh55ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     a8c:	c6 9a       	sbi	0x18, 6	; 24
     a8e:	08 95       	ret

00000a90 <_ZN4PinSILh56ELh54ELh55ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     a90:	c6 98       	cbi	0x18, 6	; 24
     a92:	08 95       	ret

00000a94 <_ZN4PinSILh56ELh54ELh55ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     a94:	98 b3       	in	r25, 0x18	; 24
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	89 27       	eor	r24, r25
     a9a:	88 bb       	out	0x18, r24	; 24
     a9c:	08 95       	ret

00000a9e <_ZN4PinSILh56ELh54ELh55ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     a9e:	be 9a       	sbi	0x17, 6	; 23
     aa0:	08 95       	ret

00000aa2 <_ZN4PinSILh56ELh54ELh55ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     aa2:	be 98       	cbi	0x17, 6	; 23
     aa4:	08 95       	ret

00000aa6 <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     aa6:	66 23       	and	r22, r22
     aa8:	41 f0       	breq	.+16     	; 0xaba <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb+0x14>
			Set();
     aaa:	dc 01       	movw	r26, r24
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	06 84       	ldd	r0, Z+14	; 0x0e
     ab2:	f7 85       	ldd	r31, Z+15	; 0x0f
     ab4:	e0 2d       	mov	r30, r0
     ab6:	09 95       	icall
     ab8:	08 95       	ret
		else
			Clear();
     aba:	dc 01       	movw	r26, r24
     abc:	ed 91       	ld	r30, X+
     abe:	fc 91       	ld	r31, X
     ac0:	00 88       	ldd	r0, Z+16	; 0x10
     ac2:	f1 89       	ldd	r31, Z+17	; 0x11
     ac4:	e0 2d       	mov	r30, r0
     ac6:	09 95       	icall
     ac8:	08 95       	ret

00000aca <_ZN4PinSILh56ELh54ELh55ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     aca:	86 b3       	in	r24, 0x16	; 22
    }
     acc:	86 fb       	bst	r24, 6
     ace:	88 27       	eor	r24, r24
     ad0:	80 f9       	bld	r24, 0
     ad2:	08 95       	ret

00000ad4 <_ZN4PinSILh56ELh54ELh55ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     ad4:	c6 9a       	sbi	0x18, 6	; 24
     ad6:	08 95       	ret

00000ad8 <_ZN4PinSILh56ELh54ELh55ELh6EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     ad8:	c6 98       	cbi	0x18, 6	; 24
     ada:	08 95       	ret

00000adc <_ZN4PinSILh56ELh54ELh55ELh6EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     adc:	98 b3       	in	r25, 0x18	; 24
     ade:	80 e4       	ldi	r24, 0x40	; 64
     ae0:	89 27       	eor	r24, r25
     ae2:	88 bb       	out	0x18, r24	; 24
     ae4:	08 95       	ret

00000ae6 <_ZN4PinSILh56ELh54ELh55ELh6EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     ae6:	be 9a       	sbi	0x17, 6	; 23
     ae8:	08 95       	ret

00000aea <_ZN4PinSILh56ELh54ELh55ELh6EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     aea:	be 98       	cbi	0x17, 6	; 23
     aec:	08 95       	ret

00000aee <_ZN4PinSILh56ELh54ELh55ELh5EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     aee:	c5 9a       	sbi	0x18, 5	; 24
     af0:	08 95       	ret

00000af2 <_ZN4PinSILh56ELh54ELh55ELh5EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     af2:	c5 98       	cbi	0x18, 5	; 24
     af4:	08 95       	ret

00000af6 <_ZN4PinSILh56ELh54ELh55ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     af6:	98 b3       	in	r25, 0x18	; 24
     af8:	80 e2       	ldi	r24, 0x20	; 32
     afa:	89 27       	eor	r24, r25
     afc:	88 bb       	out	0x18, r24	; 24
     afe:	08 95       	ret

00000b00 <_ZN4PinSILh56ELh54ELh55ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     b00:	bd 9a       	sbi	0x17, 5	; 23
     b02:	08 95       	ret

00000b04 <_ZN4PinSILh56ELh54ELh55ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     b04:	bd 98       	cbi	0x17, 5	; 23
     b06:	08 95       	ret

00000b08 <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     b08:	66 23       	and	r22, r22
     b0a:	41 f0       	breq	.+16     	; 0xb1c <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb+0x14>
			Set();
     b0c:	dc 01       	movw	r26, r24
     b0e:	ed 91       	ld	r30, X+
     b10:	fc 91       	ld	r31, X
     b12:	06 84       	ldd	r0, Z+14	; 0x0e
     b14:	f7 85       	ldd	r31, Z+15	; 0x0f
     b16:	e0 2d       	mov	r30, r0
     b18:	09 95       	icall
     b1a:	08 95       	ret
		else
			Clear();
     b1c:	dc 01       	movw	r26, r24
     b1e:	ed 91       	ld	r30, X+
     b20:	fc 91       	ld	r31, X
     b22:	00 88       	ldd	r0, Z+16	; 0x10
     b24:	f1 89       	ldd	r31, Z+17	; 0x11
     b26:	e0 2d       	mov	r30, r0
     b28:	09 95       	icall
     b2a:	08 95       	ret

00000b2c <_ZN4PinSILh56ELh54ELh55ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     b2c:	86 b3       	in	r24, 0x16	; 22
    }
     b2e:	85 fb       	bst	r24, 5
     b30:	88 27       	eor	r24, r24
     b32:	80 f9       	bld	r24, 0
     b34:	08 95       	ret

00000b36 <_ZN4PinSILh56ELh54ELh55ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     b36:	c5 9a       	sbi	0x18, 5	; 24
     b38:	08 95       	ret

00000b3a <_ZN4PinSILh56ELh54ELh55ELh5EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     b3a:	c5 98       	cbi	0x18, 5	; 24
     b3c:	08 95       	ret

00000b3e <_ZN4PinSILh56ELh54ELh55ELh5EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     b3e:	98 b3       	in	r25, 0x18	; 24
     b40:	80 e2       	ldi	r24, 0x20	; 32
     b42:	89 27       	eor	r24, r25
     b44:	88 bb       	out	0x18, r24	; 24
     b46:	08 95       	ret

00000b48 <_ZN4PinSILh56ELh54ELh55ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     b48:	bd 9a       	sbi	0x17, 5	; 23
     b4a:	08 95       	ret

00000b4c <_ZN4PinSILh56ELh54ELh55ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     b4c:	bd 98       	cbi	0x17, 5	; 23
     b4e:	08 95       	ret

00000b50 <_ZN4PinSILh56ELh54ELh55ELh4EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     b50:	c4 9a       	sbi	0x18, 4	; 24
     b52:	08 95       	ret

00000b54 <_ZN4PinSILh56ELh54ELh55ELh4EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     b54:	c4 98       	cbi	0x18, 4	; 24
     b56:	08 95       	ret

00000b58 <_ZN4PinSILh56ELh54ELh55ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     b58:	98 b3       	in	r25, 0x18	; 24
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	89 27       	eor	r24, r25
     b5e:	88 bb       	out	0x18, r24	; 24
     b60:	08 95       	ret

00000b62 <_ZN4PinSILh56ELh54ELh55ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     b62:	bc 9a       	sbi	0x17, 4	; 23
     b64:	08 95       	ret

00000b66 <_ZN4PinSILh56ELh54ELh55ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     b66:	bc 98       	cbi	0x17, 4	; 23
     b68:	08 95       	ret

00000b6a <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     b6a:	66 23       	and	r22, r22
     b6c:	41 f0       	breq	.+16     	; 0xb7e <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb+0x14>
			Set();
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	06 84       	ldd	r0, Z+14	; 0x0e
     b76:	f7 85       	ldd	r31, Z+15	; 0x0f
     b78:	e0 2d       	mov	r30, r0
     b7a:	09 95       	icall
     b7c:	08 95       	ret
		else
			Clear();
     b7e:	dc 01       	movw	r26, r24
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	00 88       	ldd	r0, Z+16	; 0x10
     b86:	f1 89       	ldd	r31, Z+17	; 0x11
     b88:	e0 2d       	mov	r30, r0
     b8a:	09 95       	icall
     b8c:	08 95       	ret

00000b8e <_ZN4PinSILh56ELh54ELh55ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     b8e:	86 b3       	in	r24, 0x16	; 22
    }
     b90:	82 95       	swap	r24
     b92:	81 70       	andi	r24, 0x01	; 1
     b94:	08 95       	ret

00000b96 <_ZN4PinSILh56ELh54ELh55ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     b96:	c4 9a       	sbi	0x18, 4	; 24
     b98:	08 95       	ret

00000b9a <_ZN4PinSILh56ELh54ELh55ELh4EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     b9a:	c4 98       	cbi	0x18, 4	; 24
     b9c:	08 95       	ret

00000b9e <_ZN4PinSILh56ELh54ELh55ELh4EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     b9e:	98 b3       	in	r25, 0x18	; 24
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	89 27       	eor	r24, r25
     ba4:	88 bb       	out	0x18, r24	; 24
     ba6:	08 95       	ret

00000ba8 <_ZN4PinSILh56ELh54ELh55ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     ba8:	bc 9a       	sbi	0x17, 4	; 23
     baa:	08 95       	ret

00000bac <_ZN4PinSILh56ELh54ELh55ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     bac:	bc 98       	cbi	0x17, 4	; 23
     bae:	08 95       	ret

00000bb0 <_ZN4PinSILh56ELh54ELh55ELh3EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     bb0:	c3 9a       	sbi	0x18, 3	; 24
     bb2:	08 95       	ret

00000bb4 <_ZN4PinSILh56ELh54ELh55ELh3EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     bb4:	c3 98       	cbi	0x18, 3	; 24
     bb6:	08 95       	ret

00000bb8 <_ZN4PinSILh56ELh54ELh55ELh3EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     bb8:	98 b3       	in	r25, 0x18	; 24
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	89 27       	eor	r24, r25
     bbe:	88 bb       	out	0x18, r24	; 24
     bc0:	08 95       	ret

00000bc2 <_ZN4PinSILh56ELh54ELh55ELh3EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     bc2:	bb 9a       	sbi	0x17, 3	; 23
     bc4:	08 95       	ret

00000bc6 <_ZN4PinSILh56ELh54ELh55ELh3EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     bc6:	bb 98       	cbi	0x17, 3	; 23
     bc8:	08 95       	ret

00000bca <_ZN4PinSILh56ELh54ELh55ELh3EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     bca:	66 23       	and	r22, r22
     bcc:	41 f0       	breq	.+16     	; 0xbde <_ZN4PinSILh56ELh54ELh55ELh3EE7BoolSetEb+0x14>
			Set();
     bce:	dc 01       	movw	r26, r24
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	06 84       	ldd	r0, Z+14	; 0x0e
     bd6:	f7 85       	ldd	r31, Z+15	; 0x0f
     bd8:	e0 2d       	mov	r30, r0
     bda:	09 95       	icall
     bdc:	08 95       	ret
		else
			Clear();
     bde:	dc 01       	movw	r26, r24
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	00 88       	ldd	r0, Z+16	; 0x10
     be6:	f1 89       	ldd	r31, Z+17	; 0x11
     be8:	e0 2d       	mov	r30, r0
     bea:	09 95       	icall
     bec:	08 95       	ret

00000bee <_ZN4PinSILh56ELh54ELh55ELh3EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     bee:	86 b3       	in	r24, 0x16	; 22
    }
     bf0:	83 fb       	bst	r24, 3
     bf2:	88 27       	eor	r24, r24
     bf4:	80 f9       	bld	r24, 0
     bf6:	08 95       	ret

00000bf8 <_ZN4PinSILh56ELh54ELh55ELh3EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     bf8:	c3 9a       	sbi	0x18, 3	; 24
     bfa:	08 95       	ret

00000bfc <_ZN4PinSILh56ELh54ELh55ELh3EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     bfc:	c3 98       	cbi	0x18, 3	; 24
     bfe:	08 95       	ret

00000c00 <_ZN4PinSILh56ELh54ELh55ELh3EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     c00:	98 b3       	in	r25, 0x18	; 24
     c02:	88 e0       	ldi	r24, 0x08	; 8
     c04:	89 27       	eor	r24, r25
     c06:	88 bb       	out	0x18, r24	; 24
     c08:	08 95       	ret

00000c0a <_ZN4PinSILh56ELh54ELh55ELh3EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     c0a:	bb 9a       	sbi	0x17, 3	; 23
     c0c:	08 95       	ret

00000c0e <_ZN4PinSILh56ELh54ELh55ELh3EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     c0e:	bb 98       	cbi	0x17, 3	; 23
     c10:	08 95       	ret

00000c12 <_ZN4PinSILh56ELh54ELh55ELh2EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     c12:	c2 9a       	sbi	0x18, 2	; 24
     c14:	08 95       	ret

00000c16 <_ZN4PinSILh56ELh54ELh55ELh2EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     c16:	c2 98       	cbi	0x18, 2	; 24
     c18:	08 95       	ret

00000c1a <_ZN4PinSILh56ELh54ELh55ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     c1a:	98 b3       	in	r25, 0x18	; 24
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	89 27       	eor	r24, r25
     c20:	88 bb       	out	0x18, r24	; 24
     c22:	08 95       	ret

00000c24 <_ZN4PinSILh56ELh54ELh55ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     c24:	ba 9a       	sbi	0x17, 2	; 23
     c26:	08 95       	ret

00000c28 <_ZN4PinSILh56ELh54ELh55ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     c28:	ba 98       	cbi	0x17, 2	; 23
     c2a:	08 95       	ret

00000c2c <_ZN4PinSILh56ELh54ELh55ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     c2c:	66 23       	and	r22, r22
     c2e:	41 f0       	breq	.+16     	; 0xc40 <_ZN4PinSILh56ELh54ELh55ELh2EE7BoolSetEb+0x14>
			Set();
     c30:	dc 01       	movw	r26, r24
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	06 84       	ldd	r0, Z+14	; 0x0e
     c38:	f7 85       	ldd	r31, Z+15	; 0x0f
     c3a:	e0 2d       	mov	r30, r0
     c3c:	09 95       	icall
     c3e:	08 95       	ret
		else
			Clear();
     c40:	dc 01       	movw	r26, r24
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	00 88       	ldd	r0, Z+16	; 0x10
     c48:	f1 89       	ldd	r31, Z+17	; 0x11
     c4a:	e0 2d       	mov	r30, r0
     c4c:	09 95       	icall
     c4e:	08 95       	ret

00000c50 <_ZN4PinSILh56ELh54ELh55ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     c50:	86 b3       	in	r24, 0x16	; 22
    }
     c52:	82 fb       	bst	r24, 2
     c54:	88 27       	eor	r24, r24
     c56:	80 f9       	bld	r24, 0
     c58:	08 95       	ret

00000c5a <_ZN4PinSILh56ELh54ELh55ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     c5a:	c2 9a       	sbi	0x18, 2	; 24
     c5c:	08 95       	ret

00000c5e <_ZN4PinSILh56ELh54ELh55ELh2EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     c5e:	c2 98       	cbi	0x18, 2	; 24
     c60:	08 95       	ret

00000c62 <_ZN4PinSILh56ELh54ELh55ELh2EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     c62:	98 b3       	in	r25, 0x18	; 24
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	89 27       	eor	r24, r25
     c68:	88 bb       	out	0x18, r24	; 24
     c6a:	08 95       	ret

00000c6c <_ZN4PinSILh56ELh54ELh55ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     c6c:	ba 9a       	sbi	0x17, 2	; 23
     c6e:	08 95       	ret

00000c70 <_ZN4PinSILh56ELh54ELh55ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     c70:	ba 98       	cbi	0x17, 2	; 23
     c72:	08 95       	ret

00000c74 <_ZN4PinSILh56ELh54ELh55ELh1EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     c74:	c1 9a       	sbi	0x18, 1	; 24
     c76:	08 95       	ret

00000c78 <_ZN4PinSILh56ELh54ELh55ELh1EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     c78:	c1 98       	cbi	0x18, 1	; 24
     c7a:	08 95       	ret

00000c7c <_ZN4PinSILh56ELh54ELh55ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     c7c:	98 b3       	in	r25, 0x18	; 24
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	89 27       	eor	r24, r25
     c82:	88 bb       	out	0x18, r24	; 24
     c84:	08 95       	ret

00000c86 <_ZN4PinSILh56ELh54ELh55ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     c86:	b9 9a       	sbi	0x17, 1	; 23
     c88:	08 95       	ret

00000c8a <_ZN4PinSILh56ELh54ELh55ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     c8a:	b9 98       	cbi	0x17, 1	; 23
     c8c:	08 95       	ret

00000c8e <_ZN4PinSILh56ELh54ELh55ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     c8e:	66 23       	and	r22, r22
     c90:	41 f0       	breq	.+16     	; 0xca2 <_ZN4PinSILh56ELh54ELh55ELh1EE7BoolSetEb+0x14>
			Set();
     c92:	dc 01       	movw	r26, r24
     c94:	ed 91       	ld	r30, X+
     c96:	fc 91       	ld	r31, X
     c98:	06 84       	ldd	r0, Z+14	; 0x0e
     c9a:	f7 85       	ldd	r31, Z+15	; 0x0f
     c9c:	e0 2d       	mov	r30, r0
     c9e:	09 95       	icall
     ca0:	08 95       	ret
		else
			Clear();
     ca2:	dc 01       	movw	r26, r24
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	00 88       	ldd	r0, Z+16	; 0x10
     caa:	f1 89       	ldd	r31, Z+17	; 0x11
     cac:	e0 2d       	mov	r30, r0
     cae:	09 95       	icall
     cb0:	08 95       	ret

00000cb2 <_ZN4PinSILh56ELh54ELh55ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     cb2:	86 b3       	in	r24, 0x16	; 22
    }
     cb4:	86 95       	lsr	r24
     cb6:	81 70       	andi	r24, 0x01	; 1
     cb8:	08 95       	ret

00000cba <_ZN4PinSILh56ELh54ELh55ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     cba:	c1 9a       	sbi	0x18, 1	; 24
     cbc:	08 95       	ret

00000cbe <_ZN4PinSILh56ELh54ELh55ELh1EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     cbe:	c1 98       	cbi	0x18, 1	; 24
     cc0:	08 95       	ret

00000cc2 <_ZN4PinSILh56ELh54ELh55ELh1EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     cc2:	98 b3       	in	r25, 0x18	; 24
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	89 27       	eor	r24, r25
     cc8:	88 bb       	out	0x18, r24	; 24
     cca:	08 95       	ret

00000ccc <_ZN4PinSILh56ELh54ELh55ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     ccc:	b9 9a       	sbi	0x17, 1	; 23
     cce:	08 95       	ret

00000cd0 <_ZN4PinSILh56ELh54ELh55ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     cd0:	b9 98       	cbi	0x17, 1	; 23
     cd2:	08 95       	ret

00000cd4 <_ZN4PinSILh56ELh54ELh55ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     cd4:	c0 9a       	sbi	0x18, 0	; 24
     cd6:	08 95       	ret

00000cd8 <_ZN4PinSILh56ELh54ELh55ELh0EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     cd8:	c0 98       	cbi	0x18, 0	; 24
     cda:	08 95       	ret

00000cdc <_ZN4PinSILh56ELh54ELh55ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     cdc:	98 b3       	in	r25, 0x18	; 24
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 27       	eor	r24, r25
     ce2:	88 bb       	out	0x18, r24	; 24
     ce4:	08 95       	ret

00000ce6 <_ZN4PinSILh56ELh54ELh55ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     ce6:	b8 9a       	sbi	0x17, 0	; 23
     ce8:	08 95       	ret

00000cea <_ZN4PinSILh56ELh54ELh55ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     cea:	b8 98       	cbi	0x17, 0	; 23
     cec:	08 95       	ret

00000cee <_ZN4PinSILh56ELh54ELh55ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     cee:	66 23       	and	r22, r22
     cf0:	41 f0       	breq	.+16     	; 0xd02 <_ZN4PinSILh56ELh54ELh55ELh0EE7BoolSetEb+0x14>
			Set();
     cf2:	dc 01       	movw	r26, r24
     cf4:	ed 91       	ld	r30, X+
     cf6:	fc 91       	ld	r31, X
     cf8:	06 84       	ldd	r0, Z+14	; 0x0e
     cfa:	f7 85       	ldd	r31, Z+15	; 0x0f
     cfc:	e0 2d       	mov	r30, r0
     cfe:	09 95       	icall
     d00:	08 95       	ret
		else
			Clear();
     d02:	dc 01       	movw	r26, r24
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	00 88       	ldd	r0, Z+16	; 0x10
     d0a:	f1 89       	ldd	r31, Z+17	; 0x11
     d0c:	e0 2d       	mov	r30, r0
     d0e:	09 95       	icall
     d10:	08 95       	ret

00000d12 <_ZN4PinSILh56ELh54ELh55ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     d12:	86 b3       	in	r24, 0x16	; 22
    }
     d14:	81 70       	andi	r24, 0x01	; 1
     d16:	08 95       	ret

00000d18 <_ZN4PinSILh56ELh54ELh55ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     d18:	c0 9a       	sbi	0x18, 0	; 24
     d1a:	08 95       	ret

00000d1c <_ZN4PinSILh56ELh54ELh55ELh0EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     d1c:	c0 98       	cbi	0x18, 0	; 24
     d1e:	08 95       	ret

00000d20 <_ZN4PinSILh56ELh54ELh55ELh0EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     d20:	98 b3       	in	r25, 0x18	; 24
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 27       	eor	r24, r25
     d26:	88 bb       	out	0x18, r24	; 24
     d28:	08 95       	ret

00000d2a <_ZN4PinSILh56ELh54ELh55ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     d2a:	b8 9a       	sbi	0x17, 0	; 23
     d2c:	08 95       	ret

00000d2e <_ZN4PinSILh56ELh54ELh55ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     d2e:	b8 98       	cbi	0x17, 0	; 23
     d30:	08 95       	ret

00000d32 <_ZN4PinSILh59ELh57ELh58ELh2EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     d32:	da 9a       	sbi	0x1b, 2	; 27
     d34:	08 95       	ret

00000d36 <_ZN4PinSILh59ELh57ELh58ELh2EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     d36:	da 98       	cbi	0x1b, 2	; 27
     d38:	08 95       	ret

00000d3a <_ZN4PinSILh59ELh57ELh58ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     d3a:	9b b3       	in	r25, 0x1b	; 27
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	89 27       	eor	r24, r25
     d40:	8b bb       	out	0x1b, r24	; 27
     d42:	08 95       	ret

00000d44 <_ZN4PinSILh59ELh57ELh58ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     d44:	d2 9a       	sbi	0x1a, 2	; 26
     d46:	08 95       	ret

00000d48 <_ZN4PinSILh59ELh57ELh58ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     d48:	d2 98       	cbi	0x1a, 2	; 26
     d4a:	08 95       	ret

00000d4c <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     d4c:	66 23       	and	r22, r22
     d4e:	41 f0       	breq	.+16     	; 0xd60 <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb+0x14>
			Set();
     d50:	dc 01       	movw	r26, r24
     d52:	ed 91       	ld	r30, X+
     d54:	fc 91       	ld	r31, X
     d56:	06 84       	ldd	r0, Z+14	; 0x0e
     d58:	f7 85       	ldd	r31, Z+15	; 0x0f
     d5a:	e0 2d       	mov	r30, r0
     d5c:	09 95       	icall
     d5e:	08 95       	ret
		else
			Clear();
     d60:	dc 01       	movw	r26, r24
     d62:	ed 91       	ld	r30, X+
     d64:	fc 91       	ld	r31, X
     d66:	00 88       	ldd	r0, Z+16	; 0x10
     d68:	f1 89       	ldd	r31, Z+17	; 0x11
     d6a:	e0 2d       	mov	r30, r0
     d6c:	09 95       	icall
     d6e:	08 95       	ret

00000d70 <_ZN4PinSILh59ELh57ELh58ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     d70:	89 b3       	in	r24, 0x19	; 25
    }
     d72:	82 fb       	bst	r24, 2
     d74:	88 27       	eor	r24, r24
     d76:	80 f9       	bld	r24, 0
     d78:	08 95       	ret

00000d7a <_ZN4PinSILh59ELh57ELh58ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     d7a:	da 9a       	sbi	0x1b, 2	; 27
     d7c:	08 95       	ret

00000d7e <_ZN4PinSILh59ELh57ELh58ELh2EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     d7e:	da 98       	cbi	0x1b, 2	; 27
     d80:	08 95       	ret

00000d82 <_ZN4PinSILh59ELh57ELh58ELh2EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     d82:	9b b3       	in	r25, 0x1b	; 27
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	89 27       	eor	r24, r25
     d88:	8b bb       	out	0x1b, r24	; 27
     d8a:	08 95       	ret

00000d8c <_ZN4PinSILh59ELh57ELh58ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     d8c:	d2 9a       	sbi	0x1a, 2	; 26
     d8e:	08 95       	ret

00000d90 <_ZN4PinSILh59ELh57ELh58ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     d90:	d2 98       	cbi	0x1a, 2	; 26
     d92:	08 95       	ret

00000d94 <_ZN4PinSILh59ELh57ELh58ELh1EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     d94:	d9 9a       	sbi	0x1b, 1	; 27
     d96:	08 95       	ret

00000d98 <_ZN4PinSILh59ELh57ELh58ELh1EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     d98:	d9 98       	cbi	0x1b, 1	; 27
     d9a:	08 95       	ret

00000d9c <_ZN4PinSILh59ELh57ELh58ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     d9c:	9b b3       	in	r25, 0x1b	; 27
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	89 27       	eor	r24, r25
     da2:	8b bb       	out	0x1b, r24	; 27
     da4:	08 95       	ret

00000da6 <_ZN4PinSILh59ELh57ELh58ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     da6:	d1 9a       	sbi	0x1a, 1	; 26
     da8:	08 95       	ret

00000daa <_ZN4PinSILh59ELh57ELh58ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     daa:	d1 98       	cbi	0x1a, 1	; 26
     dac:	08 95       	ret

00000dae <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     dae:	66 23       	and	r22, r22
     db0:	41 f0       	breq	.+16     	; 0xdc2 <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb+0x14>
			Set();
     db2:	dc 01       	movw	r26, r24
     db4:	ed 91       	ld	r30, X+
     db6:	fc 91       	ld	r31, X
     db8:	06 84       	ldd	r0, Z+14	; 0x0e
     dba:	f7 85       	ldd	r31, Z+15	; 0x0f
     dbc:	e0 2d       	mov	r30, r0
     dbe:	09 95       	icall
     dc0:	08 95       	ret
		else
			Clear();
     dc2:	dc 01       	movw	r26, r24
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	00 88       	ldd	r0, Z+16	; 0x10
     dca:	f1 89       	ldd	r31, Z+17	; 0x11
     dcc:	e0 2d       	mov	r30, r0
     dce:	09 95       	icall
     dd0:	08 95       	ret

00000dd2 <_ZN4PinSILh59ELh57ELh58ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     dd2:	89 b3       	in	r24, 0x19	; 25
    }
     dd4:	86 95       	lsr	r24
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	08 95       	ret

00000dda <_ZN4PinSILh59ELh57ELh58ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     dda:	d9 9a       	sbi	0x1b, 1	; 27
     ddc:	08 95       	ret

00000dde <_ZN4PinSILh59ELh57ELh58ELh1EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     dde:	d9 98       	cbi	0x1b, 1	; 27
     de0:	08 95       	ret

00000de2 <_ZN4PinSILh59ELh57ELh58ELh1EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     de2:	9b b3       	in	r25, 0x1b	; 27
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	89 27       	eor	r24, r25
     de8:	8b bb       	out	0x1b, r24	; 27
     dea:	08 95       	ret

00000dec <_ZN4PinSILh59ELh57ELh58ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     dec:	d1 9a       	sbi	0x1a, 1	; 26
     dee:	08 95       	ret

00000df0 <_ZN4PinSILh59ELh57ELh58ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     df0:	d1 98       	cbi	0x1a, 1	; 26
     df2:	08 95       	ret

00000df4 <_ZN4PinSILh59ELh57ELh58ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     df4:	d8 9a       	sbi	0x1b, 0	; 27
     df6:	08 95       	ret

00000df8 <_ZN4PinSILh59ELh57ELh58ELh0EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     df8:	d8 98       	cbi	0x1b, 0	; 27
     dfa:	08 95       	ret

00000dfc <_ZN4PinSILh59ELh57ELh58ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     dfc:	9b b3       	in	r25, 0x1b	; 27
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 27       	eor	r24, r25
     e02:	8b bb       	out	0x1b, r24	; 27
     e04:	08 95       	ret

00000e06 <_ZN4PinSILh59ELh57ELh58ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     e06:	d0 9a       	sbi	0x1a, 0	; 26
     e08:	08 95       	ret

00000e0a <_ZN4PinSILh59ELh57ELh58ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     e0a:	d0 98       	cbi	0x1a, 0	; 26
     e0c:	08 95       	ret

00000e0e <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     e0e:	66 23       	and	r22, r22
     e10:	41 f0       	breq	.+16     	; 0xe22 <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb+0x14>
			Set();
     e12:	dc 01       	movw	r26, r24
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	06 84       	ldd	r0, Z+14	; 0x0e
     e1a:	f7 85       	ldd	r31, Z+15	; 0x0f
     e1c:	e0 2d       	mov	r30, r0
     e1e:	09 95       	icall
     e20:	08 95       	ret
		else
			Clear();
     e22:	dc 01       	movw	r26, r24
     e24:	ed 91       	ld	r30, X+
     e26:	fc 91       	ld	r31, X
     e28:	00 88       	ldd	r0, Z+16	; 0x10
     e2a:	f1 89       	ldd	r31, Z+17	; 0x11
     e2c:	e0 2d       	mov	r30, r0
     e2e:	09 95       	icall
     e30:	08 95       	ret

00000e32 <_ZN4PinSILh59ELh57ELh58ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     e32:	89 b3       	in	r24, 0x19	; 25
    }
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	08 95       	ret

00000e38 <_ZN4PinSILh59ELh57ELh58ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     e38:	d8 9a       	sbi	0x1b, 0	; 27
     e3a:	08 95       	ret

00000e3c <_ZN4PinSILh59ELh57ELh58ELh0EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     e3c:	d8 98       	cbi	0x1b, 0	; 27
     e3e:	08 95       	ret

00000e40 <_ZN4PinSILh59ELh57ELh58ELh0EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     e40:	9b b3       	in	r25, 0x1b	; 27
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 27       	eor	r24, r25
     e46:	8b bb       	out	0x1b, r24	; 27
     e48:	08 95       	ret

00000e4a <_ZN4PinSILh59ELh57ELh58ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     e4a:	d0 9a       	sbi	0x1a, 0	; 26
     e4c:	08 95       	ret

00000e4e <_ZN4PinSILh59ELh57ELh58ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     e4e:	d0 98       	cbi	0x1a, 0	; 26
     e50:	08 95       	ret

00000e52 <_ZN4PinSILh50ELh48ELh49ELh5EED0Ev>:
     e52:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e56:	08 95       	ret

00000e58 <_ZN4PinSILh53ELh51ELh52ELh0EED0Ev>:
     e58:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e5c:	08 95       	ret

00000e5e <_ZN4PinSILh53ELh51ELh52ELh1EED0Ev>:
     e5e:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e62:	08 95       	ret

00000e64 <_ZN4PinSILh53ELh51ELh52ELh2EED0Ev>:
     e64:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e68:	08 95       	ret

00000e6a <_ZN4PinSILh53ELh51ELh52ELh3EED0Ev>:
     e6a:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e6e:	08 95       	ret

00000e70 <_ZN4PinSILh53ELh51ELh52ELh4EED0Ev>:
     e70:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e74:	08 95       	ret

00000e76 <_ZN4PinSILh53ELh51ELh52ELh5EED0Ev>:
     e76:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e7a:	08 95       	ret

00000e7c <_ZN4PinSILh53ELh51ELh52ELh6EED0Ev>:
     e7c:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e80:	08 95       	ret

00000e82 <_ZN4PinSILh53ELh51ELh52ELh7EED0Ev>:
     e82:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e86:	08 95       	ret

00000e88 <_ZN4PinSILh56ELh54ELh55ELh7EED0Ev>:
     e88:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e8c:	08 95       	ret

00000e8e <_ZN4PinSILh56ELh54ELh55ELh6EED0Ev>:
     e8e:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e92:	08 95       	ret

00000e94 <_ZN4PinSILh56ELh54ELh55ELh5EED0Ev>:
     e94:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e98:	08 95       	ret

00000e9a <_ZN4PinSILh56ELh54ELh55ELh4EED0Ev>:
     e9a:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     e9e:	08 95       	ret

00000ea0 <_ZN4PinSILh56ELh54ELh55ELh3EED0Ev>:
     ea0:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     ea4:	08 95       	ret

00000ea6 <_ZN4PinSILh56ELh54ELh55ELh2EED0Ev>:
     ea6:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     eaa:	08 95       	ret

00000eac <_ZN4PinSILh56ELh54ELh55ELh1EED0Ev>:
     eac:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     eb0:	08 95       	ret

00000eb2 <_ZN4PinSILh56ELh54ELh55ELh0EED0Ev>:
     eb2:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     eb6:	08 95       	ret

00000eb8 <_ZN4PinSILh59ELh57ELh58ELh2EED0Ev>:
     eb8:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     ebc:	08 95       	ret

00000ebe <_ZN4PinSILh59ELh57ELh58ELh1EED0Ev>:
     ebe:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     ec2:	08 95       	ret

00000ec4 <_ZN4PinSILh59ELh57ELh58ELh0EED0Ev>:
     ec4:	0e 94 9c 09 	call	0x1338	; 0x1338 <free>
     ec8:	08 95       	ret

00000eca <__divsf3>:
     eca:	0e 94 79 07 	call	0xef2	; 0xef2 <__divsf3x>
     ece:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_round>
     ed2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscB>
     ed6:	58 f0       	brcs	.+22     	; 0xeee <__divsf3+0x24>
     ed8:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fp_pscA>
     edc:	40 f0       	brcs	.+16     	; 0xeee <__divsf3+0x24>
     ede:	29 f4       	brne	.+10     	; 0xeea <__divsf3+0x20>
     ee0:	5f 3f       	cpi	r21, 0xFF	; 255
     ee2:	29 f0       	breq	.+10     	; 0xeee <__divsf3+0x24>
     ee4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_inf>
     ee8:	51 11       	cpse	r21, r1
     eea:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_szero>
     eee:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_nan>

00000ef2 <__divsf3x>:
     ef2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_split3>
     ef6:	68 f3       	brcs	.-38     	; 0xed2 <__divsf3+0x8>

00000ef8 <__divsf3_pse>:
     ef8:	99 23       	and	r25, r25
     efa:	b1 f3       	breq	.-20     	; 0xee8 <__divsf3+0x1e>
     efc:	55 23       	and	r21, r21
     efe:	91 f3       	breq	.-28     	; 0xee4 <__divsf3+0x1a>
     f00:	95 1b       	sub	r25, r21
     f02:	55 0b       	sbc	r21, r21
     f04:	bb 27       	eor	r27, r27
     f06:	aa 27       	eor	r26, r26
     f08:	62 17       	cp	r22, r18
     f0a:	73 07       	cpc	r23, r19
     f0c:	84 07       	cpc	r24, r20
     f0e:	38 f0       	brcs	.+14     	; 0xf1e <__divsf3_pse+0x26>
     f10:	9f 5f       	subi	r25, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	44 1f       	adc	r20, r20
     f1a:	aa 1f       	adc	r26, r26
     f1c:	a9 f3       	breq	.-22     	; 0xf08 <__divsf3_pse+0x10>
     f1e:	35 d0       	rcall	.+106    	; 0xf8a <__divsf3_pse+0x92>
     f20:	0e 2e       	mov	r0, r30
     f22:	3a f0       	brmi	.+14     	; 0xf32 <__divsf3_pse+0x3a>
     f24:	e0 e8       	ldi	r30, 0x80	; 128
     f26:	32 d0       	rcall	.+100    	; 0xf8c <__divsf3_pse+0x94>
     f28:	91 50       	subi	r25, 0x01	; 1
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	e6 95       	lsr	r30
     f2e:	00 1c       	adc	r0, r0
     f30:	ca f7       	brpl	.-14     	; 0xf24 <__divsf3_pse+0x2c>
     f32:	2b d0       	rcall	.+86     	; 0xf8a <__divsf3_pse+0x92>
     f34:	fe 2f       	mov	r31, r30
     f36:	29 d0       	rcall	.+82     	; 0xf8a <__divsf3_pse+0x92>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	bb 1f       	adc	r27, r27
     f40:	26 17       	cp	r18, r22
     f42:	37 07       	cpc	r19, r23
     f44:	48 07       	cpc	r20, r24
     f46:	ab 07       	cpc	r26, r27
     f48:	b0 e8       	ldi	r27, 0x80	; 128
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__divsf3_pse+0x56>
     f4c:	bb 0b       	sbc	r27, r27
     f4e:	80 2d       	mov	r24, r0
     f50:	bf 01       	movw	r22, r30
     f52:	ff 27       	eor	r31, r31
     f54:	93 58       	subi	r25, 0x83	; 131
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	3a f0       	brmi	.+14     	; 0xf68 <__divsf3_pse+0x70>
     f5a:	9e 3f       	cpi	r25, 0xFE	; 254
     f5c:	51 05       	cpc	r21, r1
     f5e:	78 f0       	brcs	.+30     	; 0xf7e <__divsf3_pse+0x86>
     f60:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_inf>
     f64:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	e4 f3       	brlt	.-8      	; 0xf64 <__divsf3_pse+0x6c>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	d4 f3       	brlt	.-12     	; 0xf64 <__divsf3_pse+0x6c>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__divsf3_pse+0x78>
     f7e:	88 0f       	add	r24, r24
     f80:	91 1d       	adc	r25, r1
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	bb 1f       	adc	r27, r27
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	ba 07       	cpc	r27, r26
     f9c:	20 f0       	brcs	.+8      	; 0xfa6 <__divsf3_pse+0xae>
     f9e:	62 1b       	sub	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	ee 1f       	adc	r30, r30
     fa8:	88 f7       	brcc	.-30     	; 0xf8c <__divsf3_pse+0x94>
     faa:	e0 95       	com	r30
     fac:	08 95       	ret

00000fae <__fixunssfsi>:
     fae:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_splitA>
     fb2:	88 f0       	brcs	.+34     	; 0xfd6 <__fixunssfsi+0x28>
     fb4:	9f 57       	subi	r25, 0x7F	; 127
     fb6:	98 f0       	brcs	.+38     	; 0xfde <__fixunssfsi+0x30>
     fb8:	b9 2f       	mov	r27, r25
     fba:	99 27       	eor	r25, r25
     fbc:	b7 51       	subi	r27, 0x17	; 23
     fbe:	b0 f0       	brcs	.+44     	; 0xfec <__fixunssfsi+0x3e>
     fc0:	e1 f0       	breq	.+56     	; 0xffa <__fixunssfsi+0x4c>
     fc2:	66 0f       	add	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	1a f0       	brmi	.+6      	; 0xfd2 <__fixunssfsi+0x24>
     fcc:	ba 95       	dec	r27
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__fixunssfsi+0x14>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <__fixunssfsi+0x4c>
     fd2:	b1 30       	cpi	r27, 0x01	; 1
     fd4:	91 f0       	breq	.+36     	; 0xffa <__fixunssfsi+0x4c>
     fd6:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_zero>
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	08 95       	ret
     fde:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_zero>
     fe2:	67 2f       	mov	r22, r23
     fe4:	78 2f       	mov	r23, r24
     fe6:	88 27       	eor	r24, r24
     fe8:	b8 5f       	subi	r27, 0xF8	; 248
     fea:	39 f0       	breq	.+14     	; 0xffa <__fixunssfsi+0x4c>
     fec:	b9 3f       	cpi	r27, 0xF9	; 249
     fee:	cc f3       	brlt	.-14     	; 0xfe2 <__fixunssfsi+0x34>
     ff0:	86 95       	lsr	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b3 95       	inc	r27
     ff8:	d9 f7       	brne	.-10     	; 0xff0 <__fixunssfsi+0x42>
     ffa:	3e f4       	brtc	.+14     	; 0x100a <__fixunssfsi+0x5c>
     ffc:	90 95       	com	r25
     ffe:	80 95       	com	r24
    1000:	70 95       	com	r23
    1002:	61 95       	neg	r22
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__floatunsisf>:
    100c:	e8 94       	clt
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <__floatsisf+0x12>

00001010 <__floatsisf>:
    1010:	97 fb       	bst	r25, 7
    1012:	3e f4       	brtc	.+14     	; 0x1022 <__floatsisf+0x12>
    1014:	90 95       	com	r25
    1016:	80 95       	com	r24
    1018:	70 95       	com	r23
    101a:	61 95       	neg	r22
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	99 23       	and	r25, r25
    1024:	a9 f0       	breq	.+42     	; 0x1050 <__floatsisf+0x40>
    1026:	f9 2f       	mov	r31, r25
    1028:	96 e9       	ldi	r25, 0x96	; 150
    102a:	bb 27       	eor	r27, r27
    102c:	93 95       	inc	r25
    102e:	f6 95       	lsr	r31
    1030:	87 95       	ror	r24
    1032:	77 95       	ror	r23
    1034:	67 95       	ror	r22
    1036:	b7 95       	ror	r27
    1038:	f1 11       	cpse	r31, r1
    103a:	f8 cf       	rjmp	.-16     	; 0x102c <__floatsisf+0x1c>
    103c:	fa f4       	brpl	.+62     	; 0x107c <__floatsisf+0x6c>
    103e:	bb 0f       	add	r27, r27
    1040:	11 f4       	brne	.+4      	; 0x1046 <__floatsisf+0x36>
    1042:	60 ff       	sbrs	r22, 0
    1044:	1b c0       	rjmp	.+54     	; 0x107c <__floatsisf+0x6c>
    1046:	6f 5f       	subi	r22, 0xFF	; 255
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	8f 4f       	sbci	r24, 0xFF	; 255
    104c:	9f 4f       	sbci	r25, 0xFF	; 255
    104e:	16 c0       	rjmp	.+44     	; 0x107c <__floatsisf+0x6c>
    1050:	88 23       	and	r24, r24
    1052:	11 f0       	breq	.+4      	; 0x1058 <__floatsisf+0x48>
    1054:	96 e9       	ldi	r25, 0x96	; 150
    1056:	11 c0       	rjmp	.+34     	; 0x107a <__floatsisf+0x6a>
    1058:	77 23       	and	r23, r23
    105a:	21 f0       	breq	.+8      	; 0x1064 <__floatsisf+0x54>
    105c:	9e e8       	ldi	r25, 0x8E	; 142
    105e:	87 2f       	mov	r24, r23
    1060:	76 2f       	mov	r23, r22
    1062:	05 c0       	rjmp	.+10     	; 0x106e <__floatsisf+0x5e>
    1064:	66 23       	and	r22, r22
    1066:	71 f0       	breq	.+28     	; 0x1084 <__floatsisf+0x74>
    1068:	96 e8       	ldi	r25, 0x86	; 134
    106a:	86 2f       	mov	r24, r22
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	2a f0       	brmi	.+10     	; 0x107c <__floatsisf+0x6c>
    1072:	9a 95       	dec	r25
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	da f7       	brpl	.-10     	; 0x1072 <__floatsisf+0x62>
    107c:	88 0f       	add	r24, r24
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	97 f9       	bld	r25, 7
    1084:	08 95       	ret

00001086 <__fp_inf>:
    1086:	97 f9       	bld	r25, 7
    1088:	9f 67       	ori	r25, 0x7F	; 127
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	08 95       	ret

00001092 <__fp_nan>:
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	80 ec       	ldi	r24, 0xC0	; 192
    1096:	08 95       	ret

00001098 <__fp_pscA>:
    1098:	00 24       	eor	r0, r0
    109a:	0a 94       	dec	r0
    109c:	16 16       	cp	r1, r22
    109e:	17 06       	cpc	r1, r23
    10a0:	18 06       	cpc	r1, r24
    10a2:	09 06       	cpc	r0, r25
    10a4:	08 95       	ret

000010a6 <__fp_pscB>:
    10a6:	00 24       	eor	r0, r0
    10a8:	0a 94       	dec	r0
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	05 06       	cpc	r0, r21
    10b2:	08 95       	ret

000010b4 <__fp_round>:
    10b4:	09 2e       	mov	r0, r25
    10b6:	03 94       	inc	r0
    10b8:	00 0c       	add	r0, r0
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__fp_round+0xc>
    10bc:	88 23       	and	r24, r24
    10be:	52 f0       	brmi	.+20     	; 0x10d4 <__fp_round+0x20>
    10c0:	bb 0f       	add	r27, r27
    10c2:	40 f4       	brcc	.+16     	; 0x10d4 <__fp_round+0x20>
    10c4:	bf 2b       	or	r27, r31
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0x18>
    10c8:	60 ff       	sbrs	r22, 0
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <__fp_round+0x20>
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	08 95       	ret

000010d6 <__fp_split3>:
    10d6:	57 fd       	sbrc	r21, 7
    10d8:	90 58       	subi	r25, 0x80	; 128
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	59 f0       	breq	.+22     	; 0x10f6 <__fp_splitA+0x10>
    10e0:	5f 3f       	cpi	r21, 0xFF	; 255
    10e2:	71 f0       	breq	.+28     	; 0x1100 <__fp_splitA+0x1a>
    10e4:	47 95       	ror	r20

000010e6 <__fp_splitA>:
    10e6:	88 0f       	add	r24, r24
    10e8:	97 fb       	bst	r25, 7
    10ea:	99 1f       	adc	r25, r25
    10ec:	61 f0       	breq	.+24     	; 0x1106 <__fp_splitA+0x20>
    10ee:	9f 3f       	cpi	r25, 0xFF	; 255
    10f0:	79 f0       	breq	.+30     	; 0x1110 <__fp_splitA+0x2a>
    10f2:	87 95       	ror	r24
    10f4:	08 95       	ret
    10f6:	12 16       	cp	r1, r18
    10f8:	13 06       	cpc	r1, r19
    10fa:	14 06       	cpc	r1, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	f2 cf       	rjmp	.-28     	; 0x10e4 <__fp_split3+0xe>
    1100:	46 95       	lsr	r20
    1102:	f1 df       	rcall	.-30     	; 0x10e6 <__fp_splitA>
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <__fp_splitA+0x30>
    1106:	16 16       	cp	r1, r22
    1108:	17 06       	cpc	r1, r23
    110a:	18 06       	cpc	r1, r24
    110c:	99 1f       	adc	r25, r25
    110e:	f1 cf       	rjmp	.-30     	; 0x10f2 <__fp_splitA+0xc>
    1110:	86 95       	lsr	r24
    1112:	71 05       	cpc	r23, r1
    1114:	61 05       	cpc	r22, r1
    1116:	08 94       	sec
    1118:	08 95       	ret

0000111a <__fp_zero>:
    111a:	e8 94       	clt

0000111c <__fp_szero>:
    111c:	bb 27       	eor	r27, r27
    111e:	66 27       	eor	r22, r22
    1120:	77 27       	eor	r23, r23
    1122:	cb 01       	movw	r24, r22
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <__mulsf3>:
    1128:	0e 94 a7 08 	call	0x114e	; 0x114e <__mulsf3x>
    112c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_round>
    1130:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fp_pscA>
    1134:	38 f0       	brcs	.+14     	; 0x1144 <__mulsf3+0x1c>
    1136:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscB>
    113a:	20 f0       	brcs	.+8      	; 0x1144 <__mulsf3+0x1c>
    113c:	95 23       	and	r25, r21
    113e:	11 f0       	breq	.+4      	; 0x1144 <__mulsf3+0x1c>
    1140:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_inf>
    1144:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_nan>
    1148:	11 24       	eor	r1, r1
    114a:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_szero>

0000114e <__mulsf3x>:
    114e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_split3>
    1152:	70 f3       	brcs	.-36     	; 0x1130 <__mulsf3+0x8>

00001154 <__mulsf3_pse>:
    1154:	95 9f       	mul	r25, r21
    1156:	c1 f3       	breq	.-16     	; 0x1148 <__mulsf3+0x20>
    1158:	95 0f       	add	r25, r21
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	55 1f       	adc	r21, r21
    115e:	62 9f       	mul	r22, r18
    1160:	f0 01       	movw	r30, r0
    1162:	72 9f       	mul	r23, r18
    1164:	bb 27       	eor	r27, r27
    1166:	f0 0d       	add	r31, r0
    1168:	b1 1d       	adc	r27, r1
    116a:	63 9f       	mul	r22, r19
    116c:	aa 27       	eor	r26, r26
    116e:	f0 0d       	add	r31, r0
    1170:	b1 1d       	adc	r27, r1
    1172:	aa 1f       	adc	r26, r26
    1174:	64 9f       	mul	r22, r20
    1176:	66 27       	eor	r22, r22
    1178:	b0 0d       	add	r27, r0
    117a:	a1 1d       	adc	r26, r1
    117c:	66 1f       	adc	r22, r22
    117e:	82 9f       	mul	r24, r18
    1180:	22 27       	eor	r18, r18
    1182:	b0 0d       	add	r27, r0
    1184:	a1 1d       	adc	r26, r1
    1186:	62 1f       	adc	r22, r18
    1188:	73 9f       	mul	r23, r19
    118a:	b0 0d       	add	r27, r0
    118c:	a1 1d       	adc	r26, r1
    118e:	62 1f       	adc	r22, r18
    1190:	83 9f       	mul	r24, r19
    1192:	a0 0d       	add	r26, r0
    1194:	61 1d       	adc	r22, r1
    1196:	22 1f       	adc	r18, r18
    1198:	74 9f       	mul	r23, r20
    119a:	33 27       	eor	r19, r19
    119c:	a0 0d       	add	r26, r0
    119e:	61 1d       	adc	r22, r1
    11a0:	23 1f       	adc	r18, r19
    11a2:	84 9f       	mul	r24, r20
    11a4:	60 0d       	add	r22, r0
    11a6:	21 1d       	adc	r18, r1
    11a8:	82 2f       	mov	r24, r18
    11aa:	76 2f       	mov	r23, r22
    11ac:	6a 2f       	mov	r22, r26
    11ae:	11 24       	eor	r1, r1
    11b0:	9f 57       	subi	r25, 0x7F	; 127
    11b2:	50 40       	sbci	r21, 0x00	; 0
    11b4:	9a f0       	brmi	.+38     	; 0x11dc <__mulsf3_pse+0x88>
    11b6:	f1 f0       	breq	.+60     	; 0x11f4 <__mulsf3_pse+0xa0>
    11b8:	88 23       	and	r24, r24
    11ba:	4a f0       	brmi	.+18     	; 0x11ce <__mulsf3_pse+0x7a>
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	bb 1f       	adc	r27, r27
    11c2:	66 1f       	adc	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	50 40       	sbci	r21, 0x00	; 0
    11cc:	a9 f7       	brne	.-22     	; 0x11b8 <__mulsf3_pse+0x64>
    11ce:	9e 3f       	cpi	r25, 0xFE	; 254
    11d0:	51 05       	cpc	r21, r1
    11d2:	80 f0       	brcs	.+32     	; 0x11f4 <__mulsf3_pse+0xa0>
    11d4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_inf>
    11d8:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_szero>
    11dc:	5f 3f       	cpi	r21, 0xFF	; 255
    11de:	e4 f3       	brlt	.-8      	; 0x11d8 <__mulsf3_pse+0x84>
    11e0:	98 3e       	cpi	r25, 0xE8	; 232
    11e2:	d4 f3       	brlt	.-12     	; 0x11d8 <__mulsf3_pse+0x84>
    11e4:	86 95       	lsr	r24
    11e6:	77 95       	ror	r23
    11e8:	67 95       	ror	r22
    11ea:	b7 95       	ror	r27
    11ec:	f7 95       	ror	r31
    11ee:	e7 95       	ror	r30
    11f0:	9f 5f       	subi	r25, 0xFF	; 255
    11f2:	c1 f7       	brne	.-16     	; 0x11e4 <__mulsf3_pse+0x90>
    11f4:	fe 2b       	or	r31, r30
    11f6:	88 0f       	add	r24, r24
    11f8:	91 1d       	adc	r25, r1
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	97 f9       	bld	r25, 7
    1200:	08 95       	ret

00001202 <__tablejump2__>:
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	05 90       	lpm	r0, Z+
    1208:	f4 91       	lpm	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	09 94       	ijmp

0000120e <malloc>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	10 f4       	brcc	.+4      	; 0x121c <malloc+0xe>
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	e0 91 41 03 	lds	r30, 0x0341
    1220:	f0 91 42 03 	lds	r31, 0x0342
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	d0 e0       	ldi	r29, 0x00	; 0
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	11 f1       	breq	.+68     	; 0x1274 <malloc+0x66>
    1230:	40 81       	ld	r20, Z
    1232:	51 81       	ldd	r21, Z+1	; 0x01
    1234:	48 17       	cp	r20, r24
    1236:	59 07       	cpc	r21, r25
    1238:	c0 f0       	brcs	.+48     	; 0x126a <malloc+0x5c>
    123a:	48 17       	cp	r20, r24
    123c:	59 07       	cpc	r21, r25
    123e:	61 f4       	brne	.+24     	; 0x1258 <malloc+0x4a>
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	20 97       	sbiw	r28, 0x00	; 0
    1246:	19 f0       	breq	.+6      	; 0x124e <malloc+0x40>
    1248:	9b 83       	std	Y+3, r25	; 0x03
    124a:	8a 83       	std	Y+2, r24	; 0x02
    124c:	2b c0       	rjmp	.+86     	; 0x12a4 <malloc+0x96>
    124e:	90 93 42 03 	sts	0x0342, r25
    1252:	80 93 41 03 	sts	0x0341, r24
    1256:	26 c0       	rjmp	.+76     	; 0x12a4 <malloc+0x96>
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	19 f0       	breq	.+6      	; 0x1264 <malloc+0x56>
    125e:	42 17       	cp	r20, r18
    1260:	53 07       	cpc	r21, r19
    1262:	18 f4       	brcc	.+6      	; 0x126a <malloc+0x5c>
    1264:	9a 01       	movw	r18, r20
    1266:	be 01       	movw	r22, r28
    1268:	df 01       	movw	r26, r30
    126a:	ef 01       	movw	r28, r30
    126c:	02 80       	ldd	r0, Z+2	; 0x02
    126e:	f3 81       	ldd	r31, Z+3	; 0x03
    1270:	e0 2d       	mov	r30, r0
    1272:	dc cf       	rjmp	.-72     	; 0x122c <malloc+0x1e>
    1274:	21 15       	cp	r18, r1
    1276:	31 05       	cpc	r19, r1
    1278:	09 f1       	breq	.+66     	; 0x12bc <malloc+0xae>
    127a:	28 1b       	sub	r18, r24
    127c:	39 0b       	sbc	r19, r25
    127e:	24 30       	cpi	r18, 0x04	; 4
    1280:	31 05       	cpc	r19, r1
    1282:	90 f4       	brcc	.+36     	; 0x12a8 <malloc+0x9a>
    1284:	12 96       	adiw	r26, 0x02	; 2
    1286:	8d 91       	ld	r24, X+
    1288:	9c 91       	ld	r25, X
    128a:	13 97       	sbiw	r26, 0x03	; 3
    128c:	61 15       	cp	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	21 f0       	breq	.+8      	; 0x129a <malloc+0x8c>
    1292:	fb 01       	movw	r30, r22
    1294:	93 83       	std	Z+3, r25	; 0x03
    1296:	82 83       	std	Z+2, r24	; 0x02
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <malloc+0x94>
    129a:	90 93 42 03 	sts	0x0342, r25
    129e:	80 93 41 03 	sts	0x0341, r24
    12a2:	fd 01       	movw	r30, r26
    12a4:	32 96       	adiw	r30, 0x02	; 2
    12a6:	44 c0       	rjmp	.+136    	; 0x1330 <malloc+0x122>
    12a8:	fd 01       	movw	r30, r26
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	81 93       	st	Z+, r24
    12b0:	91 93       	st	Z+, r25
    12b2:	22 50       	subi	r18, 0x02	; 2
    12b4:	31 09       	sbc	r19, r1
    12b6:	2d 93       	st	X+, r18
    12b8:	3c 93       	st	X, r19
    12ba:	3a c0       	rjmp	.+116    	; 0x1330 <malloc+0x122>
    12bc:	20 91 3f 03 	lds	r18, 0x033F
    12c0:	30 91 40 03 	lds	r19, 0x0340
    12c4:	23 2b       	or	r18, r19
    12c6:	41 f4       	brne	.+16     	; 0x12d8 <malloc+0xca>
    12c8:	20 91 8a 00 	lds	r18, 0x008A
    12cc:	30 91 8b 00 	lds	r19, 0x008B
    12d0:	30 93 40 03 	sts	0x0340, r19
    12d4:	20 93 3f 03 	sts	0x033F, r18
    12d8:	20 91 88 00 	lds	r18, 0x0088
    12dc:	30 91 89 00 	lds	r19, 0x0089
    12e0:	21 15       	cp	r18, r1
    12e2:	31 05       	cpc	r19, r1
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <malloc+0xe8>
    12e6:	2d b7       	in	r18, 0x3d	; 61
    12e8:	3e b7       	in	r19, 0x3e	; 62
    12ea:	40 91 8c 00 	lds	r20, 0x008C
    12ee:	50 91 8d 00 	lds	r21, 0x008D
    12f2:	24 1b       	sub	r18, r20
    12f4:	35 0b       	sbc	r19, r21
    12f6:	e0 91 3f 03 	lds	r30, 0x033F
    12fa:	f0 91 40 03 	lds	r31, 0x0340
    12fe:	e2 17       	cp	r30, r18
    1300:	f3 07       	cpc	r31, r19
    1302:	a0 f4       	brcc	.+40     	; 0x132c <malloc+0x11e>
    1304:	2e 1b       	sub	r18, r30
    1306:	3f 0b       	sbc	r19, r31
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	78 f0       	brcs	.+30     	; 0x132c <malloc+0x11e>
    130e:	ac 01       	movw	r20, r24
    1310:	4e 5f       	subi	r20, 0xFE	; 254
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	24 17       	cp	r18, r20
    1316:	35 07       	cpc	r19, r21
    1318:	48 f0       	brcs	.+18     	; 0x132c <malloc+0x11e>
    131a:	4e 0f       	add	r20, r30
    131c:	5f 1f       	adc	r21, r31
    131e:	50 93 40 03 	sts	0x0340, r21
    1322:	40 93 3f 03 	sts	0x033F, r20
    1326:	81 93       	st	Z+, r24
    1328:	91 93       	st	Z+, r25
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <malloc+0x122>
    132c:	e0 e0       	ldi	r30, 0x00	; 0
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	cf 01       	movw	r24, r30
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <free>:
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f4       	brne	.+2      	; 0x1346 <free+0xe>
    1344:	8c c0       	rjmp	.+280    	; 0x145e <free+0x126>
    1346:	fc 01       	movw	r30, r24
    1348:	32 97       	sbiw	r30, 0x02	; 2
    134a:	13 82       	std	Z+3, r1	; 0x03
    134c:	12 82       	std	Z+2, r1	; 0x02
    134e:	00 91 41 03 	lds	r16, 0x0341
    1352:	10 91 42 03 	lds	r17, 0x0342
    1356:	01 15       	cp	r16, r1
    1358:	11 05       	cpc	r17, r1
    135a:	81 f4       	brne	.+32     	; 0x137c <free+0x44>
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	20 91 3f 03 	lds	r18, 0x033F
    1368:	30 91 40 03 	lds	r19, 0x0340
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	79 f5       	brne	.+94     	; 0x13d0 <free+0x98>
    1372:	f0 93 40 03 	sts	0x0340, r31
    1376:	e0 93 3f 03 	sts	0x033F, r30
    137a:	71 c0       	rjmp	.+226    	; 0x145e <free+0x126>
    137c:	d8 01       	movw	r26, r16
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	ae 17       	cp	r26, r30
    1384:	bf 07       	cpc	r27, r31
    1386:	50 f4       	brcc	.+20     	; 0x139c <free+0x64>
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	2d 91       	ld	r18, X+
    138c:	3c 91       	ld	r19, X
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	ad 01       	movw	r20, r26
    1392:	21 15       	cp	r18, r1
    1394:	31 05       	cpc	r19, r1
    1396:	09 f1       	breq	.+66     	; 0x13da <free+0xa2>
    1398:	d9 01       	movw	r26, r18
    139a:	f3 cf       	rjmp	.-26     	; 0x1382 <free+0x4a>
    139c:	9d 01       	movw	r18, r26
    139e:	da 01       	movw	r26, r20
    13a0:	33 83       	std	Z+3, r19	; 0x03
    13a2:	22 83       	std	Z+2, r18	; 0x02
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	86 0f       	add	r24, r22
    13aa:	97 1f       	adc	r25, r23
    13ac:	82 17       	cp	r24, r18
    13ae:	93 07       	cpc	r25, r19
    13b0:	69 f4       	brne	.+26     	; 0x13cc <free+0x94>
    13b2:	ec 01       	movw	r28, r24
    13b4:	28 81       	ld	r18, Y
    13b6:	39 81       	ldd	r19, Y+1	; 0x01
    13b8:	26 0f       	add	r18, r22
    13ba:	37 1f       	adc	r19, r23
    13bc:	2e 5f       	subi	r18, 0xFE	; 254
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	31 83       	std	Z+1, r19	; 0x01
    13c2:	20 83       	st	Z, r18
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	9b 81       	ldd	r25, Y+3	; 0x03
    13c8:	93 83       	std	Z+3, r25	; 0x03
    13ca:	82 83       	std	Z+2, r24	; 0x02
    13cc:	45 2b       	or	r20, r21
    13ce:	29 f4       	brne	.+10     	; 0x13da <free+0xa2>
    13d0:	f0 93 42 03 	sts	0x0342, r31
    13d4:	e0 93 41 03 	sts	0x0341, r30
    13d8:	42 c0       	rjmp	.+132    	; 0x145e <free+0x126>
    13da:	13 96       	adiw	r26, 0x03	; 3
    13dc:	fc 93       	st	X, r31
    13de:	ee 93       	st	-X, r30
    13e0:	12 97       	sbiw	r26, 0x02	; 2
    13e2:	ed 01       	movw	r28, r26
    13e4:	49 91       	ld	r20, Y+
    13e6:	59 91       	ld	r21, Y+
    13e8:	9e 01       	movw	r18, r28
    13ea:	24 0f       	add	r18, r20
    13ec:	35 1f       	adc	r19, r21
    13ee:	e2 17       	cp	r30, r18
    13f0:	f3 07       	cpc	r31, r19
    13f2:	71 f4       	brne	.+28     	; 0x1410 <free+0xd8>
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	84 0f       	add	r24, r20
    13fa:	95 1f       	adc	r25, r21
    13fc:	02 96       	adiw	r24, 0x02	; 2
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	9c 93       	st	X, r25
    1402:	8e 93       	st	-X, r24
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	12 97       	sbiw	r26, 0x02	; 2
    1410:	e0 e0       	ldi	r30, 0x00	; 0
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	d8 01       	movw	r26, r16
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	8d 91       	ld	r24, X+
    141a:	9c 91       	ld	r25, X
    141c:	13 97       	sbiw	r26, 0x03	; 3
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	19 f0       	breq	.+6      	; 0x1428 <free+0xf0>
    1422:	f8 01       	movw	r30, r16
    1424:	8c 01       	movw	r16, r24
    1426:	f6 cf       	rjmp	.-20     	; 0x1414 <free+0xdc>
    1428:	8d 91       	ld	r24, X+
    142a:	9c 91       	ld	r25, X
    142c:	98 01       	movw	r18, r16
    142e:	2e 5f       	subi	r18, 0xFE	; 254
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	82 0f       	add	r24, r18
    1434:	93 1f       	adc	r25, r19
    1436:	20 91 3f 03 	lds	r18, 0x033F
    143a:	30 91 40 03 	lds	r19, 0x0340
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	69 f4       	brne	.+26     	; 0x145e <free+0x126>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	29 f4       	brne	.+10     	; 0x1452 <free+0x11a>
    1448:	10 92 42 03 	sts	0x0342, r1
    144c:	10 92 41 03 	sts	0x0341, r1
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <free+0x11e>
    1452:	13 82       	std	Z+3, r1	; 0x03
    1454:	12 82       	std	Z+2, r1	; 0x02
    1456:	10 93 40 03 	sts	0x0340, r17
    145a:	00 93 3f 03 	sts	0x033F, r16
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <__do_global_dtors>:
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	cb e2       	ldi	r28, 0x2B	; 43
    146c:	d0 e0       	ldi	r29, 0x00	; 0
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <__do_global_dtors+0x10>
    1470:	fe 01       	movw	r30, r28
    1472:	0e 94 01 09 	call	0x1202	; 0x1202 <__tablejump2__>
    1476:	21 96       	adiw	r28, 0x01	; 1
    1478:	cc 32       	cpi	r28, 0x2C	; 44
    147a:	d1 07       	cpc	r29, r17
    147c:	c9 f7       	brne	.-14     	; 0x1470 <__do_global_dtors+0x8>
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
